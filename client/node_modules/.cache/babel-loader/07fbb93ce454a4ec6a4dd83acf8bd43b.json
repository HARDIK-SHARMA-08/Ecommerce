{"ast":null,"code":"\"use client\";\n\n// src/use-avatar-group.ts\nimport _objectSpread from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport { avatarGroup } from \"@nextui-org/theme\";\nimport { useDOMRef } from \"@nextui-org/react-utils\";\nimport { clsx, compact } from \"@nextui-org/shared-utils\";\nimport { getValidChildren } from \"@nextui-org/react-utils\";\nimport { cloneElement, useMemo } from \"react\";\nfunction useAvatarGroup() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var as = props.as,\n    ref = props.ref,\n    _props$max = props.max,\n    max = _props$max === void 0 ? 5 : _props$max,\n    total = props.total,\n    size = props.size,\n    color = props.color,\n    radius = props.radius,\n    children = props.children,\n    isBordered = props.isBordered,\n    isDisabled = props.isDisabled,\n    isGrid = props.isGrid,\n    renderCount = props.renderCount,\n    className = props.className,\n    otherProps = _objectWithoutProperties(props, [\"as\", \"ref\", \"max\", \"total\", \"size\", \"color\", \"radius\", \"children\", \"isBordered\", \"isDisabled\", \"isGrid\", \"renderCount\", \"className\"]);\n  var domRef = useDOMRef(ref);\n  var Component = as || \"div\";\n  var context = useMemo(function () {\n    return {\n      size: size,\n      color: color,\n      radius: radius,\n      isGrid: isGrid,\n      isBordered: isBordered,\n      isDisabled: isDisabled\n    };\n  }, [size, color, radius, isGrid, isBordered, isDisabled]);\n  var classNames = useMemo(function () {\n    return avatarGroup({\n      className: className,\n      isGrid: isGrid\n    });\n  }, [className, isGrid]);\n  var validChildren = getValidChildren(children);\n  var childrenWithinMax = max ? validChildren.slice(0, max) : validChildren;\n  var remainingCount = total ? total : max != null ? validChildren.length - max : -1;\n  var clones = childrenWithinMax.map(function (child, index) {\n    var isFirstAvatar = index === 0;\n    var isLastAvatar = index === childrenWithinMax.length - 1;\n    var childProps = {\n      className: clsx(isFirstAvatar ? \"ml-0\" : !isGrid ? \"-ml-2\" : \"\", isLastAvatar && remainingCount < 1 ? \"hover:-translate-x-0\" : \"\")\n    };\n    return cloneElement(child, compact(childProps));\n  });\n  var getAvatarGroupProps = function getAvatarGroupProps() {\n    return _objectSpread({\n      ref: domRef,\n      className: classNames,\n      role: \"group\"\n    }, otherProps);\n  };\n  return {\n    Component: Component,\n    context: context,\n    remainingCount: remainingCount,\n    clones: clones,\n    renderCount: renderCount,\n    getAvatarGroupProps: getAvatarGroupProps\n  };\n}\nexport { useAvatarGroup };","map":null,"metadata":{},"sourceType":"module"}