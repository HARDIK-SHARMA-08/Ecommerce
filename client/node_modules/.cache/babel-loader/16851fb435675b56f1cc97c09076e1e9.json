{"ast":null,"code":"import _toConsumableArray from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { isObject } from \"./chunk-MCFSCOSB.mjs\";\n\n// src/object.ts\nvar renameProp = function renameProp(oldProp, newProp, _ref) {\n  var old = _ref[oldProp],\n    others = _objectWithoutProperties(_ref, [oldProp].map(_toPropertyKey));\n  return _objectSpread(_defineProperty({}, newProp, old), others);\n};\nvar copyObject = function copyObject(obj) {\n  if (!isObject(obj)) return obj;\n  if (obj instanceof Array) return _toConsumableArray(obj);\n  return _objectSpread({}, obj);\n};\nvar omitObject = function omitObject(obj, omitKeys) {\n  if (!isObject(obj)) return obj;\n  if (obj instanceof Array) return _toConsumableArray(obj);\n  var newObj = _objectSpread({}, obj);\n  omitKeys.forEach(function (key) {\n    return newObj[key] && delete newObj[key];\n  });\n  return newObj;\n};\nvar cleanObject = function cleanObject(obj) {\n  if (!isObject(obj)) return obj;\n  if (obj instanceof Array) return _toConsumableArray(obj);\n  var newObj = _objectSpread({}, obj);\n  Object.keys(newObj).forEach(function (key) {\n    if (newObj[key] === void 0 || newObj[key] === null) {\n      delete newObj[key];\n    }\n  });\n  return newObj;\n};\nvar cleanObjectKeys = function cleanObjectKeys(obj) {\n  var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  if (!isObject(obj)) return obj;\n  if (obj instanceof Array) return _toConsumableArray(obj);\n  var newObj = _objectSpread({}, obj);\n  keys.forEach(function (key) {\n    if (newObj[key]) {\n      delete newObj[key];\n    }\n  });\n  return newObj;\n};\nvar getKeyValue = function getKeyValue(obj, key) {\n  if (!isObject(obj)) return obj;\n  if (obj instanceof Array) return _toConsumableArray(obj);\n  return obj[key];\n};\nvar getProp = function getProp(obj, path, fallback, index) {\n  var key = typeof path === \"string\" ? path.split(\".\") : [path];\n  for (index = 0; index < key.length; index += 1) {\n    if (!obj) break;\n    obj = obj[key[index]];\n  }\n  return obj === void 0 ? fallback : obj;\n};\nvar arrayToObject = function arrayToObject(arr) {\n  if (!arr.length || !Array.isArray(arr)) return {};\n  return arr.reduce(function (acc, item) {\n    return _objectSpread({}, acc, item);\n  }, {});\n};\nfunction compact(object) {\n  var clone = Object.assign({}, object);\n  for (var key in clone) {\n    if (clone[key] === void 0) delete clone[key];\n  }\n  return clone;\n}\nexport { renameProp, copyObject, omitObject, cleanObject, cleanObjectKeys, getKeyValue, getProp, arrayToObject, compact };","map":null,"metadata":{},"sourceType":"module"}