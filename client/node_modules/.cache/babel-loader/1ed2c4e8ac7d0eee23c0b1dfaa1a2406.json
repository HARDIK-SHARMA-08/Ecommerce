{"ast":null,"code":"\"use client\";\n\nimport _objectWithoutProperties from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { useTooltip } from \"./chunk-62U42LRQ.mjs\";\n\n// src/tooltip.tsx\nimport { useMemo } from \"react\";\nimport { forwardRef } from \"@nextui-org/system\";\nimport { OverlayContainer } from \"@react-aria/overlays\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { TRANSITION_VARIANTS } from \"@nextui-org/framer-transitions\";\nimport { warn } from \"@nextui-org/shared-utils\";\nimport { Children, cloneElement } from \"react\";\nimport { getTransformOrigins } from \"@nextui-org/aria-utils\";\nimport { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nvar Tooltip = forwardRef(function (props, ref) {\n  var _useTooltip = useTooltip(_objectSpread({}, props, {\n      ref: ref\n    })),\n    Component = _useTooltip.Component,\n    children = _useTooltip.children,\n    content = _useTooltip.content,\n    isOpen = _useTooltip.isOpen,\n    portalContainer = _useTooltip.portalContainer,\n    placement = _useTooltip.placement,\n    disableAnimation = _useTooltip.disableAnimation,\n    motionProps = _useTooltip.motionProps,\n    showArrow = _useTooltip.showArrow,\n    getTriggerProps = _useTooltip.getTriggerProps,\n    getTooltipProps = _useTooltip.getTooltipProps,\n    getArrowProps = _useTooltip.getArrowProps;\n  var trigger;\n  var _getTooltipProps = getTooltipProps(),\n    className = _getTooltipProps.className,\n    otherTooltipProps = _objectWithoutProperties(_getTooltipProps, [\"className\"]);\n  try {\n    var child = Children.only(children);\n    trigger = cloneElement(child, getTriggerProps(child.props, child.ref));\n  } catch (error) {\n    trigger = /* @__PURE__ */jsx(\"span\", {});\n    warn(\"Tooltip must have only one child node. Please, check your code.\");\n  }\n  var arrowContent = useMemo(function () {\n    if (!showArrow) return null;\n    return /* @__PURE__ */jsx(\"span\", _objectSpread({}, getArrowProps()));\n  }, [showArrow, getArrowProps]);\n  var animatedContent = useMemo(function () {\n    return /* @__PURE__ */jsx(\"div\", _objectSpread({}, otherTooltipProps, {\n      children: /* @__PURE__ */jsxs(motion.div, _objectSpread({\n        animate: \"enter\",\n        exit: \"exit\",\n        initial: \"exit\",\n        style: _objectSpread({}, getTransformOrigins(placement)),\n        variants: TRANSITION_VARIANTS.scaleSpring\n      }, motionProps, {\n        children: [/* @__PURE__ */jsx(Component, {\n          className: className,\n          children: content\n        }), arrowContent]\n      }))\n    }));\n  }, [otherTooltipProps, className, placement, motionProps, Component, content, arrowContent]);\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [trigger, disableAnimation && isOpen ? /* @__PURE__ */jsx(OverlayContainer, {\n      portalContainer: portalContainer,\n      children: /* @__PURE__ */jsxs(\"div\", _objectSpread({}, otherTooltipProps, {\n        children: [/* @__PURE__ */jsx(Component, {\n          className: className,\n          children: content\n        }), arrowContent]\n      }))\n    }) : /* @__PURE__ */jsx(AnimatePresence, {\n      children: isOpen ? /* @__PURE__ */jsx(OverlayContainer, {\n        portalContainer: portalContainer,\n        children: animatedContent\n      }) : null\n    })]\n  });\n});\nTooltip.displayName = \"NextUI.Tooltip\";\nvar tooltip_default = Tooltip;\nexport { tooltip_default };","map":null,"metadata":{},"sourceType":"module"}