{"ast":null,"code":"\"use client\";\n\nimport _objectSpread from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport { useButtonGroupContext } from \"./chunk-BOMWXXSL.mjs\";\n\n// src/use-button.ts\nimport { dataAttr } from \"@nextui-org/shared-utils\";\nimport { useCallback } from \"react\";\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { chain, mergeProps } from \"@react-aria/utils\";\nimport { useDOMRef, filterDOMProps } from \"@nextui-org/react-utils\";\nimport { button } from \"@nextui-org/theme\";\nimport { isValidElement, cloneElement, useMemo } from \"react\";\nimport { useAriaButton } from \"@nextui-org/use-aria-button\";\nimport { useHover } from \"@react-aria/interactions\";\nimport { useRipple } from \"@nextui-org/ripple\";\nfunction useButton(props) {\n  var _a, _b, _c, _d, _e, _f, _g, _h;\n  var groupContext = useButtonGroupContext();\n  var isInGroup = !!groupContext;\n  var ref = props.ref,\n    as = props.as,\n    children = props.children,\n    startContentProp = props.startContent,\n    endContentProp = props.endContent,\n    autoFocus = props.autoFocus,\n    className = props.className,\n    spinner = props.spinner,\n    _props$fullWidth = props.fullWidth,\n    fullWidth = _props$fullWidth === void 0 ? (_a = groupContext == null ? void 0 : groupContext.fullWidth) != null ? _a : false : _props$fullWidth,\n    _props$size = props.size,\n    size = _props$size === void 0 ? (_b = groupContext == null ? void 0 : groupContext.size) != null ? _b : \"md\" : _props$size,\n    _props$color = props.color,\n    color = _props$color === void 0 ? (_c = groupContext == null ? void 0 : groupContext.color) != null ? _c : \"default\" : _props$color,\n    _props$variant = props.variant,\n    variant = _props$variant === void 0 ? (_d = groupContext == null ? void 0 : groupContext.variant) != null ? _d : \"solid\" : _props$variant,\n    _props$disableAnimati = props.disableAnimation,\n    disableAnimation = _props$disableAnimati === void 0 ? (_e = groupContext == null ? void 0 : groupContext.disableAnimation) != null ? _e : false : _props$disableAnimati,\n    _props$radius = props.radius,\n    radius = _props$radius === void 0 ? groupContext == null ? void 0 : groupContext.radius : _props$radius,\n    _props$disableRipple = props.disableRipple,\n    disableRipple = _props$disableRipple === void 0 ? (_f = groupContext == null ? void 0 : groupContext.disableRipple) != null ? _f : false : _props$disableRipple,\n    _props$isDisabled = props.isDisabled,\n    isDisabledProp = _props$isDisabled === void 0 ? (_g = groupContext == null ? void 0 : groupContext.isDisabled) != null ? _g : false : _props$isDisabled,\n    _props$isIconOnly = props.isIconOnly,\n    isIconOnly = _props$isIconOnly === void 0 ? (_h = groupContext == null ? void 0 : groupContext.isIconOnly) != null ? _h : false : _props$isIconOnly,\n    _props$isLoading = props.isLoading,\n    isLoading = _props$isLoading === void 0 ? false : _props$isLoading,\n    _props$spinnerPlaceme = props.spinnerPlacement,\n    spinnerPlacement = _props$spinnerPlaceme === void 0 ? \"start\" : _props$spinnerPlaceme,\n    onPress = props.onPress,\n    onClick = props.onClick,\n    otherProps = _objectWithoutProperties(props, [\"ref\", \"as\", \"children\", \"startContent\", \"endContent\", \"autoFocus\", \"className\", \"spinner\", \"fullWidth\", \"size\", \"color\", \"variant\", \"disableAnimation\", \"radius\", \"disableRipple\", \"isDisabled\", \"isIconOnly\", \"isLoading\", \"spinnerPlacement\", \"onPress\", \"onClick\"]);\n  var Component = as || \"button\";\n  var shouldFilterDOMProps = typeof Component === \"string\";\n  var domRef = useDOMRef(ref);\n  var _useFocusRing = useFocusRing({\n      autoFocus: autoFocus\n    }),\n    isFocusVisible = _useFocusRing.isFocusVisible,\n    isFocused = _useFocusRing.isFocused,\n    focusProps = _useFocusRing.focusProps;\n  var isDisabled = isDisabledProp || isLoading;\n  var styles = useMemo(function () {\n    return button({\n      size: size,\n      color: color,\n      variant: variant,\n      radius: radius,\n      fullWidth: fullWidth,\n      isDisabled: isDisabled,\n      isInGroup: isInGroup,\n      disableAnimation: disableAnimation,\n      isIconOnly: isIconOnly,\n      className: className\n    });\n  }, [size, color, variant, radius, fullWidth, isDisabled, isInGroup, isIconOnly, disableAnimation, className]);\n  var _useRipple = useRipple(),\n    onRippleClickHandler = _useRipple.onClick,\n    onClearRipple = _useRipple.onClear,\n    ripples = _useRipple.ripples;\n  var handleClick = useCallback(function (e) {\n    if (disableRipple || isDisabled || disableAnimation) return;\n    domRef.current && onRippleClickHandler(e);\n  }, [disableRipple, isDisabled, disableAnimation, domRef, onRippleClickHandler]);\n  var _useAriaButton = useAriaButton(_objectSpread({\n      elementType: as,\n      isDisabled: isDisabled,\n      onPress: onPress,\n      onClick: chain(onClick, handleClick)\n    }, otherProps), domRef),\n    ariaButtonProps = _useAriaButton.buttonProps,\n    isPressed = _useAriaButton.isPressed;\n  var _useHover = useHover({\n      isDisabled: isDisabled\n    }),\n    isHovered = _useHover.isHovered,\n    hoverProps = _useHover.hoverProps;\n  var getButtonProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _objectSpread({\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-pressed\": dataAttr(isPressed),\n      \"data-focus-visible\": dataAttr(isFocusVisible),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-loading\": dataAttr(isLoading)\n    }, mergeProps(ariaButtonProps, focusProps, hoverProps, filterDOMProps(otherProps, {\n      enabled: shouldFilterDOMProps\n    }), filterDOMProps(props2)));\n  }, [isLoading, isDisabled, isFocused, isPressed, shouldFilterDOMProps, isFocusVisible, isHovered, ariaButtonProps, focusProps, hoverProps, otherProps]);\n  var getIconClone = function getIconClone(icon) {\n    return isValidElement(icon) ? cloneElement(icon, {\n      \"aria-hidden\": true,\n      focusable: false,\n      tabIndex: -1\n    }) : null;\n  };\n  var startContent = getIconClone(startContentProp);\n  var endContent = getIconClone(endContentProp);\n  var spinnerSize = useMemo(function () {\n    var buttonSpinnerSizeMap = {\n      sm: \"sm\",\n      md: \"sm\",\n      lg: \"md\"\n    };\n    return buttonSpinnerSizeMap[size];\n  }, [size]);\n  var getRippleProps = useCallback(function () {\n    return {\n      ripples: ripples,\n      onClear: onClearRipple\n    };\n  }, [ripples, onClearRipple]);\n  return {\n    Component: Component,\n    children: children,\n    domRef: domRef,\n    spinner: spinner,\n    styles: styles,\n    startContent: startContent,\n    endContent: endContent,\n    isLoading: isLoading,\n    spinnerPlacement: spinnerPlacement,\n    spinnerSize: spinnerSize,\n    disableRipple: disableRipple,\n    getButtonProps: getButtonProps,\n    getRippleProps: getRippleProps\n  };\n}\nexport { useButton };","map":null,"metadata":{},"sourceType":"module"}