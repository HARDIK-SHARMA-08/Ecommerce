{"ast":null,"code":"import { DOMEventNames, DOMPropNames } from \"./chunk-TGSEZS3X.mjs\";\n\n// src/filter-dom-props.ts\nvar propRe = /^(data-.*)$/;\nvar ariaRe = /^(aria-.*)$/;\nvar funcRe = /^(on[A-Z].*)$/;\nfunction filterDOMProps(props) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _opts$labelable = opts.labelable,\n    labelable = _opts$labelable === void 0 ? true : _opts$labelable,\n    _opts$enabled = opts.enabled,\n    enabled = _opts$enabled === void 0 ? true : _opts$enabled,\n    propNames = opts.propNames,\n    omitPropNames = opts.omitPropNames,\n    omitEventNames = opts.omitEventNames;\n  var filteredProps = {};\n  if (!enabled) {\n    return props;\n  }\n  for (var prop in props) {\n    if (omitPropNames == null ? void 0 : omitPropNames.has(prop)) {\n      continue;\n    }\n    if ((omitEventNames == null ? void 0 : omitEventNames.has(prop)) && funcRe.test(prop)) {\n      continue;\n    }\n    if (funcRe.test(prop) && !DOMEventNames.has(prop)) {\n      continue;\n    }\n    if (Object.prototype.hasOwnProperty.call(props, prop) && (DOMPropNames.has(prop) || labelable && ariaRe.test(prop) || (propNames == null ? void 0 : propNames.has(prop)) || propRe.test(prop)) || funcRe.test(prop)) {\n      filteredProps[prop] = props[prop];\n    }\n  }\n  return filteredProps;\n}\nexport { filterDOMProps };","map":null,"metadata":{},"sourceType":"module"}