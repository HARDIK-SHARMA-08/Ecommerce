{"ast":null,"code":"\"use client\";\n\nimport _slicedToArray from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport { useCheckboxGroupContext } from \"./chunk-ACAJT7GC.mjs\";\n\n// src/use-checkbox.ts\nimport { useCallback, useId, useState } from \"react\";\nimport { useMemo, useRef } from \"react\";\nimport { useToggleState } from \"@react-stately/toggle\";\nimport { checkbox } from \"@nextui-org/theme\";\nimport { useHover, usePress } from \"@react-aria/interactions\";\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { chain, mergeProps } from \"@react-aria/utils\";\nimport { useFocusableRef } from \"@nextui-org/react-utils\";\nimport { __DEV__, warn, clsx, dataAttr, safeAriaLabel } from \"@nextui-org/shared-utils\";\nimport { useCheckbox as useReactAriaCheckbox, useCheckboxGroupItem as useReactAriaCheckboxGroupItem } from \"@react-aria/checkbox\";\nfunction useCheckbox() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _a, _b, _c, _d, _e, _f;\n  var groupContext = useCheckboxGroupContext();\n  var isInGroup = !!groupContext;\n  var as = props.as,\n    ref = props.ref,\n    _props$value = props.value,\n    value = _props$value === void 0 ? \"\" : _props$value,\n    children = props.children,\n    icon = props.icon,\n    name = props.name,\n    _props$isRequired = props.isRequired,\n    isRequired = _props$isRequired === void 0 ? false : _props$isRequired,\n    _props$isReadOnly = props.isReadOnly,\n    isReadOnlyProp = _props$isReadOnly === void 0 ? false : _props$isReadOnly,\n    _props$autoFocus = props.autoFocus,\n    autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,\n    isSelectedProp = props.isSelected,\n    validationState = props.validationState,\n    _props$size = props.size,\n    size = _props$size === void 0 ? (_a = groupContext == null ? void 0 : groupContext.size) != null ? _a : \"md\" : _props$size,\n    _props$color = props.color,\n    color = _props$color === void 0 ? (_b = groupContext == null ? void 0 : groupContext.color) != null ? _b : \"primary\" : _props$color,\n    _props$radius = props.radius,\n    radius = _props$radius === void 0 ? groupContext == null ? void 0 : groupContext.radius : _props$radius,\n    _props$lineThrough = props.lineThrough,\n    lineThrough = _props$lineThrough === void 0 ? (_c = groupContext == null ? void 0 : groupContext.lineThrough) != null ? _c : false : _props$lineThrough,\n    _props$isDisabled = props.isDisabled,\n    isDisabledProp = _props$isDisabled === void 0 ? (_d = groupContext == null ? void 0 : groupContext.isDisabled) != null ? _d : false : _props$isDisabled,\n    _props$disableAnimati = props.disableAnimation,\n    disableAnimation = _props$disableAnimati === void 0 ? (_e = groupContext == null ? void 0 : groupContext.disableAnimation) != null ? _e : false : _props$disableAnimati,\n    _props$isInvalid = props.isInvalid,\n    isInvalid = _props$isInvalid === void 0 ? validationState ? validationState === \"invalid\" : (_f = groupContext == null ? void 0 : groupContext.isInvalid) != null ? _f : false : _props$isInvalid,\n    _props$isIndeterminat = props.isIndeterminate,\n    isIndeterminate = _props$isIndeterminat === void 0 ? false : _props$isIndeterminat,\n    defaultSelected = props.defaultSelected,\n    classNames = props.classNames,\n    onChange = props.onChange,\n    className = props.className,\n    onValueChange = props.onValueChange,\n    otherProps = _objectWithoutProperties(props, [\"as\", \"ref\", \"value\", \"children\", \"icon\", \"name\", \"isRequired\", \"isReadOnly\", \"autoFocus\", \"isSelected\", \"validationState\", \"size\", \"color\", \"radius\", \"lineThrough\", \"isDisabled\", \"disableAnimation\", \"isInvalid\", \"isIndeterminate\", \"defaultSelected\", \"classNames\", \"onChange\", \"className\", \"onValueChange\"]);\n  if (groupContext && __DEV__) {\n    if (isSelectedProp) {\n      warn(\"The Checkbox.Group is being used, `isSelected` will be ignored. Use the `value` of the Checkbox.Group instead.\", \"Checkbox\");\n    }\n    if (defaultSelected) {\n      warn(\"The Checkbox.Group is being used, `defaultSelected` will be ignored. Use the `defaultValue` of the Checkbox.Group instead.\", \"Checkbox\");\n    }\n  }\n  var Component = as || \"label\";\n  var inputRef = useRef(null);\n  var domRef = useFocusableRef(ref, inputRef);\n  var labelId = useId();\n  var ariaCheckboxProps = useMemo(function () {\n    return {\n      name: name,\n      value: value,\n      children: children,\n      autoFocus: autoFocus,\n      defaultSelected: defaultSelected,\n      isIndeterminate: isIndeterminate,\n      isRequired: isRequired,\n      isInvalid: isInvalid,\n      isSelected: isSelectedProp,\n      isDisabled: isDisabledProp,\n      isReadOnly: isReadOnlyProp,\n      \"aria-label\": safeAriaLabel(otherProps[\"aria-label\"], children),\n      \"aria-labelledby\": otherProps[\"aria-labelledby\"] || labelId,\n      onChange: onValueChange\n    };\n  }, [value, name, labelId, children, autoFocus, isInvalid, isIndeterminate, isDisabledProp, isReadOnlyProp, isSelectedProp, defaultSelected, otherProps[\"aria-label\"], otherProps[\"aria-labelledby\"], onValueChange]);\n  var _ref = isInGroup ? useReactAriaCheckboxGroupItem(_objectSpread({}, ariaCheckboxProps, {\n      isInvalid: isInvalid\n    }), groupContext.groupState, inputRef) : useReactAriaCheckbox(ariaCheckboxProps, useToggleState(ariaCheckboxProps), inputRef),\n    inputProps = _ref.inputProps,\n    isSelected = _ref.isSelected,\n    isDisabled = _ref.isDisabled,\n    isReadOnly = _ref.isReadOnly,\n    isPressedKeyboard = _ref.isPressed;\n  var isInteractionDisabled = isDisabled || isReadOnly;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isPressed = _useState2[0],\n    setPressed = _useState2[1];\n  var _usePress = usePress({\n      isDisabled: isInteractionDisabled,\n      onPressStart: function onPressStart(e) {\n        if (e.pointerType !== \"keyboard\") {\n          setPressed(true);\n        }\n      },\n      onPressEnd: function onPressEnd(e) {\n        if (e.pointerType !== \"keyboard\") {\n          setPressed(false);\n        }\n      }\n    }),\n    pressProps = _usePress.pressProps;\n  var pressed = isInteractionDisabled ? false : isPressed || isPressedKeyboard;\n  if (isRequired) {\n    inputProps.required = true;\n  }\n  var _useHover = useHover({\n      isDisabled: inputProps.disabled\n    }),\n    hoverProps = _useHover.hoverProps,\n    isHovered = _useHover.isHovered;\n  var _useFocusRing = useFocusRing({\n      autoFocus: inputProps.autoFocus\n    }),\n    focusProps = _useFocusRing.focusProps,\n    isFocused = _useFocusRing.isFocused,\n    isFocusVisible = _useFocusRing.isFocusVisible;\n  var slots = useMemo(function () {\n    return checkbox({\n      color: color,\n      size: size,\n      radius: radius,\n      isInvalid: isInvalid,\n      lineThrough: lineThrough,\n      isDisabled: isDisabled,\n      disableAnimation: disableAnimation\n    });\n  }, [color, size, radius, isInvalid, lineThrough, isDisabled, disableAnimation]);\n  var baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  var getBaseProps = useCallback(function () {\n    return _objectSpread({\n      ref: domRef,\n      className: slots.base({\n        class: baseStyles\n      }),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-selected\": dataAttr(isSelected || isIndeterminate),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-pressed\": dataAttr(pressed),\n      \"data-readonly\": dataAttr(inputProps.readOnly),\n      \"data-focus-visible\": dataAttr(isFocusVisible),\n      \"data-indeterminate\": dataAttr(isIndeterminate)\n    }, mergeProps(hoverProps, pressProps, otherProps));\n  }, [slots, baseStyles, isDisabled, isSelected, isIndeterminate, isInvalid, isHovered, isFocused, pressed, inputProps.readOnly, isFocusVisible, hoverProps, pressProps, otherProps]);\n  var getWrapperProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _objectSpread({}, props2, {\n      \"aria-hidden\": true,\n      className: clsx(slots.wrapper({\n        class: clsx(classNames == null ? void 0 : classNames.wrapper, props2 == null ? void 0 : props2.className)\n      }))\n    });\n  }, [slots, classNames == null ? void 0 : classNames.wrapper]);\n  var getInputProps = useCallback(function () {\n    return _objectSpread({\n      ref: inputRef\n    }, mergeProps(inputProps, focusProps), {\n      onChange: chain(inputProps.onChange, onChange)\n    });\n  }, [inputProps, focusProps, onChange]);\n  var getLabelProps = useCallback(function () {\n    return {\n      id: labelId,\n      className: slots.label({\n        class: classNames == null ? void 0 : classNames.label\n      })\n    };\n  }, [slots, classNames == null ? void 0 : classNames.label, isDisabled, isSelected, isInvalid]);\n  var getIconProps = useCallback(function () {\n    return {\n      isSelected: isSelected,\n      isIndeterminate: !!isIndeterminate,\n      disableAnimation: !!disableAnimation,\n      className: slots.icon({\n        class: classNames == null ? void 0 : classNames.icon\n      })\n    };\n  }, [slots, classNames == null ? void 0 : classNames.icon, isSelected, isIndeterminate, disableAnimation]);\n  return {\n    Component: Component,\n    icon: icon,\n    children: children,\n    isSelected: isSelected,\n    isDisabled: isDisabled,\n    isInvalid: isInvalid,\n    isFocused: isFocused,\n    isHovered: isHovered,\n    isFocusVisible: isFocusVisible,\n    getBaseProps: getBaseProps,\n    getWrapperProps: getWrapperProps,\n    getInputProps: getInputProps,\n    getLabelProps: getLabelProps,\n    getIconProps: getIconProps\n  };\n}\nexport { useCheckbox };","map":null,"metadata":{},"sourceType":"module"}