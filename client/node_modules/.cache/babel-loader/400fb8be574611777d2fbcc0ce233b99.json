{"ast":null,"code":"import _objectSpread from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect, useRef, useState } from 'react';\nimport { HiArrowLeft, HiArrowRight, HiCalendar } from 'react-icons/hi';\nimport { twMerge } from 'tailwind-merge';\nimport { TextInput } from '..';\nimport { useTheme } from '../..';\nimport { mergeDeep } from '../../helpers/merge-deep';\nimport { DatepickerContext } from './DatepickerContext';\nimport { DatepickerViewsDays } from './Views/Days';\nimport { DatepickerViewsDecades } from './Views/Decades';\nimport { DatepickerViewsMonth } from './Views/Months';\nimport { DatepickerViewsYears } from './Views/Years';\nimport { Views, WeekStart, addMonths, addYears, getFirstDateInRange, getFormattedDate, isDateEqual, startOfYearPeriod } from './helpers';\nexport var Datepicker = function Datepicker(_ref) {\n  var title = _ref.title,\n    open = _ref.open,\n    _ref$inline = _ref.inline,\n    inline = _ref$inline === void 0 ? false : _ref$inline,\n    _ref$autoHide = _ref.autoHide,\n    autoHide = _ref$autoHide === void 0 ? true : _ref$autoHide,\n    _ref$showClearButton = _ref.showClearButton,\n    showClearButton = _ref$showClearButton === void 0 ? true : _ref$showClearButton,\n    _ref$labelClearButton = _ref.labelClearButton,\n    labelClearButton = _ref$labelClearButton === void 0 ? 'Clear' : _ref$labelClearButton,\n    _ref$showTodayButton = _ref.showTodayButton,\n    showTodayButton = _ref$showTodayButton === void 0 ? true : _ref$showTodayButton,\n    _ref$labelTodayButton = _ref.labelTodayButton,\n    labelTodayButton = _ref$labelTodayButton === void 0 ? 'Today' : _ref$labelTodayButton,\n    _ref$defaultDate = _ref.defaultDate,\n    defaultDate = _ref$defaultDate === void 0 ? new Date() : _ref$defaultDate,\n    minDate = _ref.minDate,\n    maxDate = _ref.maxDate,\n    _ref$language = _ref.language,\n    language = _ref$language === void 0 ? 'en' : _ref$language,\n    _ref$weekStart = _ref.weekStart,\n    weekStart = _ref$weekStart === void 0 ? WeekStart.Sunday : _ref$weekStart,\n    className = _ref.className,\n    _ref$theme = _ref.theme,\n    customTheme = _ref$theme === void 0 ? {} : _ref$theme,\n    onSelectedDateChanged = _ref.onSelectedDateChanged,\n    props = _objectWithoutProperties(_ref, [\"title\", \"open\", \"inline\", \"autoHide\", \"showClearButton\", \"labelClearButton\", \"showTodayButton\", \"labelTodayButton\", \"defaultDate\", \"minDate\", \"maxDate\", \"language\", \"weekStart\", \"className\", \"theme\", \"onSelectedDateChanged\"]);\n  var theme = mergeDeep(useTheme().theme.datepicker, customTheme);\n  // Default date should respect the range\n  defaultDate = getFirstDateInRange(defaultDate, minDate, maxDate);\n  var _useState = useState(open),\n    _useState2 = _slicedToArray(_useState, 2),\n    isOpen = _useState2[0],\n    setIsOpen = _useState2[1];\n  var _useState3 = useState(Views.Days),\n    _useState4 = _slicedToArray(_useState3, 2),\n    view = _useState4[0],\n    setView = _useState4[1]; // selectedDate is the date selected by the user\n  var _useState5 = useState(defaultDate),\n    _useState6 = _slicedToArray(_useState5, 2),\n    selectedDate = _useState6[0],\n    setSelectedDate = _useState6[1]; // viewDate is only for navigation\n  var _useState7 = useState(defaultDate),\n    _useState8 = _slicedToArray(_useState7, 2),\n    viewDate = _useState8[0],\n    setViewDate = _useState8[1];\n  var inputRef = useRef(null);\n  var datepickerRef = useRef(null);\n  // Triggers when user select the date\n  var changeSelectedDate = function changeSelectedDate(date, useAutohide) {\n    setSelectedDate(date);\n    if (onSelectedDateChanged) {\n      onSelectedDateChanged(date);\n    }\n    if (autoHide && view === Views.Days && useAutohide == true && !inline) {\n      setIsOpen(false);\n    }\n  };\n  // Render the DatepickerView* node\n  var renderView = function renderView(type) {\n    switch (type) {\n      case Views.Decades:\n        return _jsx(DatepickerViewsDecades, {\n          theme: theme.views.decades\n        });\n      case Views.Years:\n        return _jsx(DatepickerViewsYears, {\n          theme: theme.views.years\n        });\n      case Views.Months:\n        return _jsx(DatepickerViewsMonth, {\n          theme: theme.views.months\n        });\n      case Views.Days:\n      default:\n        return _jsx(DatepickerViewsDays, {\n          theme: theme.views.days\n        });\n    }\n  };\n  // Coordinate the next view based on current view (statemachine-like)\n  var getNextView = function getNextView() {\n    switch (view) {\n      case Views.Days:\n        return Views.Months;\n      case Views.Months:\n        return Views.Years;\n      case Views.Years:\n        return Views.Decades;\n    }\n    return view;\n  };\n  // Get the view title based on active View\n  var getViewTitle = function getViewTitle() {\n    switch (view) {\n      case Views.Decades:\n        return \"\".concat(startOfYearPeriod(viewDate, 100), \" - \").concat(startOfYearPeriod(viewDate, 100) + 90);\n      case Views.Years:\n        return \"\".concat(startOfYearPeriod(viewDate, 10), \" - \").concat(startOfYearPeriod(viewDate, 10) + 9);\n      case Views.Months:\n        return getFormattedDate(language, viewDate, {\n          year: 'numeric'\n        });\n      case Views.Days:\n      default:\n        return getFormattedDate(language, viewDate, {\n          month: 'long',\n          year: 'numeric'\n        });\n    }\n  };\n  // Navigate to prev/next for given view's date by value\n  var getViewDatePage = function getViewDatePage(view, date, value) {\n    switch (view) {\n      case Views.Days:\n        return new Date(addMonths(date, value));\n      case Views.Months:\n        return new Date(addYears(date, value));\n      case Views.Years:\n        return new Date(addYears(date, value * 10));\n      case Views.Decades:\n        return new Date(addYears(date, value * 100));\n      default:\n        return new Date(addYears(date, value * 10));\n    }\n  };\n  useEffect(function () {\n    var handleClickOutside = function handleClickOutside(event) {\n      var clickedInsideDatepicker = datepickerRef?.current?.contains(event.target);\n      var clickedInsideInput = inputRef?.current?.contains(event.target);\n      if (!clickedInsideDatepicker && !clickedInsideInput) {\n        setIsOpen(false);\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return function () {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [inputRef, datepickerRef, setIsOpen]);\n  return _jsx(DatepickerContext.Provider, {\n    value: {\n      language: language,\n      minDate: minDate,\n      maxDate: maxDate,\n      weekStart: weekStart,\n      isOpen: isOpen,\n      setIsOpen: setIsOpen,\n      view: view,\n      setView: setView,\n      viewDate: viewDate,\n      setViewDate: setViewDate,\n      selectedDate: selectedDate,\n      setSelectedDate: setSelectedDate,\n      changeSelectedDate: changeSelectedDate\n    },\n    children: _jsxs(\"div\", {\n      className: twMerge(theme.root.base, className),\n      children: [!inline && _jsx(TextInput, _objectSpread({\n        theme: theme.root.input,\n        icon: HiCalendar,\n        ref: inputRef,\n        onFocus: function onFocus() {\n          if (!isDateEqual(viewDate, selectedDate)) {\n            setViewDate(selectedDate);\n          }\n          setIsOpen(true);\n        },\n        value: selectedDate && getFormattedDate(language, selectedDate),\n        readOnly: true\n      }, props)), (isOpen || inline) && _jsx(\"div\", {\n        ref: datepickerRef,\n        className: twMerge(theme.popup.root.base, inline && theme.popup.root.inline),\n        children: _jsxs(\"div\", {\n          className: theme.popup.root.inner,\n          children: [_jsxs(\"div\", {\n            className: theme.popup.header.base,\n            children: [title && _jsx(\"div\", {\n              className: theme.popup.header.title,\n              children: title\n            }), _jsxs(\"div\", {\n              className: theme.popup.header.selectors.base,\n              children: [_jsx(\"button\", {\n                type: \"button\",\n                className: twMerge(theme.popup.header.selectors.button.base, theme.popup.header.selectors.button.prev),\n                onClick: function onClick() {\n                  return setViewDate(getViewDatePage(view, viewDate, -1));\n                },\n                children: _jsx(HiArrowLeft, {})\n              }), _jsx(\"button\", {\n                type: \"button\",\n                className: twMerge(theme.popup.header.selectors.button.base, theme.popup.header.selectors.button.view),\n                onClick: function onClick() {\n                  return setView(getNextView());\n                },\n                children: getViewTitle()\n              }), _jsx(\"button\", {\n                type: \"button\",\n                className: twMerge(theme.popup.header.selectors.button.base, theme.popup.header.selectors.button.next),\n                onClick: function onClick() {\n                  return setViewDate(getViewDatePage(view, viewDate, 1));\n                },\n                children: _jsx(HiArrowRight, {})\n              })]\n            })]\n          }), _jsx(\"div\", {\n            className: theme.popup.view.base,\n            children: renderView(view)\n          }), (showClearButton || showTodayButton) && _jsxs(\"div\", {\n            className: theme.popup.footer.base,\n            children: [showTodayButton && _jsx(\"button\", {\n              type: \"button\",\n              className: twMerge(theme.popup.footer.button.base, theme.popup.footer.button.today),\n              onClick: function onClick() {\n                var today = new Date();\n                changeSelectedDate(today, true);\n                setViewDate(today);\n              },\n              children: labelTodayButton\n            }), showClearButton && _jsx(\"button\", {\n              type: \"button\",\n              className: twMerge(theme.popup.footer.button.base, theme.popup.footer.button.clear),\n              onClick: function onClick() {\n                changeSelectedDate(defaultDate, true);\n                if (defaultDate) {\n                  setViewDate(defaultDate);\n                }\n              },\n              children: labelClearButton\n            })]\n          })]\n        })\n      })]\n    })\n  });\n};\nDatepicker.displayName = 'Datepicker';","map":null,"metadata":{},"sourceType":"module"}