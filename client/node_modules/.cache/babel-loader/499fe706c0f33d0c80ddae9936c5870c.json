{"ast":null,"code":"import _toConsumableArray from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n// src/index.ts\nimport { useMemo, useCallback, useState, useEffect } from \"react\";\nimport { range } from \"@nextui-org/shared-utils\";\nvar PaginationItemType = /* @__PURE__ */function (PaginationItemType2) {\n  PaginationItemType2[\"DOTS\"] = \"dots\";\n  PaginationItemType2[\"PREV\"] = \"prev\";\n  PaginationItemType2[\"NEXT\"] = \"next\";\n  return PaginationItemType2;\n}(PaginationItemType || {});\nfunction usePagination(props) {\n  var page = props.page,\n    total = props.total,\n    _props$siblings = props.siblings,\n    siblings = _props$siblings === void 0 ? 1 : _props$siblings,\n    _props$boundaries = props.boundaries,\n    boundaries = _props$boundaries === void 0 ? 1 : _props$boundaries,\n    _props$initialPage = props.initialPage,\n    initialPage = _props$initialPage === void 0 ? 1 : _props$initialPage,\n    _props$showControls = props.showControls,\n    showControls = _props$showControls === void 0 ? false : _props$showControls,\n    onChange = props.onChange;\n  var _useState = useState(page || initialPage),\n    _useState2 = _slicedToArray(_useState, 2),\n    activePage = _useState2[0],\n    setActivePage = _useState2[1];\n  var onChangeActivePage = function onChangeActivePage(newPage) {\n    setActivePage(newPage);\n    onChange && onChange(newPage);\n  };\n  useEffect(function () {\n    if (page && page !== activePage) {\n      setActivePage(page);\n    }\n  }, [page]);\n  var setPage = useCallback(function (pageNumber) {\n    if (pageNumber <= 0) {\n      onChangeActivePage(1);\n    } else if (pageNumber > total) {\n      onChangeActivePage(total);\n    } else {\n      onChangeActivePage(pageNumber);\n    }\n  }, [total, activePage]);\n  var next = function next() {\n    return setPage(activePage + 1);\n  };\n  var previous = function previous() {\n    return setPage(activePage - 1);\n  };\n  var first = function first() {\n    return setPage(1);\n  };\n  var last = function last() {\n    return setPage(total);\n  };\n  var formatRange = useCallback(function (range2) {\n    if (showControls) {\n      return [\"prev\" /* PREV */].concat(_toConsumableArray(range2), [\"next\" /* NEXT */]);\n    }\n\n    return range2;\n  }, [showControls]);\n  var paginationRange = useMemo(function () {\n    var totalPageNumbers = siblings * 2 + 3 + boundaries * 2;\n    if (totalPageNumbers >= total) {\n      return formatRange(range(1, total));\n    }\n    var leftSiblingIndex = Math.max(activePage - siblings, boundaries);\n    var rightSiblingIndex = Math.min(activePage + siblings, total - boundaries);\n    var shouldShowLeftDots = leftSiblingIndex > boundaries + 2;\n    var shouldShowRightDots = rightSiblingIndex < total - (boundaries + 1);\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      var leftItemCount = siblings * 2 + boundaries + 2;\n      return formatRange([].concat(_toConsumableArray(range(1, leftItemCount)), [\"dots\" /* DOTS */], _toConsumableArray(range(total - (boundaries - 1), total))));\n    }\n    if (shouldShowLeftDots && !shouldShowRightDots) {\n      var rightItemCount = boundaries + 1 + 2 * siblings;\n      return formatRange([].concat(_toConsumableArray(range(1, boundaries)), [\"dots\" /* DOTS */], _toConsumableArray(range(total - rightItemCount, total))));\n    }\n    return formatRange([].concat(_toConsumableArray(range(1, boundaries)), [\"dots\" /* DOTS */], _toConsumableArray(range(leftSiblingIndex, rightSiblingIndex)), [\"dots\" /* DOTS */], _toConsumableArray(range(total - boundaries + 1, total))));\n  }, [total, activePage, siblings, boundaries, formatRange]);\n  return {\n    range: paginationRange,\n    activePage: activePage,\n    setPage: setPage,\n    next: next,\n    previous: previous,\n    first: first,\n    last: last\n  };\n}\nexport { PaginationItemType, usePagination };","map":null,"metadata":{},"sourceType":"module"}