{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\nvar _slicedToArray = require(\"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\nvar _possibleConstructorReturn = require(\"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nvar _classCallCheck = require(\"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _objectWithoutProperties = require(\"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectWithoutProperties\");\nvar _objectSpread = require(\"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar React = require('react');\nvar indexLegacy = require('./index-legacy-eb8b4696.js');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function get() {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\nvar React__namespace = /*#__PURE__*/_interopNamespace(React);\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\n\n/**\n * @public\n */\nvar MotionConfigContext = React.createContext({\n  transformPagePoint: function transformPagePoint(p) {\n    return p;\n  },\n  isStatic: false,\n  reducedMotion: \"never\"\n});\nvar MotionContext = React.createContext({});\n\n/**\n * @public\n */\nvar PresenceContext = React.createContext(null);\nvar useIsomorphicLayoutEffect = indexLegacy.isBrowser ? React.useLayoutEffect : React.useEffect;\nvar LazyContext = React.createContext({\n  strict: false\n});\nfunction useVisualElement(Component, visualState, props, createVisualElement) {\n  var _React$useContext = React.useContext(MotionContext),\n    parent = _React$useContext.visualElement;\n  var lazyContext = React.useContext(LazyContext);\n  var presenceContext = React.useContext(PresenceContext);\n  var reducedMotionConfig = React.useContext(MotionConfigContext).reducedMotion;\n  var visualElementRef = React.useRef();\n  /**\n   * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\n   */\n  createVisualElement = createVisualElement || lazyContext.renderer;\n  if (!visualElementRef.current && createVisualElement) {\n    visualElementRef.current = createVisualElement(Component, {\n      visualState: visualState,\n      parent: parent,\n      props: props,\n      presenceContext: presenceContext,\n      blockInitialAnimation: presenceContext ? presenceContext.initial === false : false,\n      reducedMotionConfig: reducedMotionConfig\n    });\n  }\n  var visualElement = visualElementRef.current;\n  React.useInsertionEffect(function () {\n    visualElement && visualElement.update(props, presenceContext);\n  });\n  /**\n   * Cache this value as we want to know whether HandoffAppearAnimations\n   * was present on initial render - it will be deleted after this.\n   */\n  var canHandoff = React.useRef(Boolean(window.HandoffAppearAnimations));\n  useIsomorphicLayoutEffect(function () {\n    if (!visualElement) return;\n    visualElement.render();\n    /**\n     * Ideally this function would always run in a useEffect.\n     *\n     * However, if we have optimised appear animations to handoff from,\n     * it needs to happen synchronously to ensure there's no flash of\n     * incorrect styles in the event of a hydration error.\n     *\n     * So if we detect a situtation where optimised appear animations\n     * are running, we use useLayoutEffect to trigger animations.\n     */\n    if (canHandoff.current && visualElement.animationState) {\n      visualElement.animationState.animateChanges();\n    }\n  });\n  React.useEffect(function () {\n    if (!visualElement) return;\n    visualElement.updateFeatures();\n    if (!canHandoff.current && visualElement.animationState) {\n      visualElement.animationState.animateChanges();\n    }\n    /**\n     * Once we've handed off animations we can delete HandoffAppearAnimations\n     * so components added after the initial render can animate changes\n     * in useEffect vs useLayoutEffect.\n     */\n    window.HandoffAppearAnimations = undefined;\n    canHandoff.current = false;\n  });\n  return visualElement;\n}\n\n/**\n * Creates a ref function that, when called, hydrates the provided\n * external ref and VisualElement.\n */\nfunction useMotionRef(visualState, visualElement, externalRef) {\n  return React.useCallback(function (instance) {\n    instance && visualState.mount && visualState.mount(instance);\n    if (visualElement) {\n      instance ? visualElement.mount(instance) : visualElement.unmount();\n    }\n    if (externalRef) {\n      if (typeof externalRef === \"function\") {\n        externalRef(instance);\n      } else if (indexLegacy.isRefObject(externalRef)) {\n        externalRef.current = instance;\n      }\n    }\n  },\n  /**\n   * Only pass a new ref callback to React if we've received a visual element\n   * factory. Otherwise we'll be mounting/remounting every time externalRef\n   * or other dependencies change.\n   */\n  [visualElement]);\n}\nfunction getCurrentTreeVariants(props, context) {\n  if (indexLegacy.isControllingVariants(props)) {\n    var initial = props.initial,\n      animate = props.animate;\n    return {\n      initial: initial === false || indexLegacy.isVariantLabel(initial) ? initial : undefined,\n      animate: indexLegacy.isVariantLabel(animate) ? animate : undefined\n    };\n  }\n  return props.inherit !== false ? context : {};\n}\nfunction useCreateMotionContext(props) {\n  var _getCurrentTreeVarian = getCurrentTreeVariants(props, React.useContext(MotionContext)),\n    initial = _getCurrentTreeVarian.initial,\n    animate = _getCurrentTreeVarian.animate;\n  return React.useMemo(function () {\n    return {\n      initial: initial,\n      animate: animate\n    };\n  }, [variantLabelsAsDependency(initial), variantLabelsAsDependency(animate)]);\n}\nfunction variantLabelsAsDependency(prop) {\n  return Array.isArray(prop) ? prop.join(\" \") : prop;\n}\nfunction loadFeatures(features) {\n  for (var key in features) {\n    indexLegacy.featureDefinitions[key] = _objectSpread({}, indexLegacy.featureDefinitions[key], features[key]);\n  }\n}\nvar LayoutGroupContext = React.createContext({});\n\n/**\n * Internal, exported only for usage in Framer\n */\nvar SwitchLayoutGroupContext = React.createContext({});\nvar motionComponentSymbol = Symbol.for(\"motionComponentSymbol\");\n\n/**\n * Create a `motion` component.\n *\n * This function accepts a Component argument, which can be either a string (ie \"div\"\n * for `motion.div`), or an actual React component.\n *\n * Alongside this is a config option which provides a way of rendering the provided\n * component \"offline\", or outside the React render cycle.\n */\nfunction createMotionComponent(_ref) {\n  var preloadedFeatures = _ref.preloadedFeatures,\n    createVisualElement = _ref.createVisualElement,\n    useRender = _ref.useRender,\n    useVisualState = _ref.useVisualState,\n    Component = _ref.Component;\n  preloadedFeatures && loadFeatures(preloadedFeatures);\n  function MotionComponent(props, externalRef) {\n    /**\n     * If we need to measure the element we load this functionality in a\n     * separate class component in order to gain access to getSnapshotBeforeUpdate.\n     */\n    var MeasureLayout;\n    var configAndProps = _objectSpread({}, React.useContext(MotionConfigContext), props, {\n      layoutId: useLayoutId(props)\n    });\n    var isStatic = configAndProps.isStatic;\n    var context = useCreateMotionContext(props);\n    var visualState = useVisualState(props, isStatic);\n    if (!isStatic && indexLegacy.isBrowser) {\n      /**\n       * Create a VisualElement for this component. A VisualElement provides a common\n       * interface to renderer-specific APIs (ie DOM/Three.js etc) as well as\n       * providing a way of rendering to these APIs outside of the React render loop\n       * for more performant animations and interactions\n       */\n      context.visualElement = useVisualElement(Component, visualState, configAndProps, createVisualElement);\n      /**\n       * Load Motion gesture and animation features. These are rendered as renderless\n       * components so each feature can optionally make use of React lifecycle methods.\n       */\n      var initialLayoutGroupConfig = React.useContext(SwitchLayoutGroupContext);\n      var isStrict = React.useContext(LazyContext).strict;\n      if (context.visualElement) {\n        MeasureLayout = context.visualElement.loadFeatures(\n        // Note: Pass the full new combined props to correctly re-render dynamic feature components.\n        configAndProps, isStrict, preloadedFeatures, initialLayoutGroupConfig);\n      }\n    }\n    /**\n     * The mount order and hierarchy is specific to ensure our element ref\n     * is hydrated by the time features fire their effects.\n     */\n    return React__namespace.createElement(MotionContext.Provider, {\n      value: context\n    }, MeasureLayout && context.visualElement ? React__namespace.createElement(MeasureLayout, _objectSpread({\n      visualElement: context.visualElement\n    }, configAndProps)) : null, useRender(Component, props, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic, context.visualElement));\n  }\n  var ForwardRefComponent = React.forwardRef(MotionComponent);\n  ForwardRefComponent[motionComponentSymbol] = Component;\n  return ForwardRefComponent;\n}\nfunction useLayoutId(_ref2) {\n  var layoutId = _ref2.layoutId;\n  var layoutGroupId = React.useContext(LayoutGroupContext).id;\n  return layoutGroupId && layoutId !== undefined ? layoutGroupId + \"-\" + layoutId : layoutId;\n}\n\n/**\n * Convert any React component into a `motion` component. The provided component\n * **must** use `React.forwardRef` to the underlying DOM component you want to animate.\n *\n * ```jsx\n * const Component = React.forwardRef((props, ref) => {\n *   return <div ref={ref} />\n * })\n *\n * const MotionComponent = motion(Component)\n * ```\n *\n * @public\n */\nfunction createMotionProxy(createConfig) {\n  function custom(Component) {\n    var customMotionComponentConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return createMotionComponent(createConfig(Component, customMotionComponentConfig));\n  }\n  if (typeof Proxy === \"undefined\") {\n    return custom;\n  }\n  /**\n   * A cache of generated `motion` components, e.g `motion.div`, `motion.input` etc.\n   * Rather than generating them anew every render.\n   */\n  var componentCache = new Map();\n  return new Proxy(custom, {\n    /**\n     * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.\n     * The prop name is passed through as `key` and we can use that to generate a `motion`\n     * DOM component with that name.\n     */\n    get: function get(_target, key) {\n      /**\n       * If this element doesn't exist in the component cache, create it and cache.\n       */\n      if (!componentCache.has(key)) {\n        componentCache.set(key, custom(key));\n      }\n      return componentCache.get(key);\n    }\n  });\n}\n\n/**\n * We keep these listed seperately as we use the lowercase tag names as part\n * of the runtime bundle to detect SVG components\n */\nvar lowercaseSVGElements = [\"animate\", \"circle\", \"defs\", \"desc\", \"ellipse\", \"g\", \"image\", \"line\", \"filter\", \"marker\", \"mask\", \"metadata\", \"path\", \"pattern\", \"polygon\", \"polyline\", \"rect\", \"stop\", \"switch\", \"symbol\", \"svg\", \"text\", \"tspan\", \"use\", \"view\"];\nfunction isSVGComponent(Component) {\n  if (\n  /**\n   * If it's not a string, it's a custom React component. Currently we only support\n   * HTML custom React components.\n   */\n  typeof Component !== \"string\" ||\n  /**\n   * If it contains a dash, the element is a custom HTML webcomponent.\n   */\n  Component.includes(\"-\")) {\n    return false;\n  } else if (\n  /**\n   * If it's in our list of lowercase SVG tags, it's an SVG component\n   */\n  lowercaseSVGElements.indexOf(Component) > -1 ||\n  /**\n   * If it contains a capital letter, it's an SVG component\n   */\n  /[A-Z]/.test(Component)) {\n    return true;\n  }\n  return false;\n}\nvar createHtmlRenderState = function createHtmlRenderState() {\n  return {\n    style: {},\n    transform: {},\n    transformOrigin: {},\n    vars: {}\n  };\n};\nfunction copyRawValuesOnly(target, source, props) {\n  for (var key in source) {\n    if (!indexLegacy.isMotionValue(source[key]) && !indexLegacy.isForcedMotionValue(key, props)) {\n      target[key] = source[key];\n    }\n  }\n}\nfunction useInitialMotionValues(_ref3, visualState, isStatic) {\n  var transformTemplate = _ref3.transformTemplate;\n  return React.useMemo(function () {\n    var state = createHtmlRenderState();\n    indexLegacy.buildHTMLStyles(state, visualState, {\n      enableHardwareAcceleration: !isStatic\n    }, transformTemplate);\n    return Object.assign({}, state.vars, state.style);\n  }, [visualState]);\n}\nfunction useStyle(props, visualState, isStatic) {\n  var styleProp = props.style || {};\n  var style = {};\n  /**\n   * Copy non-Motion Values straight into style\n   */\n  copyRawValuesOnly(style, styleProp, props);\n  Object.assign(style, useInitialMotionValues(props, visualState, isStatic));\n  return props.transformValues ? props.transformValues(style) : style;\n}\nfunction useHTMLProps(props, visualState, isStatic) {\n  // The `any` isn't ideal but it is the type of createElement props argument\n  var htmlProps = {};\n  var style = useStyle(props, visualState, isStatic);\n  if (props.drag && props.dragListener !== false) {\n    // Disable the ghost element when a user drags\n    htmlProps.draggable = false;\n    // Disable text selection\n    style.userSelect = style.WebkitUserSelect = style.WebkitTouchCallout = \"none\";\n    // Disable scrolling on the draggable direction\n    style.touchAction = props.drag === true ? \"none\" : \"pan-\".concat(props.drag === \"x\" ? \"y\" : \"x\");\n  }\n  if (props.tabIndex === undefined && (props.onTap || props.onTapStart || props.whileTap)) {\n    htmlProps.tabIndex = 0;\n  }\n  htmlProps.style = style;\n  return htmlProps;\n}\n\n/**\n * A list of all valid MotionProps.\n *\n * @privateRemarks\n * This doesn't throw if a `MotionProp` name is missing - it should.\n */\nvar validMotionProps = new Set([\"animate\", \"exit\", \"variants\", \"initial\", \"style\", \"values\", \"variants\", \"transition\", \"transformTemplate\", \"transformValues\", \"custom\", \"inherit\", \"onLayoutAnimationStart\", \"onLayoutAnimationComplete\", \"onLayoutMeasure\", \"onBeforeLayoutMeasure\", \"onAnimationStart\", \"onAnimationComplete\", \"onUpdate\", \"onDragStart\", \"onDrag\", \"onDragEnd\", \"onMeasureDragConstraints\", \"onDirectionLock\", \"onDragTransitionEnd\", \"_dragX\", \"_dragY\", \"onHoverStart\", \"onHoverEnd\", \"onViewportEnter\", \"onViewportLeave\", \"ignoreStrict\", \"viewport\"]);\n/**\n * Check whether a prop name is a valid `MotionProp` key.\n *\n * @param key - Name of the property to check\n * @returns `true` is key is a valid `MotionProp`.\n *\n * @public\n */\nfunction isValidMotionProp(key) {\n  return key.startsWith(\"while\") || key.startsWith(\"drag\") && key !== \"draggable\" || key.startsWith(\"layout\") || key.startsWith(\"onTap\") || key.startsWith(\"onPan\") || validMotionProps.has(key);\n}\nvar shouldForward = function shouldForward(key) {\n  return !isValidMotionProp(key);\n};\nfunction loadExternalIsValidProp(isValidProp) {\n  if (!isValidProp) return;\n  // Explicitly filter our events\n  shouldForward = function shouldForward(key) {\n    return key.startsWith(\"on\") ? !isValidMotionProp(key) : isValidProp(key);\n  };\n}\n/**\n * Emotion and Styled Components both allow users to pass through arbitrary props to their components\n * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which\n * of these should be passed to the underlying DOM node.\n *\n * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props\n * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props\n * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of\n * `@emotion/is-prop-valid`, however to fix this problem we need to use it.\n *\n * By making it an optionalDependency we can offer this functionality only in the situations where it's\n * actually required.\n */\ntry {\n  /**\n   * We attempt to import this package but require won't be defined in esm environments, in that case\n   * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed\n   * in favour of explicit injection.\n   */\n  loadExternalIsValidProp(require(\"@emotion/is-prop-valid\").default);\n} catch (_a) {\n  // We don't need to actually do anything here - the fallback is the existing `isPropValid`.\n}\nfunction filterProps(props, isDom, forwardMotionProps) {\n  var filteredProps = {};\n  for (var key in props) {\n    /**\n     * values is considered a valid prop by Emotion, so if it's present\n     * this will be rendered out to the DOM unless explicitly filtered.\n     *\n     * We check the type as it could be used with the `feColorMatrix`\n     * element, which we support.\n     */\n    if (key === \"values\" && typeof props.values === \"object\") continue;\n    if (shouldForward(key) || forwardMotionProps === true && isValidMotionProp(key) || !isDom && !isValidMotionProp(key) ||\n    // If trying to use native HTML drag events, forward drag listeners\n    props[\"draggable\"] && key.startsWith(\"onDrag\")) {\n      filteredProps[key] = props[key];\n    }\n  }\n  return filteredProps;\n}\nvar createSvgRenderState = function createSvgRenderState() {\n  return _objectSpread({}, createHtmlRenderState(), {\n    attrs: {}\n  });\n};\nfunction useSVGProps(props, visualState, _isStatic, Component) {\n  var visualProps = React.useMemo(function () {\n    var state = createSvgRenderState();\n    indexLegacy.buildSVGAttrs(state, visualState, {\n      enableHardwareAcceleration: false\n    }, indexLegacy.isSVGTag(Component), props.transformTemplate);\n    return _objectSpread({}, state.attrs, {\n      style: _objectSpread({}, state.style)\n    });\n  }, [visualState]);\n  if (props.style) {\n    var rawStyles = {};\n    copyRawValuesOnly(rawStyles, props.style, props);\n    visualProps.style = _objectSpread({}, rawStyles, visualProps.style);\n  }\n  return visualProps;\n}\nfunction createUseRender() {\n  var forwardMotionProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var useRender = function useRender(Component, props, ref, _ref4, isStatic) {\n    var latestValues = _ref4.latestValues;\n    var useVisualProps = isSVGComponent(Component) ? useSVGProps : useHTMLProps;\n    var visualProps = useVisualProps(props, latestValues, isStatic, Component);\n    var filteredProps = filterProps(props, typeof Component === \"string\", forwardMotionProps);\n    var elementProps = _objectSpread({}, filteredProps, visualProps, {\n      ref: ref\n    });\n    /**\n     * If component has been handed a motion value as its child,\n     * memoise its initial value and render that. Subsequent updates\n     * will be handled by the onChange handler\n     */\n    var children = props.children;\n    var renderedChildren = React.useMemo(function () {\n      return indexLegacy.isMotionValue(children) ? children.get() : children;\n    }, [children]);\n    return React.createElement(Component, _objectSpread({}, elementProps, {\n      children: renderedChildren\n    }));\n  };\n  return useRender;\n}\n\n/**\n * Creates a constant value over the lifecycle of a component.\n *\n * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer\n * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`\n * you can ensure that initialisers don't execute twice or more.\n */\nfunction useConstant(init) {\n  var ref = React.useRef(null);\n  if (ref.current === null) {\n    ref.current = init();\n  }\n  return ref.current;\n}\n\n/**\n * If the provided value is a MotionValue, this returns the actual value, otherwise just the value itself\n *\n * TODO: Remove and move to library\n */\nfunction resolveMotionValue(value) {\n  var unwrappedValue = indexLegacy.isMotionValue(value) ? value.get() : value;\n  return indexLegacy.isCustomValue(unwrappedValue) ? unwrappedValue.toValue() : unwrappedValue;\n}\nfunction makeState(_ref5, props, context, presenceContext) {\n  var scrapeMotionValuesFromProps = _ref5.scrapeMotionValuesFromProps,\n    createRenderState = _ref5.createRenderState,\n    onMount = _ref5.onMount;\n  var state = {\n    latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),\n    renderState: createRenderState()\n  };\n  if (onMount) {\n    state.mount = function (instance) {\n      return onMount(props, instance, state);\n    };\n  }\n  return state;\n}\nvar makeUseVisualState = function makeUseVisualState(config) {\n  return function (props, isStatic) {\n    var context = React.useContext(MotionContext);\n    var presenceContext = React.useContext(PresenceContext);\n    var make = function make() {\n      return makeState(config, props, context, presenceContext);\n    };\n    return isStatic ? make() : useConstant(make);\n  };\n};\nfunction makeLatestValues(props, context, presenceContext, scrapeMotionValues) {\n  var values = {};\n  var motionValues = scrapeMotionValues(props, {});\n  for (var key in motionValues) {\n    values[key] = resolveMotionValue(motionValues[key]);\n  }\n  var initial = props.initial,\n    animate = props.animate;\n  var isControllingVariants = indexLegacy.isControllingVariants(props);\n  var isVariantNode = indexLegacy.isVariantNode(props);\n  if (context && isVariantNode && !isControllingVariants && props.inherit !== false) {\n    if (initial === undefined) initial = context.initial;\n    if (animate === undefined) animate = context.animate;\n  }\n  var isInitialAnimationBlocked = presenceContext ? presenceContext.initial === false : false;\n  isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;\n  var variantToSet = isInitialAnimationBlocked ? animate : initial;\n  if (variantToSet && typeof variantToSet !== \"boolean\" && !indexLegacy.isAnimationControls(variantToSet)) {\n    var list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];\n    list.forEach(function (definition) {\n      var resolved = indexLegacy.resolveVariantFromProps(props, definition);\n      if (!resolved) return;\n      var transitionEnd = resolved.transitionEnd,\n        transition = resolved.transition,\n        target = _objectWithoutProperties(resolved, [\"transitionEnd\", \"transition\"]);\n      for (var _key in target) {\n        var valueTarget = target[_key];\n        if (Array.isArray(valueTarget)) {\n          /**\n           * Take final keyframe if the initial animation is blocked because\n           * we want to initialise at the end of that blocked animation.\n           */\n          var index = isInitialAnimationBlocked ? valueTarget.length - 1 : 0;\n          valueTarget = valueTarget[index];\n        }\n        if (valueTarget !== null) {\n          values[_key] = valueTarget;\n        }\n      }\n      for (var _key2 in transitionEnd) values[_key2] = transitionEnd[_key2];\n    });\n  }\n  return values;\n}\nvar svgMotionConfig = {\n  useVisualState: makeUseVisualState({\n    scrapeMotionValuesFromProps: indexLegacy.scrapeMotionValuesFromProps,\n    createRenderState: createSvgRenderState,\n    onMount: function onMount(props, instance, _ref6) {\n      var renderState = _ref6.renderState,\n        latestValues = _ref6.latestValues;\n      indexLegacy.frame.read(function () {\n        try {\n          renderState.dimensions = typeof instance.getBBox === \"function\" ? instance.getBBox() : instance.getBoundingClientRect();\n        } catch (e) {\n          // Most likely trying to measure an unrendered element under Firefox\n          renderState.dimensions = {\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n          };\n        }\n      });\n      indexLegacy.frame.render(function () {\n        indexLegacy.buildSVGAttrs(renderState, latestValues, {\n          enableHardwareAcceleration: false\n        }, indexLegacy.isSVGTag(instance.tagName), props.transformTemplate);\n        indexLegacy.renderSVG(instance, renderState);\n      });\n    }\n  })\n};\nvar htmlMotionConfig = {\n  useVisualState: makeUseVisualState({\n    scrapeMotionValuesFromProps: indexLegacy.scrapeMotionValuesFromProps$1,\n    createRenderState: createHtmlRenderState\n  })\n};\nfunction createDomMotionConfig(Component, _ref7, preloadedFeatures, createVisualElement) {\n  var _ref7$forwardMotionPr = _ref7.forwardMotionProps,\n    forwardMotionProps = _ref7$forwardMotionPr === void 0 ? false : _ref7$forwardMotionPr;\n  var baseConfig = isSVGComponent(Component) ? svgMotionConfig : htmlMotionConfig;\n  return _objectSpread({}, baseConfig, {\n    preloadedFeatures: preloadedFeatures,\n    useRender: createUseRender(forwardMotionProps),\n    createVisualElement: createVisualElement,\n    Component: Component\n  });\n}\nfunction addDomEvent(target, eventName, handler) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n    passive: true\n  };\n  target.addEventListener(eventName, handler, options);\n  return function () {\n    return target.removeEventListener(eventName, handler);\n  };\n}\nvar isPrimaryPointer = function isPrimaryPointer(event) {\n  if (event.pointerType === \"mouse\") {\n    return typeof event.button !== \"number\" || event.button <= 0;\n  } else {\n    /**\n     * isPrimary is true for all mice buttons, whereas every touch point\n     * is regarded as its own input. So subsequent concurrent touch points\n     * will be false.\n     *\n     * Specifically match against false here as incomplete versions of\n     * PointerEvents in very old browser might have it set as undefined.\n     */\n    return event.isPrimary !== false;\n  }\n};\nfunction extractEventInfo(event) {\n  var pointType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"page\";\n  return {\n    point: {\n      x: event[pointType + \"X\"],\n      y: event[pointType + \"Y\"]\n    }\n  };\n}\nvar addPointerInfo = function addPointerInfo(handler) {\n  return function (event) {\n    return isPrimaryPointer(event) && handler(event, extractEventInfo(event));\n  };\n};\nfunction addPointerEvent(target, eventName, handler, options) {\n  return addDomEvent(target, eventName, addPointerInfo(handler), options);\n}\nfunction createLock(name) {\n  var lock = null;\n  return function () {\n    var openLock = function openLock() {\n      lock = null;\n    };\n    if (lock === null) {\n      lock = name;\n      return openLock;\n    }\n    return false;\n  };\n}\nvar globalHorizontalLock = createLock(\"dragHorizontal\");\nvar globalVerticalLock = createLock(\"dragVertical\");\nfunction getGlobalLock(drag) {\n  var lock = false;\n  if (drag === \"y\") {\n    lock = globalVerticalLock();\n  } else if (drag === \"x\") {\n    lock = globalHorizontalLock();\n  } else {\n    var openHorizontal = globalHorizontalLock();\n    var openVertical = globalVerticalLock();\n    if (openHorizontal && openVertical) {\n      lock = function lock() {\n        openHorizontal();\n        openVertical();\n      };\n    } else {\n      // Release the locks because we don't use them\n      if (openHorizontal) openHorizontal();\n      if (openVertical) openVertical();\n    }\n  }\n  return lock;\n}\nfunction isDragActive() {\n  // Check the gesture lock - if we get it, it means no drag gesture is active\n  // and we can safely fire the tap gesture.\n  var openGestureLock = getGlobalLock(true);\n  if (!openGestureLock) return true;\n  openGestureLock();\n  return false;\n}\nvar Feature = /*#__PURE__*/function () {\n  function Feature(node) {\n    _classCallCheck(this, Feature);\n    this.isMounted = false;\n    this.node = node;\n  }\n  _createClass(Feature, [{\n    key: \"update\",\n    value: function update() {}\n  }]);\n  return Feature;\n}();\nfunction addHoverEvent(node, isActive) {\n  var eventName = \"pointer\" + (isActive ? \"enter\" : \"leave\");\n  var callbackName = \"onHover\" + (isActive ? \"Start\" : \"End\");\n  var handleEvent = function handleEvent(event, info) {\n    if (event.type === \"touch\" || isDragActive()) return;\n    var props = node.getProps();\n    if (node.animationState && props.whileHover) {\n      node.animationState.setActive(\"whileHover\", isActive);\n    }\n    if (props[callbackName]) {\n      indexLegacy.frame.update(function () {\n        return props[callbackName](event, info);\n      });\n    }\n  };\n  return addPointerEvent(node.current, eventName, handleEvent, {\n    passive: !node.getProps()[callbackName]\n  });\n}\nvar HoverGesture = /*#__PURE__*/function (_Feature) {\n  _inherits(HoverGesture, _Feature);\n  function HoverGesture() {\n    _classCallCheck(this, HoverGesture);\n    return _possibleConstructorReturn(this, _getPrototypeOf(HoverGesture).apply(this, arguments));\n  }\n  _createClass(HoverGesture, [{\n    key: \"mount\",\n    value: function mount() {\n      this.unmount = indexLegacy.pipe(addHoverEvent(this.node, true), addHoverEvent(this.node, false));\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount() {}\n  }]);\n  return HoverGesture;\n}(Feature);\nvar FocusGesture = /*#__PURE__*/function (_Feature2) {\n  _inherits(FocusGesture, _Feature2);\n  function FocusGesture() {\n    var _this;\n    _classCallCheck(this, FocusGesture);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FocusGesture).apply(this, arguments));\n    _this.isActive = false;\n    return _this;\n  }\n  _createClass(FocusGesture, [{\n    key: \"onFocus\",\n    value: function onFocus() {\n      var isFocusVisible = false;\n      /**\n       * If this element doesn't match focus-visible then don't\n       * apply whileHover. But, if matches throws that focus-visible\n       * is not a valid selector then in that browser outline styles will be applied\n       * to the element by default and we want to match that behaviour with whileFocus.\n       */\n      try {\n        isFocusVisible = this.node.current.matches(\":focus-visible\");\n      } catch (e) {\n        isFocusVisible = true;\n      }\n      if (!isFocusVisible || !this.node.animationState) return;\n      this.node.animationState.setActive(\"whileFocus\", true);\n      this.isActive = true;\n    }\n  }, {\n    key: \"onBlur\",\n    value: function onBlur() {\n      if (!this.isActive || !this.node.animationState) return;\n      this.node.animationState.setActive(\"whileFocus\", false);\n      this.isActive = false;\n    }\n  }, {\n    key: \"mount\",\n    value: function mount() {\n      var _this2 = this;\n      this.unmount = indexLegacy.pipe(addDomEvent(this.node.current, \"focus\", function () {\n        return _this2.onFocus();\n      }), addDomEvent(this.node.current, \"blur\", function () {\n        return _this2.onBlur();\n      }));\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount() {}\n  }]);\n  return FocusGesture;\n}(Feature);\n/**\n * Recursively traverse up the tree to check whether the provided child node\n * is the parent or a descendant of it.\n *\n * @param parent - Element to find\n * @param child - Element to test against parent\n */\nvar isNodeOrChild = function isNodeOrChild(parent, child) {\n  if (!child) {\n    return false;\n  } else if (parent === child) {\n    return true;\n  } else {\n    return isNodeOrChild(parent, child.parentElement);\n  }\n};\nfunction fireSyntheticPointerEvent(name, handler) {\n  if (!handler) return;\n  var syntheticPointerEvent = new PointerEvent(\"pointer\" + name);\n  handler(syntheticPointerEvent, extractEventInfo(syntheticPointerEvent));\n}\nvar PressGesture = /*#__PURE__*/function (_Feature3) {\n  _inherits(PressGesture, _Feature3);\n  function PressGesture() {\n    var _this3;\n    _classCallCheck(this, PressGesture);\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(PressGesture).apply(this, arguments));\n    _this3.removeStartListeners = indexLegacy.noop;\n    _this3.removeEndListeners = indexLegacy.noop;\n    _this3.removeAccessibleListeners = indexLegacy.noop;\n    _this3.startPointerPress = function (startEvent, startInfo) {\n      _this3.removeEndListeners();\n      if (_this3.isPressing) return;\n      var props = _this3.node.getProps();\n      var endPointerPress = function endPointerPress(endEvent, endInfo) {\n        if (!_this3.checkPressEnd()) return;\n        var _this3$node$getProps = _this3.node.getProps(),\n          onTap = _this3$node$getProps.onTap,\n          onTapCancel = _this3$node$getProps.onTapCancel;\n        indexLegacy.frame.update(function () {\n          /**\n           * We only count this as a tap gesture if the event.target is the same\n           * as, or a child of, this component's element\n           */\n          !isNodeOrChild(_this3.node.current, endEvent.target) ? onTapCancel && onTapCancel(endEvent, endInfo) : onTap && onTap(endEvent, endInfo);\n        });\n      };\n      var removePointerUpListener = addPointerEvent(window, \"pointerup\", endPointerPress, {\n        passive: !(props.onTap || props[\"onPointerUp\"])\n      });\n      var removePointerCancelListener = addPointerEvent(window, \"pointercancel\", function (cancelEvent, cancelInfo) {\n        return _this3.cancelPress(cancelEvent, cancelInfo);\n      }, {\n        passive: !(props.onTapCancel || props[\"onPointerCancel\"])\n      });\n      _this3.removeEndListeners = indexLegacy.pipe(removePointerUpListener, removePointerCancelListener);\n      _this3.startPress(startEvent, startInfo);\n    };\n    _this3.startAccessiblePress = function () {\n      var handleKeydown = function handleKeydown(keydownEvent) {\n        if (keydownEvent.key !== \"Enter\" || _this3.isPressing) return;\n        var handleKeyup = function handleKeyup(keyupEvent) {\n          if (keyupEvent.key !== \"Enter\" || !_this3.checkPressEnd()) return;\n          fireSyntheticPointerEvent(\"up\", function (event, info) {\n            var _this3$node$getProps2 = _this3.node.getProps(),\n              onTap = _this3$node$getProps2.onTap;\n            if (onTap) {\n              indexLegacy.frame.update(function () {\n                return onTap(event, info);\n              });\n            }\n          });\n        };\n        _this3.removeEndListeners();\n        _this3.removeEndListeners = addDomEvent(_this3.node.current, \"keyup\", handleKeyup);\n        fireSyntheticPointerEvent(\"down\", function (event, info) {\n          _this3.startPress(event, info);\n        });\n      };\n      var removeKeydownListener = addDomEvent(_this3.node.current, \"keydown\", handleKeydown);\n      var handleBlur = function handleBlur() {\n        if (!_this3.isPressing) return;\n        fireSyntheticPointerEvent(\"cancel\", function (cancelEvent, cancelInfo) {\n          return _this3.cancelPress(cancelEvent, cancelInfo);\n        });\n      };\n      var removeBlurListener = addDomEvent(_this3.node.current, \"blur\", handleBlur);\n      _this3.removeAccessibleListeners = indexLegacy.pipe(removeKeydownListener, removeBlurListener);\n    };\n    return _this3;\n  }\n  _createClass(PressGesture, [{\n    key: \"startPress\",\n    value: function startPress(event, info) {\n      this.isPressing = true;\n      var _this$node$getProps = this.node.getProps(),\n        onTapStart = _this$node$getProps.onTapStart,\n        whileTap = _this$node$getProps.whileTap;\n      /**\n       * Ensure we trigger animations before firing event callback\n       */\n      if (whileTap && this.node.animationState) {\n        this.node.animationState.setActive(\"whileTap\", true);\n      }\n      if (onTapStart) {\n        indexLegacy.frame.update(function () {\n          return onTapStart(event, info);\n        });\n      }\n    }\n  }, {\n    key: \"checkPressEnd\",\n    value: function checkPressEnd() {\n      this.removeEndListeners();\n      this.isPressing = false;\n      var props = this.node.getProps();\n      if (props.whileTap && this.node.animationState) {\n        this.node.animationState.setActive(\"whileTap\", false);\n      }\n      return !isDragActive();\n    }\n  }, {\n    key: \"cancelPress\",\n    value: function cancelPress(event, info) {\n      if (!this.checkPressEnd()) return;\n      var _this$node$getProps2 = this.node.getProps(),\n        onTapCancel = _this$node$getProps2.onTapCancel;\n      if (onTapCancel) {\n        indexLegacy.frame.update(function () {\n          return onTapCancel(event, info);\n        });\n      }\n    }\n  }, {\n    key: \"mount\",\n    value: function mount() {\n      var props = this.node.getProps();\n      var removePointerListener = addPointerEvent(this.node.current, \"pointerdown\", this.startPointerPress, {\n        passive: !(props.onTapStart || props[\"onPointerStart\"])\n      });\n      var removeFocusListener = addDomEvent(this.node.current, \"focus\", this.startAccessiblePress);\n      this.removeStartListeners = indexLegacy.pipe(removePointerListener, removeFocusListener);\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount() {\n      this.removeStartListeners();\n      this.removeEndListeners();\n      this.removeAccessibleListeners();\n    }\n  }]);\n  return PressGesture;\n}(Feature);\n/**\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\n * element, so even though these handlers might all be triggered by different\n * observers, we can keep them in the same map.\n */\nvar observerCallbacks = new WeakMap();\n/**\n * Multiple observers can be created for multiple element/document roots. Each with\n * different settings. So here we store dictionaries of observers to each root,\n * using serialised settings (threshold/margin) as lookup keys.\n */\nvar observers = new WeakMap();\nvar fireObserverCallback = function fireObserverCallback(entry) {\n  var callback = observerCallbacks.get(entry.target);\n  callback && callback(entry);\n};\nvar fireAllObserverCallbacks = function fireAllObserverCallbacks(entries) {\n  entries.forEach(fireObserverCallback);\n};\nfunction initIntersectionObserver(_ref8) {\n  var root = _ref8.root,\n    options = _objectWithoutProperties(_ref8, [\"root\"]);\n  var lookupRoot = root || document;\n  /**\n   * If we don't have an observer lookup map for this root, create one.\n   */\n  if (!observers.has(lookupRoot)) {\n    observers.set(lookupRoot, {});\n  }\n  var rootObservers = observers.get(lookupRoot);\n  var key = JSON.stringify(options);\n  /**\n   * If we don't have an observer for this combination of root and settings,\n   * create one.\n   */\n  if (!rootObservers[key]) {\n    rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, _objectSpread({\n      root: root\n    }, options));\n  }\n  return rootObservers[key];\n}\nfunction observeIntersection(element, options, callback) {\n  var rootInteresectionObserver = initIntersectionObserver(options);\n  observerCallbacks.set(element, callback);\n  rootInteresectionObserver.observe(element);\n  return function () {\n    observerCallbacks.delete(element);\n    rootInteresectionObserver.unobserve(element);\n  };\n}\nvar thresholdNames = {\n  some: 0,\n  all: 1\n};\nvar InViewFeature = /*#__PURE__*/function (_Feature4) {\n  _inherits(InViewFeature, _Feature4);\n  function InViewFeature() {\n    var _this4;\n    _classCallCheck(this, InViewFeature);\n    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(InViewFeature).apply(this, arguments));\n    _this4.hasEnteredView = false;\n    _this4.isInView = false;\n    return _this4;\n  }\n  _createClass(InViewFeature, [{\n    key: \"startObserver\",\n    value: function startObserver() {\n      var _this5 = this;\n      this.unmount();\n      var _this$node$getProps3 = this.node.getProps(),\n        _this$node$getProps3$ = _this$node$getProps3.viewport,\n        viewport = _this$node$getProps3$ === void 0 ? {} : _this$node$getProps3$;\n      var root = viewport.root,\n        rootMargin = viewport.margin,\n        _viewport$amount = viewport.amount,\n        amount = _viewport$amount === void 0 ? \"some\" : _viewport$amount,\n        once = viewport.once;\n      var options = {\n        root: root ? root.current : undefined,\n        rootMargin: rootMargin,\n        threshold: typeof amount === \"number\" ? amount : thresholdNames[amount]\n      };\n      var onIntersectionUpdate = function onIntersectionUpdate(entry) {\n        var isIntersecting = entry.isIntersecting;\n        /**\n         * If there's been no change in the viewport state, early return.\n         */\n        if (_this5.isInView === isIntersecting) return;\n        _this5.isInView = isIntersecting;\n        /**\n         * Handle hasEnteredView. If this is only meant to run once, and\n         * element isn't visible, early return. Otherwise set hasEnteredView to true.\n         */\n        if (once && !isIntersecting && _this5.hasEnteredView) {\n          return;\n        } else if (isIntersecting) {\n          _this5.hasEnteredView = true;\n        }\n        if (_this5.node.animationState) {\n          _this5.node.animationState.setActive(\"whileInView\", isIntersecting);\n        }\n        /**\n         * Use the latest committed props rather than the ones in scope\n         * when this observer is created\n         */\n        var _this5$node$getProps = _this5.node.getProps(),\n          onViewportEnter = _this5$node$getProps.onViewportEnter,\n          onViewportLeave = _this5$node$getProps.onViewportLeave;\n        var callback = isIntersecting ? onViewportEnter : onViewportLeave;\n        callback && callback(entry);\n      };\n      return observeIntersection(this.node.current, options, onIntersectionUpdate);\n    }\n  }, {\n    key: \"mount\",\n    value: function mount() {\n      this.startObserver();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      if (typeof IntersectionObserver === \"undefined\") return;\n      var _this$node = this.node,\n        props = _this$node.props,\n        prevProps = _this$node.prevProps;\n      var hasOptionsChanged = [\"amount\", \"margin\", \"root\"].some(hasViewportOptionChanged(props, prevProps));\n      if (hasOptionsChanged) {\n        this.startObserver();\n      }\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount() {}\n  }]);\n  return InViewFeature;\n}(Feature);\nfunction hasViewportOptionChanged(_ref9) {\n  var _ref9$viewport = _ref9.viewport,\n    viewport = _ref9$viewport === void 0 ? {} : _ref9$viewport;\n  var _ref10 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref10$viewport = _ref10.viewport,\n    prevViewport = _ref10$viewport === void 0 ? {} : _ref10$viewport;\n  return function (name) {\n    return viewport[name] !== prevViewport[name];\n  };\n}\nvar gestureAnimations = {\n  inView: {\n    Feature: InViewFeature\n  },\n  tap: {\n    Feature: PressGesture\n  },\n  focus: {\n    Feature: FocusGesture\n  },\n  hover: {\n    Feature: HoverGesture\n  }\n};\nfunction shallowCompare(next, prev) {\n  if (!Array.isArray(prev)) return false;\n  var prevLength = prev.length;\n  if (prevLength !== next.length) return false;\n  for (var i = 0; i < prevLength; i++) {\n    if (prev[i] !== next[i]) return false;\n  }\n  return true;\n}\nfunction animateVariant(visualElement, variant) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var resolved = indexLegacy.resolveVariant(visualElement, variant, options.custom);\n  var _ref11 = resolved || {},\n    _ref11$transition = _ref11.transition,\n    transition = _ref11$transition === void 0 ? visualElement.getDefaultTransition() || {} : _ref11$transition;\n  if (options.transitionOverride) {\n    transition = options.transitionOverride;\n  }\n  /**\n   * If we have a variant, create a callback that runs it as an animation.\n   * Otherwise, we resolve a Promise immediately for a composable no-op.\n   */\n  var getAnimation = resolved ? function () {\n    return Promise.all(indexLegacy.animateTarget(visualElement, resolved, options));\n  } : function () {\n    return Promise.resolve();\n  };\n  /**\n   * If we have children, create a callback that runs all their animations.\n   * Otherwise, we resolve a Promise immediately for a composable no-op.\n   */\n  var getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size ? function () {\n    var forwardDelay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var _transition = transition,\n      _transition$delayChil = _transition.delayChildren,\n      delayChildren = _transition$delayChil === void 0 ? 0 : _transition$delayChil,\n      staggerChildren = _transition.staggerChildren,\n      staggerDirection = _transition.staggerDirection;\n    return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);\n  } : function () {\n    return Promise.resolve();\n  };\n  /**\n   * If the transition explicitly defines a \"when\" option, we need to resolve either\n   * this animation or all children animations before playing the other.\n   */\n  var _transition2 = transition,\n    when = _transition2.when;\n  if (when) {\n    var _ref12 = when === \"beforeChildren\" ? [getAnimation, getChildAnimations] : [getChildAnimations, getAnimation],\n      _ref13 = _slicedToArray(_ref12, 2),\n      first = _ref13[0],\n      last = _ref13[1];\n    return first().then(function () {\n      return last();\n    });\n  } else {\n    return Promise.all([getAnimation(), getChildAnimations(options.delay)]);\n  }\n}\nfunction animateChildren(visualElement, variant) {\n  var delayChildren = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var staggerChildren = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  var staggerDirection = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var options = arguments.length > 5 ? arguments[5] : undefined;\n  var animations = [];\n  var maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;\n  var generateStaggerDuration = staggerDirection === 1 ? function () {\n    var i = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return i * staggerChildren;\n  } : function () {\n    var i = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return maxStaggerDuration - i * staggerChildren;\n  };\n  Array.from(visualElement.variantChildren).sort(sortByTreeOrder).forEach(function (child, i) {\n    child.notify(\"AnimationStart\", variant);\n    animations.push(animateVariant(child, variant, _objectSpread({}, options, {\n      delay: delayChildren + generateStaggerDuration(i)\n    })).then(function () {\n      return child.notify(\"AnimationComplete\", variant);\n    }));\n  });\n  return Promise.all(animations);\n}\nfunction sortByTreeOrder(a, b) {\n  return a.sortNodePosition(b);\n}\nfunction animateVisualElement(visualElement, definition) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  visualElement.notify(\"AnimationStart\", definition);\n  var animation;\n  if (Array.isArray(definition)) {\n    var _animations = definition.map(function (variant) {\n      return animateVariant(visualElement, variant, options);\n    });\n    animation = Promise.all(_animations);\n  } else if (typeof definition === \"string\") {\n    animation = animateVariant(visualElement, definition, options);\n  } else {\n    var resolvedDefinition = typeof definition === \"function\" ? indexLegacy.resolveVariant(visualElement, definition, options.custom) : definition;\n    animation = Promise.all(indexLegacy.animateTarget(visualElement, resolvedDefinition, options));\n  }\n  return animation.then(function () {\n    return visualElement.notify(\"AnimationComplete\", definition);\n  });\n}\nvar reversePriorityOrder = _toConsumableArray(indexLegacy.variantPriorityOrder).reverse();\nvar numAnimationTypes = indexLegacy.variantPriorityOrder.length;\nfunction animateList(visualElement) {\n  return function (animations) {\n    return Promise.all(animations.map(function (_ref14) {\n      var animation = _ref14.animation,\n        options = _ref14.options;\n      return animateVisualElement(visualElement, animation, options);\n    }));\n  };\n}\nfunction createAnimationState(visualElement) {\n  var animate = animateList(visualElement);\n  var state = createState();\n  var isInitialRender = true;\n  /**\n   * This function will be used to reduce the animation definitions for\n   * each active animation type into an object of resolved values for it.\n   */\n  var buildResolvedTypeValues = function buildResolvedTypeValues(acc, definition) {\n    var resolved = indexLegacy.resolveVariant(visualElement, definition);\n    if (resolved) {\n      var transition = resolved.transition,\n        transitionEnd = resolved.transitionEnd,\n        target = _objectWithoutProperties(resolved, [\"transition\", \"transitionEnd\"]);\n      acc = _objectSpread({}, acc, target, transitionEnd);\n    }\n    return acc;\n  };\n  /**\n   * This just allows us to inject mocked animation functions\n   * @internal\n   */\n  function setAnimateFunction(makeAnimator) {\n    animate = makeAnimator(visualElement);\n  }\n  /**\n   * When we receive new props, we need to:\n   * 1. Create a list of protected keys for each type. This is a directory of\n   *    value keys that are currently being \"handled\" by types of a higher priority\n   *    so that whenever an animation is played of a given type, these values are\n   *    protected from being animated.\n   * 2. Determine if an animation type needs animating.\n   * 3. Determine if any values have been removed from a type and figure out\n   *    what to animate those to.\n   */\n  function animateChanges(options, changedActiveType) {\n    var props = visualElement.getProps();\n    var context = visualElement.getVariantContext(true) || {};\n    /**\n     * A list of animations that we'll build into as we iterate through the animation\n     * types. This will get executed at the end of the function.\n     */\n    var animations = [];\n    /**\n     * Keep track of which values have been removed. Then, as we hit lower priority\n     * animation types, we can check if they contain removed values and animate to that.\n     */\n    var removedKeys = new Set();\n    /**\n     * A dictionary of all encountered keys. This is an object to let us build into and\n     * copy it without iteration. Each time we hit an animation type we set its protected\n     * keys - the keys its not allowed to animate - to the latest version of this object.\n     */\n    var encounteredKeys = {};\n    /**\n     * If a variant has been removed at a given index, and this component is controlling\n     * variant animations, we want to ensure lower-priority variants are forced to animate.\n     */\n    var removedVariantIndex = Infinity;\n    /**\n     * Iterate through all animation types in reverse priority order. For each, we want to\n     * detect which values it's handling and whether or not they've changed (and therefore\n     * need to be animated). If any values have been removed, we want to detect those in\n     * lower priority props and flag for animation.\n     */\n    var _loop = function _loop() {\n      var type = reversePriorityOrder[i];\n      var typeState = state[type];\n      var prop = props[type] !== undefined ? props[type] : context[type];\n      var propIsVariant = indexLegacy.isVariantLabel(prop);\n      /**\n       * If this type has *just* changed isActive status, set activeDelta\n       * to that status. Otherwise set to null.\n       */\n      var activeDelta = type === changedActiveType ? typeState.isActive : null;\n      if (activeDelta === false) removedVariantIndex = i;\n      /**\n       * If this prop is an inherited variant, rather than been set directly on the\n       * component itself, we want to make sure we allow the parent to trigger animations.\n       *\n       * TODO: Can probably change this to a !isControllingVariants check\n       */\n      var isInherited = prop === context[type] && prop !== props[type] && propIsVariant;\n      /**\n       *\n       */\n      if (isInherited && isInitialRender && visualElement.manuallyAnimateOnMount) {\n        isInherited = false;\n      }\n      /**\n       * Set all encountered keys so far as the protected keys for this type. This will\n       * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n       */\n      typeState.protectedKeys = _objectSpread({}, encounteredKeys);\n      // Check if we can skip analysing this prop early\n      if (\n      // If it isn't active and hasn't *just* been set as inactive\n      !typeState.isActive && activeDelta === null ||\n      // If we didn't and don't have any defined prop for this animation type\n      !prop && !typeState.prevProp ||\n      // Or if the prop doesn't define an animation\n      indexLegacy.isAnimationControls(prop) || typeof prop === \"boolean\") {\n        return 1; // continue\n      }\n      /**\n       * As we go look through the values defined on this type, if we detect\n       * a changed value or a value that was removed in a higher priority, we set\n       * this to true and add this prop to the animation list.\n       */\n      var variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\n      var shouldAnimateType = variantDidChange ||\n      // If we're making this variant active, we want to always make it active\n      type === changedActiveType && typeState.isActive && !isInherited && propIsVariant ||\n      // If we removed a higher-priority variant (i is in reverse order)\n      i > removedVariantIndex && propIsVariant;\n      /**\n       * As animations can be set as variant lists, variants or target objects, we\n       * coerce everything to an array if it isn't one already\n       */\n      var definitionList = Array.isArray(prop) ? prop : [prop];\n      /**\n       * Build an object of all the resolved values. We'll use this in the subsequent\n       * animateChanges calls to determine whether a value has changed.\n       */\n      var resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});\n      if (activeDelta === false) resolvedValues = {};\n      /**\n       * Now we need to loop through all the keys in the prev prop and this prop,\n       * and decide:\n       * 1. If the value has changed, and needs animating\n       * 2. If it has been removed, and needs adding to the removedKeys set\n       * 3. If it has been removed in a higher priority type and needs animating\n       * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n       *    needs adding to the type's protectedKeys list.\n       */\n      var _typeState$prevResolv = typeState.prevResolvedValues,\n        prevResolvedValues = _typeState$prevResolv === void 0 ? {} : _typeState$prevResolv;\n      var allKeys = _objectSpread({}, prevResolvedValues, resolvedValues);\n      var markToAnimate = function markToAnimate(key) {\n        shouldAnimateType = true;\n        removedKeys.delete(key);\n        typeState.needsAnimating[key] = true;\n      };\n      for (var key in allKeys) {\n        var next = resolvedValues[key];\n        var prev = prevResolvedValues[key];\n        // If we've already handled this we can just skip ahead\n        if (encounteredKeys.hasOwnProperty(key)) continue;\n        /**\n         * If the value has changed, we probably want to animate it.\n         */\n        if (next !== prev) {\n          /**\n           * If both values are keyframes, we need to shallow compare them to\n           * detect whether any value has changed. If it has, we animate it.\n           */\n          if (indexLegacy.isKeyframesTarget(next) && indexLegacy.isKeyframesTarget(prev)) {\n            if (!shallowCompare(next, prev) || variantDidChange) {\n              markToAnimate(key);\n            } else {\n              /**\n               * If it hasn't changed, we want to ensure it doesn't animate by\n               * adding it to the list of protected keys.\n               */\n              typeState.protectedKeys[key] = true;\n            }\n          } else if (next !== undefined) {\n            // If next is defined and doesn't equal prev, it needs animating\n            markToAnimate(key);\n          } else {\n            // If it's undefined, it's been removed.\n            removedKeys.add(key);\n          }\n        } else if (next !== undefined && removedKeys.has(key)) {\n          /**\n           * If next hasn't changed and it isn't undefined, we want to check if it's\n           * been removed by a higher priority\n           */\n          markToAnimate(key);\n        } else {\n          /**\n           * If it hasn't changed, we add it to the list of protected values\n           * to ensure it doesn't get animated.\n           */\n          typeState.protectedKeys[key] = true;\n        }\n      }\n      /**\n       * Update the typeState so next time animateChanges is called we can compare the\n       * latest prop and resolvedValues to these.\n       */\n      typeState.prevProp = prop;\n      typeState.prevResolvedValues = resolvedValues;\n      /**\n       *\n       */\n      if (typeState.isActive) {\n        encounteredKeys = _objectSpread({}, encounteredKeys, resolvedValues);\n      }\n      if (isInitialRender && visualElement.blockInitialAnimation) {\n        shouldAnimateType = false;\n      }\n      /**\n       * If this is an inherited prop we want to hard-block animations\n       * TODO: Test as this should probably still handle animations triggered\n       * by removed values?\n       */\n      if (shouldAnimateType && !isInherited) {\n        animations.push.apply(animations, _toConsumableArray(definitionList.map(function (animation) {\n          return {\n            animation: animation,\n            options: _objectSpread({\n              type: type\n            }, options)\n          };\n        })));\n      }\n    };\n    for (var i = 0; i < numAnimationTypes; i++) {\n      if (_loop()) continue;\n    }\n    /**\n     * If there are some removed value that haven't been dealt with,\n     * we need to create a new animation that falls back either to the value\n     * defined in the style prop, or the last read value.\n     */\n    if (removedKeys.size) {\n      var fallbackAnimation = {};\n      removedKeys.forEach(function (key) {\n        var fallbackTarget = visualElement.getBaseTarget(key);\n        if (fallbackTarget !== undefined) {\n          fallbackAnimation[key] = fallbackTarget;\n        }\n      });\n      animations.push({\n        animation: fallbackAnimation\n      });\n    }\n    var shouldAnimate = Boolean(animations.length);\n    if (isInitialRender && props.initial === false && !visualElement.manuallyAnimateOnMount) {\n      shouldAnimate = false;\n    }\n    isInitialRender = false;\n    return shouldAnimate ? animate(animations) : Promise.resolve();\n  }\n  /**\n   * Change whether a certain animation type is active.\n   */\n  function setActive(type, isActive, options) {\n    var _a;\n    // If the active state hasn't changed, we can safely do nothing here\n    if (state[type].isActive === isActive) return Promise.resolve();\n    // Propagate active change to children\n    (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach(function (child) {\n      var _a;\n      return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive);\n    });\n    state[type].isActive = isActive;\n    var animations = animateChanges(options, type);\n    for (var key in state) {\n      state[key].protectedKeys = {};\n    }\n    return animations;\n  }\n  return {\n    animateChanges: animateChanges,\n    setActive: setActive,\n    setAnimateFunction: setAnimateFunction,\n    getState: function getState() {\n      return state;\n    }\n  };\n}\nfunction checkVariantsDidChange(prev, next) {\n  if (typeof next === \"string\") {\n    return next !== prev;\n  } else if (Array.isArray(next)) {\n    return !shallowCompare(next, prev);\n  }\n  return false;\n}\nfunction createTypeState() {\n  var isActive = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  return {\n    isActive: isActive,\n    protectedKeys: {},\n    needsAnimating: {},\n    prevResolvedValues: {}\n  };\n}\nfunction createState() {\n  return {\n    animate: createTypeState(true),\n    whileInView: createTypeState(),\n    whileHover: createTypeState(),\n    whileTap: createTypeState(),\n    whileDrag: createTypeState(),\n    whileFocus: createTypeState(),\n    exit: createTypeState()\n  };\n}\nvar AnimationFeature = /*#__PURE__*/function (_Feature5) {\n  _inherits(AnimationFeature, _Feature5);\n  /**\n   * We dynamically generate the AnimationState manager as it contains a reference\n   * to the underlying animation library. We only want to load that if we load this,\n   * so people can optionally code split it out using the `m` component.\n   */\n  function AnimationFeature(node) {\n    var _this6;\n    _classCallCheck(this, AnimationFeature);\n    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(AnimationFeature).call(this, node));\n    node.animationState || (node.animationState = createAnimationState(node));\n    return _this6;\n  }\n  _createClass(AnimationFeature, [{\n    key: \"updateAnimationControlsSubscription\",\n    value: function updateAnimationControlsSubscription() {\n      var _this$node$getProps4 = this.node.getProps(),\n        animate = _this$node$getProps4.animate;\n      this.unmount();\n      if (indexLegacy.isAnimationControls(animate)) {\n        this.unmount = animate.subscribe(this.node);\n      }\n    }\n    /**\n     * Subscribe any provided AnimationControls to the component's VisualElement\n     */\n  }, {\n    key: \"mount\",\n    value: function mount() {\n      this.updateAnimationControlsSubscription();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var _this$node$getProps5 = this.node.getProps(),\n        animate = _this$node$getProps5.animate;\n      var _ref15 = this.node.prevProps || {},\n        prevAnimate = _ref15.animate;\n      if (animate !== prevAnimate) {\n        this.updateAnimationControlsSubscription();\n      }\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount() {}\n  }]);\n  return AnimationFeature;\n}(Feature);\nvar id$2 = 0;\nvar ExitAnimationFeature = /*#__PURE__*/function (_Feature6) {\n  _inherits(ExitAnimationFeature, _Feature6);\n  function ExitAnimationFeature() {\n    var _this7;\n    _classCallCheck(this, ExitAnimationFeature);\n    _this7 = _possibleConstructorReturn(this, _getPrototypeOf(ExitAnimationFeature).apply(this, arguments));\n    _this7.id = id$2++;\n    return _this7;\n  }\n  _createClass(ExitAnimationFeature, [{\n    key: \"update\",\n    value: function update() {\n      var _this8 = this;\n      if (!this.node.presenceContext) return;\n      var _this$node$presenceCo = this.node.presenceContext,\n        isPresent = _this$node$presenceCo.isPresent,\n        onExitComplete = _this$node$presenceCo.onExitComplete,\n        custom = _this$node$presenceCo.custom;\n      var _ref16 = this.node.prevPresenceContext || {},\n        prevIsPresent = _ref16.isPresent;\n      if (!this.node.animationState || isPresent === prevIsPresent) {\n        return;\n      }\n      var exitAnimation = this.node.animationState.setActive(\"exit\", !isPresent, {\n        custom: custom !== null && custom !== void 0 ? custom : this.node.getProps().custom\n      });\n      if (onExitComplete && !isPresent) {\n        exitAnimation.then(function () {\n          return onExitComplete(_this8.id);\n        });\n      }\n    }\n  }, {\n    key: \"mount\",\n    value: function mount() {\n      var _ref17 = this.node.presenceContext || {},\n        register = _ref17.register;\n      if (register) {\n        this.unmount = register(this.id);\n      }\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount() {}\n  }]);\n  return ExitAnimationFeature;\n}(Feature);\nvar animations = {\n  animation: {\n    Feature: AnimationFeature\n  },\n  exit: {\n    Feature: ExitAnimationFeature\n  }\n};\n\n/**\n * @internal\n */\nvar PanSession = /*#__PURE__*/function () {\n  function PanSession(event, handlers) {\n    var _this9 = this;\n    var _ref18 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      transformPagePoint = _ref18.transformPagePoint;\n    _classCallCheck(this, PanSession);\n    /**\n     * @internal\n     */\n    this.startEvent = null;\n    /**\n     * @internal\n     */\n    this.lastMoveEvent = null;\n    /**\n     * @internal\n     */\n    this.lastMoveEventInfo = null;\n    /**\n     * @internal\n     */\n    this.handlers = {};\n    this.updatePoint = function () {\n      if (!(_this9.lastMoveEvent && _this9.lastMoveEventInfo)) return;\n      var info = getPanInfo(_this9.lastMoveEventInfo, _this9.history);\n      var isPanStarted = _this9.startEvent !== null;\n      // Only start panning if the offset is larger than 3 pixels. If we make it\n      // any larger than this we'll want to reset the pointer history\n      // on the first update to avoid visual snapping to the cursoe.\n      var isDistancePastThreshold = indexLegacy.distance2D(info.offset, {\n        x: 0,\n        y: 0\n      }) >= 3;\n      if (!isPanStarted && !isDistancePastThreshold) return;\n      var point = info.point;\n      var timestamp = indexLegacy.frameData.timestamp;\n      _this9.history.push(_objectSpread({}, point, {\n        timestamp: timestamp\n      }));\n      var _this9$handlers = _this9.handlers,\n        onStart = _this9$handlers.onStart,\n        onMove = _this9$handlers.onMove;\n      if (!isPanStarted) {\n        onStart && onStart(_this9.lastMoveEvent, info);\n        _this9.startEvent = _this9.lastMoveEvent;\n      }\n      onMove && onMove(_this9.lastMoveEvent, info);\n    };\n    this.handlePointerMove = function (event, info) {\n      _this9.lastMoveEvent = event;\n      _this9.lastMoveEventInfo = transformPoint(info, _this9.transformPagePoint);\n      // Throttle mouse move event to once per frame\n      indexLegacy.frame.update(_this9.updatePoint, true);\n    };\n    this.handlePointerUp = function (event, info) {\n      _this9.end();\n      if (!(_this9.lastMoveEvent && _this9.lastMoveEventInfo)) return;\n      var _this9$handlers2 = _this9.handlers,\n        onEnd = _this9$handlers2.onEnd,\n        onSessionEnd = _this9$handlers2.onSessionEnd;\n      var panInfo = getPanInfo(event.type === \"pointercancel\" ? _this9.lastMoveEventInfo : transformPoint(info, _this9.transformPagePoint), _this9.history);\n      if (_this9.startEvent && onEnd) {\n        onEnd(event, panInfo);\n      }\n      onSessionEnd && onSessionEnd(event, panInfo);\n    };\n    // If we have more than one touch, don't start detecting this gesture\n    if (!isPrimaryPointer(event)) return;\n    this.handlers = handlers;\n    this.transformPagePoint = transformPagePoint;\n    var info = extractEventInfo(event);\n    var initialInfo = transformPoint(info, this.transformPagePoint);\n    var point = initialInfo.point;\n    var timestamp = indexLegacy.frameData.timestamp;\n    this.history = [_objectSpread({}, point, {\n      timestamp: timestamp\n    })];\n    var onSessionStart = handlers.onSessionStart;\n    onSessionStart && onSessionStart(event, getPanInfo(initialInfo, this.history));\n    this.removeListeners = indexLegacy.pipe(addPointerEvent(window, \"pointermove\", this.handlePointerMove), addPointerEvent(window, \"pointerup\", this.handlePointerUp), addPointerEvent(window, \"pointercancel\", this.handlePointerUp));\n  }\n  _createClass(PanSession, [{\n    key: \"updateHandlers\",\n    value: function updateHandlers(handlers) {\n      this.handlers = handlers;\n    }\n  }, {\n    key: \"end\",\n    value: function end() {\n      this.removeListeners && this.removeListeners();\n      indexLegacy.cancelFrame(this.updatePoint);\n    }\n  }]);\n  return PanSession;\n}();\nfunction transformPoint(info, transformPagePoint) {\n  return transformPagePoint ? {\n    point: transformPagePoint(info.point)\n  } : info;\n}\nfunction subtractPoint(a, b) {\n  return {\n    x: a.x - b.x,\n    y: a.y - b.y\n  };\n}\nfunction getPanInfo(_ref19, history) {\n  var point = _ref19.point;\n  return {\n    point: point,\n    delta: subtractPoint(point, lastDevicePoint(history)),\n    offset: subtractPoint(point, startDevicePoint(history)),\n    velocity: getVelocity(history, 0.1)\n  };\n}\nfunction startDevicePoint(history) {\n  return history[0];\n}\nfunction lastDevicePoint(history) {\n  return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n  if (history.length < 2) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n  var i = history.length - 1;\n  var timestampedPoint = null;\n  var lastPoint = lastDevicePoint(history);\n  while (i >= 0) {\n    timestampedPoint = history[i];\n    if (lastPoint.timestamp - timestampedPoint.timestamp > indexLegacy.secondsToMilliseconds(timeDelta)) {\n      break;\n    }\n    i--;\n  }\n  if (!timestampedPoint) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n  var time = indexLegacy.millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);\n  if (time === 0) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n  var currentVelocity = {\n    x: (lastPoint.x - timestampedPoint.x) / time,\n    y: (lastPoint.y - timestampedPoint.y) / time\n  };\n  if (currentVelocity.x === Infinity) {\n    currentVelocity.x = 0;\n  }\n  if (currentVelocity.y === Infinity) {\n    currentVelocity.y = 0;\n  }\n  return currentVelocity;\n}\nfunction calcLength(axis) {\n  return axis.max - axis.min;\n}\nfunction isNear(value) {\n  var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var maxDistance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.01;\n  return Math.abs(value - target) <= maxDistance;\n}\nfunction calcAxisDelta(delta, source, target) {\n  var origin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.5;\n  delta.origin = origin;\n  delta.originPoint = indexLegacy.mix(source.min, source.max, delta.origin);\n  delta.scale = calcLength(target) / calcLength(source);\n  if (isNear(delta.scale, 1, 0.0001) || isNaN(delta.scale)) delta.scale = 1;\n  delta.translate = indexLegacy.mix(target.min, target.max, delta.origin) - delta.originPoint;\n  if (isNear(delta.translate) || isNaN(delta.translate)) delta.translate = 0;\n}\nfunction calcBoxDelta(delta, source, target, origin) {\n  calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : undefined);\n  calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : undefined);\n}\nfunction calcRelativeAxis(target, relative, parent) {\n  target.min = parent.min + relative.min;\n  target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(target, relative, parent) {\n  calcRelativeAxis(target.x, relative.x, parent.x);\n  calcRelativeAxis(target.y, relative.y, parent.y);\n}\nfunction calcRelativeAxisPosition(target, layout, parent) {\n  target.min = layout.min - parent.min;\n  target.max = target.min + calcLength(layout);\n}\nfunction calcRelativePosition(target, layout, parent) {\n  calcRelativeAxisPosition(target.x, layout.x, parent.x);\n  calcRelativeAxisPosition(target.y, layout.y, parent.y);\n}\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\nfunction applyConstraints(point, _ref20, elastic) {\n  var min = _ref20.min,\n    max = _ref20.max;\n  if (min !== undefined && point < min) {\n    // If we have a min point defined, and this is outside of that, constrain\n    point = elastic ? indexLegacy.mix(min, point, elastic.min) : Math.max(point, min);\n  } else if (max !== undefined && point > max) {\n    // If we have a max point defined, and this is outside of that, constrain\n    point = elastic ? indexLegacy.mix(max, point, elastic.max) : Math.min(point, max);\n  }\n  return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\nfunction calcRelativeAxisConstraints(axis, min, max) {\n  return {\n    min: min !== undefined ? axis.min + min : undefined,\n    max: max !== undefined ? axis.max + max - (axis.max - axis.min) : undefined\n  };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\nfunction calcRelativeConstraints(layoutBox, _ref21) {\n  var top = _ref21.top,\n    left = _ref21.left,\n    bottom = _ref21.bottom,\n    right = _ref21.right;\n  return {\n    x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n    y: calcRelativeAxisConstraints(layoutBox.y, top, bottom)\n  };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n  var min = constraintsAxis.min - layoutAxis.min;\n  var max = constraintsAxis.max - layoutAxis.max;\n  // If the constraints axis is actually smaller than the layout axis then we can\n  // flip the constraints\n  if (constraintsAxis.max - constraintsAxis.min < layoutAxis.max - layoutAxis.min) {\n    var _ref22 = [max, min];\n    min = _ref22[0];\n    max = _ref22[1];\n  }\n  return {\n    min: min,\n    max: max\n  };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n  return {\n    x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n    y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y)\n  };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\nfunction calcOrigin(source, target) {\n  var origin = 0.5;\n  var sourceLength = calcLength(source);\n  var targetLength = calcLength(target);\n  if (targetLength > sourceLength) {\n    origin = indexLegacy.progress(target.min, target.max - sourceLength, source.min);\n  } else if (sourceLength > targetLength) {\n    origin = indexLegacy.progress(source.min, source.max - targetLength, target.min);\n  }\n  return indexLegacy.clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\nfunction rebaseAxisConstraints(layout, constraints) {\n  var relativeConstraints = {};\n  if (constraints.min !== undefined) {\n    relativeConstraints.min = constraints.min - layout.min;\n  }\n  if (constraints.max !== undefined) {\n    relativeConstraints.max = constraints.max - layout.min;\n  }\n  return relativeConstraints;\n}\nvar defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\nfunction resolveDragElastic() {\n  var dragElastic = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultElastic;\n  if (dragElastic === false) {\n    dragElastic = 0;\n  } else if (dragElastic === true) {\n    dragElastic = defaultElastic;\n  }\n  return {\n    x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n    y: resolveAxisElastic(dragElastic, \"top\", \"bottom\")\n  };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n  return {\n    min: resolvePointElastic(dragElastic, minLabel),\n    max: resolvePointElastic(dragElastic, maxLabel)\n  };\n}\nfunction resolvePointElastic(dragElastic, label) {\n  return typeof dragElastic === \"number\" ? dragElastic : dragElastic[label] || 0;\n}\nfunction eachAxis(callback) {\n  return [callback(\"x\"), callback(\"y\")];\n}\nvar elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\nvar VisualElementDragControls = /*#__PURE__*/function () {\n  function VisualElementDragControls(visualElement) {\n    _classCallCheck(this, VisualElementDragControls);\n    // This is a reference to the global drag gesture lock, ensuring only one component\n    // can \"capture\" the drag of one or both axes.\n    // TODO: Look into moving this into pansession?\n    this.openGlobalLock = null;\n    this.isDragging = false;\n    this.currentDirection = null;\n    this.originPoint = {\n      x: 0,\n      y: 0\n    };\n    /**\n     * The permitted boundaries of travel, in pixels.\n     */\n    this.constraints = false;\n    this.hasMutatedConstraints = false;\n    /**\n     * The per-axis resolved elastic values.\n     */\n    this.elastic = indexLegacy.createBox();\n    this.visualElement = visualElement;\n  }\n  _createClass(VisualElementDragControls, [{\n    key: \"start\",\n    value: function start(originEvent) {\n      var _this10 = this;\n      var _ref23 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref23$snapToCursor = _ref23.snapToCursor,\n        snapToCursor = _ref23$snapToCursor === void 0 ? false : _ref23$snapToCursor;\n      /**\n       * Don't start dragging if this component is exiting\n       */\n      var presenceContext = this.visualElement.presenceContext;\n      if (presenceContext && presenceContext.isPresent === false) return;\n      var onSessionStart = function onSessionStart(event) {\n        // Stop any animations on both axis values immediately. This allows the user to throw and catch\n        // the component.\n        _this10.stopAnimation();\n        if (snapToCursor) {\n          _this10.snapToCursor(extractEventInfo(event, \"page\").point);\n        }\n      };\n      var onStart = function onStart(event, info) {\n        // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n        var _this10$getProps = _this10.getProps(),\n          drag = _this10$getProps.drag,\n          dragPropagation = _this10$getProps.dragPropagation,\n          onDragStart = _this10$getProps.onDragStart;\n        if (drag && !dragPropagation) {\n          if (_this10.openGlobalLock) _this10.openGlobalLock();\n          _this10.openGlobalLock = getGlobalLock(drag);\n          // If we don 't have the lock, don't start dragging\n          if (!_this10.openGlobalLock) return;\n        }\n        _this10.isDragging = true;\n        _this10.currentDirection = null;\n        _this10.resolveConstraints();\n        if (_this10.visualElement.projection) {\n          _this10.visualElement.projection.isAnimationBlocked = true;\n          _this10.visualElement.projection.target = undefined;\n        }\n        /**\n         * Record gesture origin\n         */\n        eachAxis(function (axis) {\n          var current = _this10.getAxisMotionValue(axis).get() || 0;\n          /**\n           * If the MotionValue is a percentage value convert to px\n           */\n          if (indexLegacy.percent.test(current)) {\n            var projection = _this10.visualElement.projection;\n            if (projection && projection.layout) {\n              var measuredAxis = projection.layout.layoutBox[axis];\n              if (measuredAxis) {\n                var length = calcLength(measuredAxis);\n                current = length * (parseFloat(current) / 100);\n              }\n            }\n          }\n          _this10.originPoint[axis] = current;\n        });\n        // Fire onDragStart event\n        if (onDragStart) {\n          indexLegacy.frame.update(function () {\n            return onDragStart(event, info);\n          }, false, true);\n        }\n        var animationState = _this10.visualElement.animationState;\n        animationState && animationState.setActive(\"whileDrag\", true);\n      };\n      var onMove = function onMove(event, info) {\n        // latestPointerEvent = event\n        var _this10$getProps2 = _this10.getProps(),\n          dragPropagation = _this10$getProps2.dragPropagation,\n          dragDirectionLock = _this10$getProps2.dragDirectionLock,\n          onDirectionLock = _this10$getProps2.onDirectionLock,\n          onDrag = _this10$getProps2.onDrag; // If we didn't successfully receive the gesture lock, early return.\n        if (!dragPropagation && !_this10.openGlobalLock) return;\n        var offset = info.offset; // Attempt to detect drag direction if directionLock is true\n        if (dragDirectionLock && _this10.currentDirection === null) {\n          _this10.currentDirection = getCurrentDirection(offset);\n          // If we've successfully set a direction, notify listener\n          if (_this10.currentDirection !== null) {\n            onDirectionLock && onDirectionLock(_this10.currentDirection);\n          }\n          return;\n        }\n        // Update each point with the latest position\n        _this10.updateAxis(\"x\", info.point, offset);\n        _this10.updateAxis(\"y\", info.point, offset);\n        /**\n         * Ideally we would leave the renderer to fire naturally at the end of\n         * this frame but if the element is about to change layout as the result\n         * of a re-render we want to ensure the browser can read the latest\n         * bounding box to ensure the pointer and element don't fall out of sync.\n         */\n        _this10.visualElement.render();\n        /**\n         * This must fire after the render call as it might trigger a state\n         * change which itself might trigger a layout update.\n         */\n        onDrag && onDrag(event, info);\n      };\n      var onSessionEnd = function onSessionEnd(event, info) {\n        return _this10.stop(event, info);\n      };\n      this.panSession = new PanSession(originEvent, {\n        onSessionStart: onSessionStart,\n        onStart: onStart,\n        onMove: onMove,\n        onSessionEnd: onSessionEnd\n      }, {\n        transformPagePoint: this.visualElement.getTransformPagePoint()\n      });\n    }\n  }, {\n    key: \"stop\",\n    value: function stop(event, info) {\n      var isDragging = this.isDragging;\n      this.cancel();\n      if (!isDragging) return;\n      var velocity = info.velocity;\n      this.startAnimation(velocity);\n      var _this$getProps = this.getProps(),\n        onDragEnd = _this$getProps.onDragEnd;\n      if (onDragEnd) {\n        indexLegacy.frame.update(function () {\n          return onDragEnd(event, info);\n        });\n      }\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      this.isDragging = false;\n      var _this$visualElement = this.visualElement,\n        projection = _this$visualElement.projection,\n        animationState = _this$visualElement.animationState;\n      if (projection) {\n        projection.isAnimationBlocked = false;\n      }\n      this.panSession && this.panSession.end();\n      this.panSession = undefined;\n      var _this$getProps2 = this.getProps(),\n        dragPropagation = _this$getProps2.dragPropagation;\n      if (!dragPropagation && this.openGlobalLock) {\n        this.openGlobalLock();\n        this.openGlobalLock = null;\n      }\n      animationState && animationState.setActive(\"whileDrag\", false);\n    }\n  }, {\n    key: \"updateAxis\",\n    value: function updateAxis(axis, _point, offset) {\n      var _this$getProps3 = this.getProps(),\n        drag = _this$getProps3.drag; // If we're not dragging this axis, do an early return.\n      if (!offset || !shouldDrag(axis, drag, this.currentDirection)) return;\n      var axisValue = this.getAxisMotionValue(axis);\n      var next = this.originPoint[axis] + offset[axis];\n      // Apply constraints\n      if (this.constraints && this.constraints[axis]) {\n        next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n      }\n      axisValue.set(next);\n    }\n  }, {\n    key: \"resolveConstraints\",\n    value: function resolveConstraints() {\n      var _this11 = this;\n      var _this$getProps4 = this.getProps(),\n        dragConstraints = _this$getProps4.dragConstraints,\n        dragElastic = _this$getProps4.dragElastic;\n      var _ref24 = this.visualElement.projection || {},\n        layout = _ref24.layout;\n      var prevConstraints = this.constraints;\n      if (dragConstraints && indexLegacy.isRefObject(dragConstraints)) {\n        if (!this.constraints) {\n          this.constraints = this.resolveRefConstraints();\n        }\n      } else {\n        if (dragConstraints && layout) {\n          this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n        } else {\n          this.constraints = false;\n        }\n      }\n      this.elastic = resolveDragElastic(dragElastic);\n      /**\n       * If we're outputting to external MotionValues, we want to rebase the measured constraints\n       * from viewport-relative to component-relative.\n       */\n      if (prevConstraints !== this.constraints && layout && this.constraints && !this.hasMutatedConstraints) {\n        eachAxis(function (axis) {\n          if (_this11.getAxisMotionValue(axis)) {\n            _this11.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], _this11.constraints[axis]);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"resolveRefConstraints\",\n    value: function resolveRefConstraints() {\n      var _this$getProps5 = this.getProps(),\n        constraints = _this$getProps5.dragConstraints,\n        onMeasureDragConstraints = _this$getProps5.onMeasureDragConstraints;\n      if (!constraints || !indexLegacy.isRefObject(constraints)) return false;\n      var constraintsElement = constraints.current;\n      indexLegacy.invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n      var projection = this.visualElement.projection; // TODO\n      if (!projection || !projection.layout) return false;\n      var constraintsBox = indexLegacy.measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n      var measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n      /**\n       * If there's an onMeasureDragConstraints listener we call it and\n       * if different constraints are returned, set constraints to that\n       */\n      if (onMeasureDragConstraints) {\n        var userConstraints = onMeasureDragConstraints(indexLegacy.convertBoxToBoundingBox(measuredConstraints));\n        this.hasMutatedConstraints = !!userConstraints;\n        if (userConstraints) {\n          measuredConstraints = indexLegacy.convertBoundingBoxToBox(userConstraints);\n        }\n      }\n      return measuredConstraints;\n    }\n  }, {\n    key: \"startAnimation\",\n    value: function startAnimation(velocity) {\n      var _this12 = this;\n      var _this$getProps6 = this.getProps(),\n        drag = _this$getProps6.drag,\n        dragMomentum = _this$getProps6.dragMomentum,\n        dragElastic = _this$getProps6.dragElastic,\n        dragTransition = _this$getProps6.dragTransition,\n        dragSnapToOrigin = _this$getProps6.dragSnapToOrigin,\n        onDragTransitionEnd = _this$getProps6.onDragTransitionEnd;\n      var constraints = this.constraints || {};\n      var momentumAnimations = eachAxis(function (axis) {\n        if (!shouldDrag(axis, drag, _this12.currentDirection)) {\n          return;\n        }\n        var transition = constraints && constraints[axis] || {};\n        if (dragSnapToOrigin) transition = {\n          min: 0,\n          max: 0\n        };\n        /**\n         * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n         * of spring animations so we should look into adding a disable spring option to `inertia`.\n         * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n         * using the value of `dragElastic`.\n         */\n        var bounceStiffness = dragElastic ? 200 : 1000000;\n        var bounceDamping = dragElastic ? 40 : 10000000;\n        var inertia = _objectSpread({\n          type: \"inertia\",\n          velocity: dragMomentum ? velocity[axis] : 0,\n          bounceStiffness: bounceStiffness,\n          bounceDamping: bounceDamping,\n          timeConstant: 750,\n          restDelta: 1,\n          restSpeed: 10\n        }, dragTransition, transition);\n        // If we're not animating on an externally-provided `MotionValue` we can use the\n        // component's animation controls which will handle interactions with whileHover (etc),\n        // otherwise we just have to animate the `MotionValue` itself.\n        return _this12.startAxisValueAnimation(axis, inertia);\n      });\n      // Run all animations and then resolve the new drag constraints.\n      return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n  }, {\n    key: \"startAxisValueAnimation\",\n    value: function startAxisValueAnimation(axis, transition) {\n      var axisValue = this.getAxisMotionValue(axis);\n      return axisValue.start(indexLegacy.animateMotionValue(axis, axisValue, 0, transition));\n    }\n  }, {\n    key: \"stopAnimation\",\n    value: function stopAnimation() {\n      var _this13 = this;\n      eachAxis(function (axis) {\n        return _this13.getAxisMotionValue(axis).stop();\n      });\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n  }, {\n    key: \"getAxisMotionValue\",\n    value: function getAxisMotionValue(axis) {\n      var dragKey = \"_drag\" + axis.toUpperCase();\n      var props = this.visualElement.getProps();\n      var externalMotionValue = props[dragKey];\n      return externalMotionValue ? externalMotionValue : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : undefined) || 0);\n    }\n  }, {\n    key: \"snapToCursor\",\n    value: function snapToCursor(point) {\n      var _this14 = this;\n      eachAxis(function (axis) {\n        var _this14$getProps = _this14.getProps(),\n          drag = _this14$getProps.drag; // If we're not dragging this axis, do an early return.\n        if (!shouldDrag(axis, drag, _this14.currentDirection)) return;\n        var projection = _this14.visualElement.projection;\n        var axisValue = _this14.getAxisMotionValue(axis);\n        if (projection && projection.layout) {\n          var _projection$layout$la = projection.layout.layoutBox[axis],\n            min = _projection$layout$la.min,\n            max = _projection$layout$la.max;\n          axisValue.set(point[axis] - indexLegacy.mix(min, max, 0.5));\n        }\n      });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n  }, {\n    key: \"scalePositionWithinConstraints\",\n    value: function scalePositionWithinConstraints() {\n      var _this15 = this;\n      if (!this.visualElement.current) return;\n      var _this$getProps7 = this.getProps(),\n        drag = _this$getProps7.drag,\n        dragConstraints = _this$getProps7.dragConstraints;\n      var projection = this.visualElement.projection;\n      if (!indexLegacy.isRefObject(dragConstraints) || !projection || !this.constraints) return;\n      /**\n       * Stop current animations as there can be visual glitching if we try to do\n       * this mid-animation\n       */\n      this.stopAnimation();\n      /**\n       * Record the relative position of the dragged element relative to the\n       * constraints box and save as a progress value.\n       */\n      var boxProgress = {\n        x: 0,\n        y: 0\n      };\n      eachAxis(function (axis) {\n        var axisValue = _this15.getAxisMotionValue(axis);\n        if (axisValue) {\n          var latest = axisValue.get();\n          boxProgress[axis] = calcOrigin({\n            min: latest,\n            max: latest\n          }, _this15.constraints[axis]);\n        }\n      });\n      /**\n       * Update the layout of this element and resolve the latest drag constraints\n       */\n      var _this$visualElement$g = this.visualElement.getProps(),\n        transformTemplate = _this$visualElement$g.transformTemplate;\n      this.visualElement.current.style.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n      projection.root && projection.root.updateScroll();\n      projection.updateLayout();\n      this.resolveConstraints();\n      /**\n       * For each axis, calculate the current progress of the layout axis\n       * within the new constraints.\n       */\n      eachAxis(function (axis) {\n        if (!shouldDrag(axis, drag, null)) return;\n        /**\n         * Calculate a new transform based on the previous box progress\n         */\n        var axisValue = _this15.getAxisMotionValue(axis);\n        var _this15$constraints$a = _this15.constraints[axis],\n          min = _this15$constraints$a.min,\n          max = _this15$constraints$a.max;\n        axisValue.set(indexLegacy.mix(min, max, boxProgress[axis]));\n      });\n    }\n  }, {\n    key: \"addListeners\",\n    value: function addListeners() {\n      var _this16 = this;\n      if (!this.visualElement.current) return;\n      elementDragControls.set(this.visualElement, this);\n      var element = this.visualElement.current;\n      /**\n       * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n       */\n      var stopPointerListener = addPointerEvent(element, \"pointerdown\", function (event) {\n        var _this16$getProps = _this16.getProps(),\n          drag = _this16$getProps.drag,\n          _this16$getProps$drag = _this16$getProps.dragListener,\n          dragListener = _this16$getProps$drag === void 0 ? true : _this16$getProps$drag;\n        drag && dragListener && _this16.start(event);\n      });\n      var measureDragConstraints = function measureDragConstraints() {\n        var _this16$getProps2 = _this16.getProps(),\n          dragConstraints = _this16$getProps2.dragConstraints;\n        if (indexLegacy.isRefObject(dragConstraints)) {\n          _this16.constraints = _this16.resolveRefConstraints();\n        }\n      };\n      var projection = this.visualElement.projection;\n      var stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n      if (projection && !projection.layout) {\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n      }\n      measureDragConstraints();\n      /**\n       * Attach a window resize listener to scale the draggable target within its defined\n       * constraints as the window resizes.\n       */\n      var stopResizeListener = addDomEvent(window, \"resize\", function () {\n        return _this16.scalePositionWithinConstraints();\n      });\n      /**\n       * If the element's layout changes, calculate the delta and apply that to\n       * the drag gesture's origin point.\n       */\n      var stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", function (_ref25) {\n        var delta = _ref25.delta,\n          hasLayoutChanged = _ref25.hasLayoutChanged;\n        if (_this16.isDragging && hasLayoutChanged) {\n          eachAxis(function (axis) {\n            var motionValue = _this16.getAxisMotionValue(axis);\n            if (!motionValue) return;\n            _this16.originPoint[axis] += delta[axis].translate;\n            motionValue.set(motionValue.get() + delta[axis].translate);\n          });\n          _this16.visualElement.render();\n        }\n      });\n      return function () {\n        stopResizeListener();\n        stopPointerListener();\n        stopMeasureLayoutListener();\n        stopLayoutUpdateListener && stopLayoutUpdateListener();\n      };\n    }\n  }, {\n    key: \"getProps\",\n    value: function getProps() {\n      var props = this.visualElement.getProps();\n      var _props$drag = props.drag,\n        drag = _props$drag === void 0 ? false : _props$drag,\n        _props$dragDirectionL = props.dragDirectionLock,\n        dragDirectionLock = _props$dragDirectionL === void 0 ? false : _props$dragDirectionL,\n        _props$dragPropagatio = props.dragPropagation,\n        dragPropagation = _props$dragPropagatio === void 0 ? false : _props$dragPropagatio,\n        _props$dragConstraint = props.dragConstraints,\n        dragConstraints = _props$dragConstraint === void 0 ? false : _props$dragConstraint,\n        _props$dragElastic = props.dragElastic,\n        dragElastic = _props$dragElastic === void 0 ? defaultElastic : _props$dragElastic,\n        _props$dragMomentum = props.dragMomentum,\n        dragMomentum = _props$dragMomentum === void 0 ? true : _props$dragMomentum;\n      return _objectSpread({}, props, {\n        drag: drag,\n        dragDirectionLock: dragDirectionLock,\n        dragPropagation: dragPropagation,\n        dragConstraints: dragConstraints,\n        dragElastic: dragElastic,\n        dragMomentum: dragMomentum\n      });\n    }\n  }]);\n  return VisualElementDragControls;\n}();\nfunction shouldDrag(direction, drag, currentDirection) {\n  return (drag === true || drag === direction) && (currentDirection === null || currentDirection === direction);\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset) {\n  var lockThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n  var direction = null;\n  if (Math.abs(offset.y) > lockThreshold) {\n    direction = \"y\";\n  } else if (Math.abs(offset.x) > lockThreshold) {\n    direction = \"x\";\n  }\n  return direction;\n}\nvar DragGesture = /*#__PURE__*/function (_Feature7) {\n  _inherits(DragGesture, _Feature7);\n  function DragGesture(node) {\n    var _this17;\n    _classCallCheck(this, DragGesture);\n    _this17 = _possibleConstructorReturn(this, _getPrototypeOf(DragGesture).call(this, node));\n    _this17.removeGroupControls = indexLegacy.noop;\n    _this17.removeListeners = indexLegacy.noop;\n    _this17.controls = new VisualElementDragControls(node);\n    return _this17;\n  }\n  _createClass(DragGesture, [{\n    key: \"mount\",\n    value: function mount() {\n      // If we've been provided a DragControls for manual control over the drag gesture,\n      // subscribe this component to it on mount.\n      var _this$node$getProps6 = this.node.getProps(),\n        dragControls = _this$node$getProps6.dragControls;\n      if (dragControls) {\n        this.removeGroupControls = dragControls.subscribe(this.controls);\n      }\n      this.removeListeners = this.controls.addListeners() || indexLegacy.noop;\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount() {\n      this.removeGroupControls();\n      this.removeListeners();\n    }\n  }]);\n  return DragGesture;\n}(Feature);\nvar asyncHandler = function asyncHandler(handler) {\n  return function (event, info) {\n    if (handler) {\n      indexLegacy.frame.update(function () {\n        return handler(event, info);\n      });\n    }\n  };\n};\nvar PanGesture = /*#__PURE__*/function (_Feature8) {\n  _inherits(PanGesture, _Feature8);\n  function PanGesture() {\n    var _this18;\n    _classCallCheck(this, PanGesture);\n    _this18 = _possibleConstructorReturn(this, _getPrototypeOf(PanGesture).apply(this, arguments));\n    _this18.removePointerDownListener = indexLegacy.noop;\n    return _this18;\n  }\n  _createClass(PanGesture, [{\n    key: \"onPointerDown\",\n    value: function onPointerDown(pointerDownEvent) {\n      this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), {\n        transformPagePoint: this.node.getTransformPagePoint()\n      });\n    }\n  }, {\n    key: \"createPanHandlers\",\n    value: function createPanHandlers() {\n      var _this19 = this;\n      var _this$node$getProps7 = this.node.getProps(),\n        onPanSessionStart = _this$node$getProps7.onPanSessionStart,\n        onPanStart = _this$node$getProps7.onPanStart,\n        onPan = _this$node$getProps7.onPan,\n        onPanEnd = _this$node$getProps7.onPanEnd;\n      return {\n        onSessionStart: asyncHandler(onPanSessionStart),\n        onStart: asyncHandler(onPanStart),\n        onMove: onPan,\n        onEnd: function onEnd(event, info) {\n          delete _this19.session;\n          if (onPanEnd) {\n            indexLegacy.frame.update(function () {\n              return onPanEnd(event, info);\n            });\n          }\n        }\n      };\n    }\n  }, {\n    key: \"mount\",\n    value: function mount() {\n      var _this20 = this;\n      this.removePointerDownListener = addPointerEvent(this.node.current, \"pointerdown\", function (event) {\n        return _this20.onPointerDown(event);\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.session && this.session.updateHandlers(this.createPanHandlers());\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount() {\n      this.removePointerDownListener();\n      this.session && this.session.end();\n    }\n  }]);\n  return PanGesture;\n}(Feature);\nvar borders = [\"TopLeft\", \"TopRight\", \"BottomLeft\", \"BottomRight\"];\nvar numBorders = borders.length;\nvar asNumber = function asNumber(value) {\n  return typeof value === \"string\" ? parseFloat(value) : value;\n};\nvar isPx = function isPx(value) {\n  return typeof value === \"number\" || indexLegacy.px.test(value);\n};\nfunction mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {\n  if (shouldCrossfadeOpacity) {\n    target.opacity = indexLegacy.mix(0,\n    // TODO Reinstate this if only child\n    lead.opacity !== undefined ? lead.opacity : 1, easeCrossfadeIn(progress));\n    target.opacityExit = indexLegacy.mix(follow.opacity !== undefined ? follow.opacity : 1, 0, easeCrossfadeOut(progress));\n  } else if (isOnlyMember) {\n    target.opacity = indexLegacy.mix(follow.opacity !== undefined ? follow.opacity : 1, lead.opacity !== undefined ? lead.opacity : 1, progress);\n  }\n  /**\n   * Mix border radius\n   */\n  for (var i = 0; i < numBorders; i++) {\n    var borderLabel = \"border\".concat(borders[i], \"Radius\");\n    var followRadius = getRadius(follow, borderLabel);\n    var leadRadius = getRadius(lead, borderLabel);\n    if (followRadius === undefined && leadRadius === undefined) continue;\n    followRadius || (followRadius = 0);\n    leadRadius || (leadRadius = 0);\n    var canMix = followRadius === 0 || leadRadius === 0 || isPx(followRadius) === isPx(leadRadius);\n    if (canMix) {\n      target[borderLabel] = Math.max(indexLegacy.mix(asNumber(followRadius), asNumber(leadRadius), progress), 0);\n      if (indexLegacy.percent.test(leadRadius) || indexLegacy.percent.test(followRadius)) {\n        target[borderLabel] += \"%\";\n      }\n    } else {\n      target[borderLabel] = leadRadius;\n    }\n  }\n  /**\n   * Mix rotation\n   */\n  if (follow.rotate || lead.rotate) {\n    target.rotate = indexLegacy.mix(follow.rotate || 0, lead.rotate || 0, progress);\n  }\n}\nfunction getRadius(values, radiusName) {\n  return values[radiusName] !== undefined ? values[radiusName] : values.borderRadius;\n}\n// /**\n//  * We only want to mix the background color if there's a follow element\n//  * that we're not crossfading opacity between. For instance with switch\n//  * AnimateSharedLayout animations, this helps the illusion of a continuous\n//  * element being animated but also cuts down on the number of paints triggered\n//  * for elements where opacity is doing that work for us.\n//  */\n// if (\n//     !hasFollowElement &&\n//     latestLeadValues.backgroundColor &&\n//     latestFollowValues.backgroundColor\n// ) {\n//     /**\n//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.\n//      * We could probably create a mixer that runs at the start of the animation but\n//      * the idea behind the crossfader is that it runs dynamically between two potentially\n//      * changing targets (ie opacity or borderRadius may be animating independently via variants)\n//      */\n//     leadState.backgroundColor = followState.backgroundColor = mixColor(\n//         latestFollowValues.backgroundColor as string,\n//         latestLeadValues.backgroundColor as string\n//     )(p)\n// }\nvar easeCrossfadeIn = compress(0, 0.5, indexLegacy.circOut);\nvar easeCrossfadeOut = compress(0.5, 0.95, indexLegacy.noop);\nfunction compress(min, max, easing) {\n  return function (p) {\n    // Could replace ifs with clamp\n    if (p < min) return 0;\n    if (p > max) return 1;\n    return easing(indexLegacy.progress(min, max, p));\n  };\n}\n\n/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyAxisInto(axis, originAxis) {\n  axis.min = originAxis.min;\n  axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyBoxInto(box, originBox) {\n  copyAxisInto(box.x, originBox.x);\n  copyAxisInto(box.y, originBox.y);\n}\n\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n  point -= translate;\n  point = indexLegacy.scalePoint(point, 1 / scale, originPoint);\n  if (boxScale !== undefined) {\n    point = indexLegacy.scalePoint(point, 1 / boxScale, originPoint);\n  }\n  return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */\nfunction removeAxisDelta(axis) {\n  var translate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var scale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var origin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.5;\n  var boxScale = arguments.length > 4 ? arguments[4] : undefined;\n  var originAxis = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : axis;\n  var sourceAxis = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : axis;\n  if (indexLegacy.percent.test(translate)) {\n    translate = parseFloat(translate);\n    var relativeProgress = indexLegacy.mix(sourceAxis.min, sourceAxis.max, translate / 100);\n    translate = relativeProgress - sourceAxis.min;\n  }\n  if (typeof translate !== \"number\") return;\n  var originPoint = indexLegacy.mix(originAxis.min, originAxis.max, origin);\n  if (axis === originAxis) originPoint -= translate;\n  axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n  axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeAxisTransforms(axis, transforms, _ref26, origin, sourceAxis) {\n  var _ref27 = _slicedToArray(_ref26, 3),\n    key = _ref27[0],\n    scaleKey = _ref27[1],\n    originKey = _ref27[2];\n  removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nvar xKeys = [\"x\", \"scaleX\", \"originX\"];\nvar yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeBoxTransforms(box, transforms, originBox, sourceBox) {\n  removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : undefined, sourceBox ? sourceBox.x : undefined);\n  removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : undefined, sourceBox ? sourceBox.y : undefined);\n}\nfunction isAxisDeltaZero(delta) {\n  return delta.translate === 0 && delta.scale === 1;\n}\nfunction isDeltaZero(delta) {\n  return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);\n}\nfunction boxEquals(a, b) {\n  return a.x.min === b.x.min && a.x.max === b.x.max && a.y.min === b.y.min && a.y.max === b.y.max;\n}\nfunction boxEqualsRounded(a, b) {\n  return Math.round(a.x.min) === Math.round(b.x.min) && Math.round(a.x.max) === Math.round(b.x.max) && Math.round(a.y.min) === Math.round(b.y.min) && Math.round(a.y.max) === Math.round(b.y.max);\n}\nfunction aspectRatio(box) {\n  return calcLength(box.x) / calcLength(box.y);\n}\nvar NodeStack = /*#__PURE__*/function () {\n  function NodeStack() {\n    _classCallCheck(this, NodeStack);\n    this.members = [];\n  }\n  _createClass(NodeStack, [{\n    key: \"add\",\n    value: function add(node) {\n      indexLegacy.addUniqueItem(this.members, node);\n      node.scheduleRender();\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(node) {\n      indexLegacy.removeItem(this.members, node);\n      if (node === this.prevLead) {\n        this.prevLead = undefined;\n      }\n      if (node === this.lead) {\n        var prevLead = this.members[this.members.length - 1];\n        if (prevLead) {\n          this.promote(prevLead);\n        }\n      }\n    }\n  }, {\n    key: \"relegate\",\n    value: function relegate(node) {\n      var indexOfNode = this.members.findIndex(function (member) {\n        return node === member;\n      });\n      if (indexOfNode === 0) return false;\n      /**\n       * Find the next projection node that is present\n       */\n      var prevLead;\n      for (var i = indexOfNode; i >= 0; i--) {\n        var member = this.members[i];\n        if (member.isPresent !== false) {\n          prevLead = member;\n          break;\n        }\n      }\n      if (prevLead) {\n        this.promote(prevLead);\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"promote\",\n    value: function promote(node, preserveFollowOpacity) {\n      var prevLead = this.lead;\n      if (node === prevLead) return;\n      this.prevLead = prevLead;\n      this.lead = node;\n      node.show();\n      if (prevLead) {\n        prevLead.instance && prevLead.scheduleRender();\n        node.scheduleRender();\n        node.resumeFrom = prevLead;\n        if (preserveFollowOpacity) {\n          node.resumeFrom.preserveOpacity = true;\n        }\n        if (prevLead.snapshot) {\n          node.snapshot = prevLead.snapshot;\n          node.snapshot.latestValues = prevLead.animationValues || prevLead.latestValues;\n        }\n        if (node.root && node.root.isUpdating) {\n          node.isLayoutDirty = true;\n        }\n        var crossfade = node.options.crossfade;\n        if (crossfade === false) {\n          prevLead.hide();\n        }\n        /**\n         * TODO:\n         *   - Test border radius when previous node was deleted\n         *   - boxShadow mixing\n         *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n         *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n         *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n         * ---\n         *   - Crossfade opacity of root nodes\n         *   - layoutId changes after animation\n         *   - layoutId changes mid animation\n         */\n      }\n    }\n  }, {\n    key: \"exitAnimationComplete\",\n    value: function exitAnimationComplete() {\n      this.members.forEach(function (node) {\n        var options = node.options,\n          resumingFrom = node.resumingFrom;\n        options.onExitComplete && options.onExitComplete();\n        if (resumingFrom) {\n          resumingFrom.options.onExitComplete && resumingFrom.options.onExitComplete();\n        }\n      });\n    }\n  }, {\n    key: \"scheduleRender\",\n    value: function scheduleRender() {\n      this.members.forEach(function (node) {\n        node.instance && node.scheduleRender(false);\n      });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n  }, {\n    key: \"removeLeadSnapshot\",\n    value: function removeLeadSnapshot() {\n      if (this.lead && this.lead.snapshot) {\n        this.lead.snapshot = undefined;\n      }\n    }\n  }]);\n  return NodeStack;\n}();\nfunction buildProjectionTransform(delta, treeScale, latestTransform) {\n  var transform = \"\";\n  /**\n   * The translations we use to calculate are always relative to the viewport coordinate space.\n   * But when we apply scales, we also scale the coordinate space of an element and its children.\n   * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n   * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n   */\n  var xTranslate = delta.x.translate / treeScale.x;\n  var yTranslate = delta.y.translate / treeScale.y;\n  if (xTranslate || yTranslate) {\n    transform = \"translate3d(\".concat(xTranslate, \"px, \").concat(yTranslate, \"px, 0) \");\n  }\n  /**\n   * Apply scale correction for the tree transform.\n   * This will apply scale to the screen-orientated axes.\n   */\n  if (treeScale.x !== 1 || treeScale.y !== 1) {\n    transform += \"scale(\".concat(1 / treeScale.x, \", \").concat(1 / treeScale.y, \") \");\n  }\n  if (latestTransform) {\n    var rotate = latestTransform.rotate,\n      rotateX = latestTransform.rotateX,\n      rotateY = latestTransform.rotateY;\n    if (rotate) transform += \"rotate(\".concat(rotate, \"deg) \");\n    if (rotateX) transform += \"rotateX(\".concat(rotateX, \"deg) \");\n    if (rotateY) transform += \"rotateY(\".concat(rotateY, \"deg) \");\n  }\n  /**\n   * Apply scale to match the size of the element to the size we want it.\n   * This will apply scale to the element-orientated axes.\n   */\n  var elementScaleX = delta.x.scale * treeScale.x;\n  var elementScaleY = delta.y.scale * treeScale.y;\n  if (elementScaleX !== 1 || elementScaleY !== 1) {\n    transform += \"scale(\".concat(elementScaleX, \", \").concat(elementScaleY, \")\");\n  }\n  return transform || \"none\";\n}\nvar compareByDepth = function compareByDepth(a, b) {\n  return a.depth - b.depth;\n};\nvar FlatTree = /*#__PURE__*/function () {\n  function FlatTree() {\n    _classCallCheck(this, FlatTree);\n    this.children = [];\n    this.isDirty = false;\n  }\n  _createClass(FlatTree, [{\n    key: \"add\",\n    value: function add(child) {\n      indexLegacy.addUniqueItem(this.children, child);\n      this.isDirty = true;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(child) {\n      indexLegacy.removeItem(this.children, child);\n      this.isDirty = true;\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(callback) {\n      this.isDirty && this.children.sort(compareByDepth);\n      this.isDirty = false;\n      this.children.forEach(callback);\n    }\n  }]);\n  return FlatTree;\n}();\n/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */\nvar globalProjectionState = {\n  /**\n   * Global flag as to whether the tree has animated since the last time\n   * we resized the window\n   */\n  hasAnimatedSinceResize: true,\n  /**\n   * We set this to true once, on the first update. Any nodes added to the tree beyond that\n   * update will be given a `data-projection-id` attribute.\n   */\n  hasEverUpdated: false\n};\nfunction record(data) {\n  if (window.MotionDebug) {\n    window.MotionDebug.record(data);\n  }\n}\nvar transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nvar animationTarget = 1000;\nvar id$1 = 0;\n/**\n * Use a mutable data object for debug data so as to not create a new\n * object every frame.\n */\nvar projectionFrameData = {\n  type: \"projectionFrame\",\n  totalNodes: 0,\n  resolvedTargetDeltas: 0,\n  recalculatedProjection: 0\n};\nfunction createProjectionNode(_ref28) {\n  var attachResizeListener = _ref28.attachResizeListener,\n    defaultParent = _ref28.defaultParent,\n    measureScroll = _ref28.measureScroll,\n    checkIsScrollRoot = _ref28.checkIsScrollRoot,\n    _resetTransform = _ref28.resetTransform;\n  return /*#__PURE__*/function () {\n    function ProjectionNode() {\n      var _this21 = this;\n      var latestValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent();\n      _classCallCheck(this, ProjectionNode);\n      /**\n       * A unique ID generated for every projection node.\n       */\n      this.id = id$1++;\n      /**\n       * An id that represents a unique session instigated by startUpdate.\n       */\n      this.animationId = 0;\n      /**\n       * A Set containing all this component's children. This is used to iterate\n       * through the children.\n       *\n       * TODO: This could be faster to iterate as a flat array stored on the root node.\n       */\n      this.children = new Set();\n      /**\n       * Options for the node. We use this to configure what kind of layout animations\n       * we should perform (if any).\n       */\n      this.options = {};\n      /**\n       * We use this to detect when its safe to shut down part of a projection tree.\n       * We have to keep projecting children for scale correction and relative projection\n       * until all their parents stop performing layout animations.\n       */\n      this.isTreeAnimating = false;\n      this.isAnimationBlocked = false;\n      /**\n       * Flag to true if we think this layout has been changed. We can't always know this,\n       * currently we set it to true every time a component renders, or if it has a layoutDependency\n       * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n       * and if one node is dirtied, they all are.\n       */\n      this.isLayoutDirty = false;\n      /**\n       * Flag to true if we think the projection calculations for this node needs\n       * recalculating as a result of an updated transform or layout animation.\n       */\n      this.isProjectionDirty = false;\n      /**\n       * Flag to true if the layout *or* transform has changed. This then gets propagated\n       * throughout the projection tree, forcing any element below to recalculate on the next frame.\n       */\n      this.isSharedProjectionDirty = false;\n      /**\n       * Flag transform dirty. This gets propagated throughout the whole tree but is only\n       * respected by shared nodes.\n       */\n      this.isTransformDirty = false;\n      /**\n       * Block layout updates for instant layout transitions throughout the tree.\n       */\n      this.updateManuallyBlocked = false;\n      this.updateBlockedByResize = false;\n      /**\n       * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n       * call.\n       */\n      this.isUpdating = false;\n      /**\n       * If this is an SVG element we currently disable projection transforms\n       */\n      this.isSVG = false;\n      /**\n       * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n       * its projection styles.\n       */\n      this.needsReset = false;\n      /**\n       * Flags whether this node should have its transform reset prior to measuring.\n       */\n      this.shouldResetTransform = false;\n      /**\n       * An object representing the calculated contextual/accumulated/tree scale.\n       * This will be used to scale calculcated projection transforms, as these are\n       * calculated in screen-space but need to be scaled for elements to layoutly\n       * make it to their calculated destinations.\n       *\n       * TODO: Lazy-init\n       */\n      this.treeScale = {\n        x: 1,\n        y: 1\n      };\n      /**\n       *\n       */\n      this.eventHandlers = new Map();\n      this.hasTreeAnimated = false;\n      // Note: Currently only running on root node\n      this.updateScheduled = false;\n      this.checkUpdateFailed = function () {\n        if (_this21.isUpdating) {\n          _this21.isUpdating = false;\n          _this21.clearAllSnapshots();\n        }\n      };\n      /**\n       * This is a multi-step process as shared nodes might be of different depths. Nodes\n       * are sorted by depth order, so we need to resolve the entire tree before moving to\n       * the next step.\n       */\n      this.updateProjection = function () {\n        /**\n         * Reset debug counts. Manually resetting rather than creating a new\n         * object each frame.\n         */\n        projectionFrameData.totalNodes = projectionFrameData.resolvedTargetDeltas = projectionFrameData.recalculatedProjection = 0;\n        _this21.nodes.forEach(propagateDirtyNodes);\n        _this21.nodes.forEach(resolveTargetDelta);\n        _this21.nodes.forEach(calcProjection);\n        _this21.nodes.forEach(cleanDirtyNodes);\n        record(projectionFrameData);\n      };\n      this.hasProjected = false;\n      this.isVisible = true;\n      this.animationProgress = 0;\n      /**\n       * Shared layout\n       */\n      // TODO Only running on root node\n      this.sharedNodes = new Map();\n      this.latestValues = latestValues;\n      this.root = parent ? parent.root || parent : this;\n      this.path = parent ? [].concat(_toConsumableArray(parent.path), [parent]) : [];\n      this.parent = parent;\n      this.depth = parent ? parent.depth + 1 : 0;\n      for (var i = 0; i < this.path.length; i++) {\n        this.path[i].shouldResetTransform = true;\n      }\n      if (this.root === this) this.nodes = new FlatTree();\n    }\n    _createClass(ProjectionNode, [{\n      key: \"addEventListener\",\n      value: function addEventListener(name, handler) {\n        if (!this.eventHandlers.has(name)) {\n          this.eventHandlers.set(name, new indexLegacy.SubscriptionManager());\n        }\n        return this.eventHandlers.get(name).add(handler);\n      }\n    }, {\n      key: \"notifyListeners\",\n      value: function notifyListeners(name) {\n        var subscriptionManager = this.eventHandlers.get(name);\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key3 = 1; _key3 < _len; _key3++) {\n          args[_key3 - 1] = arguments[_key3];\n        }\n        subscriptionManager && subscriptionManager.notify.apply(subscriptionManager, args);\n      }\n    }, {\n      key: \"hasListeners\",\n      value: function hasListeners(name) {\n        return this.eventHandlers.has(name);\n      }\n      /**\n       * Lifecycles\n       */\n    }, {\n      key: \"mount\",\n      value: function mount(instance) {\n        var _this22 = this;\n        var isLayoutDirty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.root.hasTreeAnimated;\n        if (this.instance) return;\n        this.isSVG = indexLegacy.isSVGElement(instance);\n        this.instance = instance;\n        var _this$options = this.options,\n          layoutId = _this$options.layoutId,\n          layout = _this$options.layout,\n          visualElement = _this$options.visualElement;\n        if (visualElement && !visualElement.current) {\n          visualElement.mount(instance);\n        }\n        this.root.nodes.add(this);\n        this.parent && this.parent.children.add(this);\n        if (isLayoutDirty && (layout || layoutId)) {\n          this.isLayoutDirty = true;\n        }\n        if (attachResizeListener) {\n          var cancelDelay;\n          var resizeUnblockUpdate = function resizeUnblockUpdate() {\n            return _this22.root.updateBlockedByResize = false;\n          };\n          attachResizeListener(instance, function () {\n            _this22.root.updateBlockedByResize = true;\n            cancelDelay && cancelDelay();\n            cancelDelay = indexLegacy.delay(resizeUnblockUpdate, 250);\n            if (globalProjectionState.hasAnimatedSinceResize) {\n              globalProjectionState.hasAnimatedSinceResize = false;\n              _this22.nodes.forEach(finishAnimation);\n            }\n          });\n        }\n        if (layoutId) {\n          this.root.registerSharedNode(layoutId, this);\n        }\n        // Only register the handler if it requires layout animation\n        if (this.options.animate !== false && visualElement && (layoutId || layout)) {\n          this.addEventListener(\"didUpdate\", function (_ref29) {\n            var delta = _ref29.delta,\n              hasLayoutChanged = _ref29.hasLayoutChanged,\n              hasRelativeTargetChanged = _ref29.hasRelativeTargetChanged,\n              newLayout = _ref29.layout;\n            if (_this22.isTreeAnimationBlocked()) {\n              _this22.target = undefined;\n              _this22.relativeTarget = undefined;\n              return;\n            }\n            // TODO: Check here if an animation exists\n            var layoutTransition = _this22.options.transition || visualElement.getDefaultTransition() || defaultLayoutTransition;\n            var _visualElement$getPro = visualElement.getProps(),\n              onLayoutAnimationStart = _visualElement$getPro.onLayoutAnimationStart,\n              onLayoutAnimationComplete = _visualElement$getPro.onLayoutAnimationComplete;\n            /**\n             * The target layout of the element might stay the same,\n             * but its position relative to its parent has changed.\n             */\n            var targetChanged = !_this22.targetLayout || !boxEqualsRounded(_this22.targetLayout, newLayout) || hasRelativeTargetChanged;\n            /**\n             * If the layout hasn't seemed to have changed, it might be that the\n             * element is visually in the same place in the document but its position\n             * relative to its parent has indeed changed. So here we check for that.\n             */\n            var hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n            if (_this22.options.layoutRoot || _this22.resumeFrom && _this22.resumeFrom.instance || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !_this22.currentAnimation)) {\n              if (_this22.resumeFrom) {\n                _this22.resumingFrom = _this22.resumeFrom;\n                _this22.resumingFrom.resumingFrom = undefined;\n              }\n              _this22.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n              var animationOptions = _objectSpread({}, indexLegacy.getValueTransition(layoutTransition, \"layout\"), {\n                onPlay: onLayoutAnimationStart,\n                onComplete: onLayoutAnimationComplete\n              });\n              if (visualElement.shouldReduceMotion || _this22.options.layoutRoot) {\n                animationOptions.delay = 0;\n                animationOptions.type = false;\n              }\n              _this22.startAnimation(animationOptions);\n            } else {\n              /**\n               * If the layout hasn't changed and we have an animation that hasn't started yet,\n               * finish it immediately. Otherwise it will be animating from a location\n               * that was probably never commited to screen and look like a jumpy box.\n               */\n              if (!hasLayoutChanged) {\n                finishAnimation(_this22);\n              }\n              if (_this22.isLead() && _this22.options.onExitComplete) {\n                _this22.options.onExitComplete();\n              }\n            }\n            _this22.targetLayout = newLayout;\n          });\n        }\n      }\n    }, {\n      key: \"unmount\",\n      value: function unmount() {\n        this.options.layoutId && this.willUpdate();\n        this.root.nodes.remove(this);\n        var stack = this.getStack();\n        stack && stack.remove(this);\n        this.parent && this.parent.children.delete(this);\n        this.instance = undefined;\n        indexLegacy.cancelFrame(this.updateProjection);\n      } // only on the root\n    }, {\n      key: \"blockUpdate\",\n      value: function blockUpdate() {\n        this.updateManuallyBlocked = true;\n      }\n    }, {\n      key: \"unblockUpdate\",\n      value: function unblockUpdate() {\n        this.updateManuallyBlocked = false;\n      }\n    }, {\n      key: \"isUpdateBlocked\",\n      value: function isUpdateBlocked() {\n        return this.updateManuallyBlocked || this.updateBlockedByResize;\n      }\n    }, {\n      key: \"isTreeAnimationBlocked\",\n      value: function isTreeAnimationBlocked() {\n        return this.isAnimationBlocked || this.parent && this.parent.isTreeAnimationBlocked() || false;\n      } // Note: currently only running on root node\n    }, {\n      key: \"startUpdate\",\n      value: function startUpdate() {\n        if (this.isUpdateBlocked()) return;\n        this.isUpdating = true;\n        this.nodes && this.nodes.forEach(resetRotation);\n        this.animationId++;\n      }\n    }, {\n      key: \"getTransformTemplate\",\n      value: function getTransformTemplate() {\n        var visualElement = this.options.visualElement;\n        return visualElement && visualElement.getProps().transformTemplate;\n      }\n    }, {\n      key: \"willUpdate\",\n      value: function willUpdate() {\n        var shouldNotifyListeners = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        this.root.hasTreeAnimated = true;\n        if (this.root.isUpdateBlocked()) {\n          this.options.onExitComplete && this.options.onExitComplete();\n          return;\n        }\n        !this.root.isUpdating && this.root.startUpdate();\n        if (this.isLayoutDirty) return;\n        this.isLayoutDirty = true;\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          node.shouldResetTransform = true;\n          node.updateScroll(\"snapshot\");\n          if (node.options.layoutRoot) {\n            node.willUpdate(false);\n          }\n        }\n        var _this$options2 = this.options,\n          layoutId = _this$options2.layoutId,\n          layout = _this$options2.layout;\n        if (layoutId === undefined && !layout) return;\n        var transformTemplate = this.getTransformTemplate();\n        this.prevTransformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, \"\") : undefined;\n        this.updateSnapshot();\n        shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n      }\n    }, {\n      key: \"update\",\n      value: function update() {\n        this.updateScheduled = false;\n        var updateWasBlocked = this.isUpdateBlocked();\n        // When doing an instant transition, we skip the layout update,\n        // but should still clean up the measurements so that the next\n        // snapshot could be taken correctly.\n        if (updateWasBlocked) {\n          this.unblockUpdate();\n          this.clearAllSnapshots();\n          this.nodes.forEach(clearMeasurements);\n          return;\n        }\n        if (!this.isUpdating) {\n          this.nodes.forEach(clearIsLayoutDirty);\n        }\n        this.isUpdating = false;\n        /**\n         * Write\n         */\n        this.nodes.forEach(resetTransformStyle);\n        /**\n         * Read ==================\n         */\n        // Update layout measurements of updated children\n        this.nodes.forEach(updateLayout);\n        /**\n         * Write\n         */\n        // Notify listeners that the layout is updated\n        this.nodes.forEach(notifyLayoutUpdate);\n        this.clearAllSnapshots();\n        /**\n         * Manually flush any pending updates. Ideally\n         * we could leave this to the following requestAnimationFrame but this seems\n         * to leave a flash of incorrectly styled content.\n         */\n        var now = performance.now();\n        indexLegacy.frameData.delta = indexLegacy.clamp(0, 1000 / 60, now - indexLegacy.frameData.timestamp);\n        indexLegacy.frameData.timestamp = now;\n        indexLegacy.frameData.isProcessing = true;\n        indexLegacy.steps.update.process(indexLegacy.frameData);\n        indexLegacy.steps.preRender.process(indexLegacy.frameData);\n        indexLegacy.steps.render.process(indexLegacy.frameData);\n        indexLegacy.frameData.isProcessing = false;\n      }\n    }, {\n      key: \"didUpdate\",\n      value: function didUpdate() {\n        var _this23 = this;\n        if (!this.updateScheduled) {\n          this.updateScheduled = true;\n          queueMicrotask(function () {\n            return _this23.update();\n          });\n        }\n      }\n    }, {\n      key: \"clearAllSnapshots\",\n      value: function clearAllSnapshots() {\n        this.nodes.forEach(clearSnapshot);\n        this.sharedNodes.forEach(removeLeadSnapshots);\n      }\n    }, {\n      key: \"scheduleUpdateProjection\",\n      value: function scheduleUpdateProjection() {\n        indexLegacy.frame.preRender(this.updateProjection, false, true);\n      }\n    }, {\n      key: \"scheduleCheckAfterUnmount\",\n      value: function scheduleCheckAfterUnmount() {\n        var _this24 = this;\n        /**\n         * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n         * we manually call didUpdate to give a chance to the siblings to animate.\n         * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n         */\n        indexLegacy.frame.postRender(function () {\n          if (_this24.isLayoutDirty) {\n            _this24.root.didUpdate();\n          } else {\n            _this24.root.checkUpdateFailed();\n          }\n        });\n      }\n      /**\n       * Update measurements\n       */\n    }, {\n      key: \"updateSnapshot\",\n      value: function updateSnapshot() {\n        if (this.snapshot || !this.instance) return;\n        this.snapshot = this.measure();\n      }\n    }, {\n      key: \"updateLayout\",\n      value: function updateLayout() {\n        if (!this.instance) return;\n        // TODO: Incorporate into a forwarded scroll offset\n        this.updateScroll();\n        if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {\n          return;\n        }\n        /**\n         * When a node is mounted, it simply resumes from the prevLead's\n         * snapshot instead of taking a new one, but the ancestors scroll\n         * might have updated while the prevLead is unmounted. We need to\n         * update the scroll again to make sure the layout we measure is\n         * up to date.\n         */\n        if (this.resumeFrom && !this.resumeFrom.instance) {\n          for (var i = 0; i < this.path.length; i++) {\n            var node = this.path[i];\n            node.updateScroll();\n          }\n        }\n        var prevLayout = this.layout;\n        this.layout = this.measure(false);\n        this.layoutCorrected = indexLegacy.createBox();\n        this.isLayoutDirty = false;\n        this.projectionDelta = undefined;\n        this.notifyListeners(\"measure\", this.layout.layoutBox);\n        var visualElement = this.options.visualElement;\n        visualElement && visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n      }\n    }, {\n      key: \"updateScroll\",\n      value: function updateScroll() {\n        var phase = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"measure\";\n        var needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n        if (this.scroll && this.scroll.animationId === this.root.animationId && this.scroll.phase === phase) {\n          needsMeasurement = false;\n        }\n        if (needsMeasurement) {\n          this.scroll = {\n            animationId: this.root.animationId,\n            phase: phase,\n            isRoot: checkIsScrollRoot(this.instance),\n            offset: measureScroll(this.instance)\n          };\n        }\n      }\n    }, {\n      key: \"resetTransform\",\n      value: function resetTransform() {\n        if (!_resetTransform) return;\n        var isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n        var hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n        var transformTemplate = this.getTransformTemplate();\n        var transformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, \"\") : undefined;\n        var transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n        if (isResetRequested && (hasProjection || indexLegacy.hasTransform(this.latestValues) || transformTemplateHasChanged)) {\n          _resetTransform(this.instance, transformTemplateValue);\n          this.shouldResetTransform = false;\n          this.scheduleRender();\n        }\n      }\n    }, {\n      key: \"measure\",\n      value: function measure() {\n        var removeTransform = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        var pageBox = this.measurePageBox();\n        var layoutBox = this.removeElementScroll(pageBox);\n        /**\n         * Measurements taken during the pre-render stage\n         * still have transforms applied so we remove them\n         * via calculation.\n         */\n        if (removeTransform) {\n          layoutBox = this.removeTransform(layoutBox);\n        }\n        roundBox(layoutBox);\n        return {\n          animationId: this.root.animationId,\n          measuredBox: pageBox,\n          layoutBox: layoutBox,\n          latestValues: {},\n          source: this.id\n        };\n      }\n    }, {\n      key: \"measurePageBox\",\n      value: function measurePageBox() {\n        var visualElement = this.options.visualElement;\n        if (!visualElement) return indexLegacy.createBox();\n        var box = visualElement.measureViewportBox();\n        // Remove viewport scroll to give page-relative coordinates\n        var scroll = this.root.scroll;\n        if (scroll) {\n          indexLegacy.translateAxis(box.x, scroll.offset.x);\n          indexLegacy.translateAxis(box.y, scroll.offset.y);\n        }\n        return box;\n      }\n    }, {\n      key: \"removeElementScroll\",\n      value: function removeElementScroll(box) {\n        var boxWithoutScroll = indexLegacy.createBox();\n        copyBoxInto(boxWithoutScroll, box);\n        /**\n         * Performance TODO: Keep a cumulative scroll offset down the tree\n         * rather than loop back up the path.\n         */\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          var scroll = node.scroll,\n            options = node.options;\n          if (node !== this.root && scroll && options.layoutScroll) {\n            /**\n             * If this is a new scroll root, we want to remove all previous scrolls\n             * from the viewport box.\n             */\n            if (scroll.isRoot) {\n              copyBoxInto(boxWithoutScroll, box);\n              var rootScroll = this.root.scroll;\n              /**\n               * Undo the application of page scroll that was originally added\n               * to the measured bounding box.\n               */\n              if (rootScroll) {\n                indexLegacy.translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n                indexLegacy.translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n              }\n            }\n            indexLegacy.translateAxis(boxWithoutScroll.x, scroll.offset.x);\n            indexLegacy.translateAxis(boxWithoutScroll.y, scroll.offset.y);\n          }\n        }\n        return boxWithoutScroll;\n      }\n    }, {\n      key: \"applyTransform\",\n      value: function applyTransform(box) {\n        var transformOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var withTransforms = indexLegacy.createBox();\n        copyBoxInto(withTransforms, box);\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {\n            indexLegacy.transformBox(withTransforms, {\n              x: -node.scroll.offset.x,\n              y: -node.scroll.offset.y\n            });\n          }\n          if (!indexLegacy.hasTransform(node.latestValues)) continue;\n          indexLegacy.transformBox(withTransforms, node.latestValues);\n        }\n        if (indexLegacy.hasTransform(this.latestValues)) {\n          indexLegacy.transformBox(withTransforms, this.latestValues);\n        }\n        return withTransforms;\n      }\n    }, {\n      key: \"removeTransform\",\n      value: function removeTransform(box) {\n        var boxWithoutTransform = indexLegacy.createBox();\n        copyBoxInto(boxWithoutTransform, box);\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          if (!node.instance) continue;\n          if (!indexLegacy.hasTransform(node.latestValues)) continue;\n          indexLegacy.hasScale(node.latestValues) && node.updateSnapshot();\n          var sourceBox = indexLegacy.createBox();\n          var nodeBox = node.measurePageBox();\n          copyBoxInto(sourceBox, nodeBox);\n          removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n        }\n        if (indexLegacy.hasTransform(this.latestValues)) {\n          removeBoxTransforms(boxWithoutTransform, this.latestValues);\n        }\n        return boxWithoutTransform;\n      }\n    }, {\n      key: \"setTargetDelta\",\n      value: function setTargetDelta(delta) {\n        this.targetDelta = delta;\n        this.root.scheduleUpdateProjection();\n        this.isProjectionDirty = true;\n      }\n    }, {\n      key: \"setOptions\",\n      value: function setOptions(options) {\n        this.options = _objectSpread({}, this.options, options, {\n          crossfade: options.crossfade !== undefined ? options.crossfade : true\n        });\n      }\n    }, {\n      key: \"clearMeasurements\",\n      value: function clearMeasurements() {\n        this.scroll = undefined;\n        this.layout = undefined;\n        this.snapshot = undefined;\n        this.prevTransformTemplateValue = undefined;\n        this.targetDelta = undefined;\n        this.target = undefined;\n        this.isLayoutDirty = false;\n      }\n    }, {\n      key: \"forceRelativeParentToResolveTarget\",\n      value: function forceRelativeParentToResolveTarget() {\n        if (!this.relativeParent) return;\n        /**\n         * If the parent target isn't up-to-date, force it to update.\n         * This is an unfortunate de-optimisation as it means any updating relative\n         * projection will cause all the relative parents to recalculate back\n         * up the tree.\n         */\n        if (this.relativeParent.resolvedRelativeTargetAt !== indexLegacy.frameData.timestamp) {\n          this.relativeParent.resolveTargetDelta(true);\n        }\n      }\n    }, {\n      key: \"resolveTargetDelta\",\n      value: function resolveTargetDelta() {\n        var forceRecalculation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        var _a;\n        /**\n         * Once the dirty status of nodes has been spread through the tree, we also\n         * need to check if we have a shared node of a different depth that has itself\n         * been dirtied.\n         */\n        var lead = this.getLead();\n        this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n        this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n        this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n        var isShared = Boolean(this.resumingFrom) || this !== lead;\n        /**\n         * We don't use transform for this step of processing so we don't\n         * need to check whether any nodes have changed transform.\n         */\n        var canSkip = !(forceRecalculation || isShared && this.isSharedProjectionDirty || this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) || this.attemptToResolveRelativeTarget);\n        if (canSkip) return;\n        var _this$options3 = this.options,\n          layout = _this$options3.layout,\n          layoutId = _this$options3.layoutId;\n        /**\n         * If we have no layout, we can't perform projection, so early return\n         */\n        if (!this.layout || !(layout || layoutId)) return;\n        this.resolvedRelativeTargetAt = indexLegacy.frameData.timestamp;\n        /**\n         * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n         * a relativeParent. This will allow a component to perform scale correction\n         * even if no animation has started.\n         */\n        // TODO If this is unsuccessful this currently happens every frame\n        if (!this.targetDelta && !this.relativeTarget) {\n          // TODO: This is a semi-repetition of further down this function, make DRY\n          var relativeParent = this.getClosestProjectingParent();\n          if (relativeParent && relativeParent.layout && this.animationProgress !== 1) {\n            this.relativeParent = relativeParent;\n            this.forceRelativeParentToResolveTarget();\n            this.relativeTarget = indexLegacy.createBox();\n            this.relativeTargetOrigin = indexLegacy.createBox();\n            calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n            copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n          } else {\n            this.relativeParent = this.relativeTarget = undefined;\n          }\n        }\n        /**\n         * If we have no relative target or no target delta our target isn't valid\n         * for this frame.\n         */\n        if (!this.relativeTarget && !this.targetDelta) return;\n        /**\n         * Lazy-init target data structure\n         */\n        if (!this.target) {\n          this.target = indexLegacy.createBox();\n          this.targetWithTransforms = indexLegacy.createBox();\n        }\n        /**\n         * If we've got a relative box for this component, resolve it into a target relative to the parent.\n         */\n        if (this.relativeTarget && this.relativeTargetOrigin && this.relativeParent && this.relativeParent.target) {\n          this.forceRelativeParentToResolveTarget();\n          calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n          /**\n           * If we've only got a targetDelta, resolve it into a target\n           */\n        } else if (this.targetDelta) {\n          if (Boolean(this.resumingFrom)) {\n            // TODO: This is creating a new object every frame\n            this.target = this.applyTransform(this.layout.layoutBox);\n          } else {\n            copyBoxInto(this.target, this.layout.layoutBox);\n          }\n          indexLegacy.applyBoxDelta(this.target, this.targetDelta);\n        } else {\n          /**\n           * If no target, use own layout as target\n           */\n          copyBoxInto(this.target, this.layout.layoutBox);\n        }\n        /**\n         * If we've been told to attempt to resolve a relative target, do so.\n         */\n        if (this.attemptToResolveRelativeTarget) {\n          this.attemptToResolveRelativeTarget = false;\n          var _relativeParent = this.getClosestProjectingParent();\n          if (_relativeParent && Boolean(_relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !_relativeParent.options.layoutScroll && _relativeParent.target && this.animationProgress !== 1) {\n            this.relativeParent = _relativeParent;\n            this.forceRelativeParentToResolveTarget();\n            this.relativeTarget = indexLegacy.createBox();\n            this.relativeTargetOrigin = indexLegacy.createBox();\n            calcRelativePosition(this.relativeTargetOrigin, this.target, _relativeParent.target);\n            copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n          } else {\n            this.relativeParent = this.relativeTarget = undefined;\n          }\n        }\n        /**\n         * Increase debug counter for resolved target deltas\n         */\n        projectionFrameData.resolvedTargetDeltas++;\n      }\n    }, {\n      key: \"getClosestProjectingParent\",\n      value: function getClosestProjectingParent() {\n        if (!this.parent || indexLegacy.hasScale(this.parent.latestValues) || indexLegacy.has2DTranslate(this.parent.latestValues)) {\n          return undefined;\n        }\n        if (this.parent.isProjecting()) {\n          return this.parent;\n        } else {\n          return this.parent.getClosestProjectingParent();\n        }\n      }\n    }, {\n      key: \"isProjecting\",\n      value: function isProjecting() {\n        return Boolean((this.relativeTarget || this.targetDelta || this.options.layoutRoot) && this.layout);\n      }\n    }, {\n      key: \"calcProjection\",\n      value: function calcProjection() {\n        var _a;\n        var lead = this.getLead();\n        var isShared = Boolean(this.resumingFrom) || this !== lead;\n        var canSkip = true;\n        /**\n         * If this is a normal layout animation and neither this node nor its nearest projecting\n         * is dirty then we can't skip.\n         */\n        if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n          canSkip = false;\n        }\n        /**\n         * If this is a shared layout animation and this node's shared projection is dirty then\n         * we can't skip.\n         */\n        if (isShared && (this.isSharedProjectionDirty || this.isTransformDirty)) {\n          canSkip = false;\n        }\n        /**\n         * If we have resolved the target this frame we must recalculate the\n         * projection to ensure it visually represents the internal calculations.\n         */\n        if (this.resolvedRelativeTargetAt === indexLegacy.frameData.timestamp) {\n          canSkip = false;\n        }\n        if (canSkip) return;\n        var _this$options4 = this.options,\n          layout = _this$options4.layout,\n          layoutId = _this$options4.layoutId;\n        /**\n         * If this section of the tree isn't animating we can\n         * delete our target sources for the following frame.\n         */\n        this.isTreeAnimating = Boolean(this.parent && this.parent.isTreeAnimating || this.currentAnimation || this.pendingAnimation);\n        if (!this.isTreeAnimating) {\n          this.targetDelta = this.relativeTarget = undefined;\n        }\n        if (!this.layout || !(layout || layoutId)) return;\n        /**\n         * Reset the corrected box with the latest values from box, as we're then going\n         * to perform mutative operations on it.\n         */\n        copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n        /**\n         * Record previous tree scales before updating.\n         */\n        var prevTreeScaleX = this.treeScale.x;\n        var prevTreeScaleY = this.treeScale.y;\n        /**\n         * Apply all the parent deltas to this box to produce the corrected box. This\n         * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n         */\n        indexLegacy.applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n        /**\n         * If this layer needs to perform scale correction but doesn't have a target,\n         * use the layout as the target.\n         */\n        if (lead.layout && !lead.target && (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n          lead.target = lead.layout.layoutBox;\n        }\n        var target = lead.target;\n        if (!target) {\n          /**\n           * If we don't have a target to project into, but we were previously\n           * projecting, we want to remove the stored transform and schedule\n           * a render to ensure the elements reflect the removed transform.\n           */\n          if (this.projectionTransform) {\n            this.projectionDelta = indexLegacy.createDelta();\n            this.projectionTransform = \"none\";\n            this.scheduleRender();\n          }\n          return;\n        }\n        if (!this.projectionDelta) {\n          this.projectionDelta = indexLegacy.createDelta();\n          this.projectionDeltaWithTransform = indexLegacy.createDelta();\n        }\n        var prevProjectionTransform = this.projectionTransform;\n        /**\n         * Update the delta between the corrected box and the target box before user-set transforms were applied.\n         * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n         * for our layout reprojection, but still allow them to be scaled correctly by the user.\n         * It might be that to simplify this we may want to accept that user-set scale is also corrected\n         * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n         * to allow people to choose whether these styles are corrected based on just the\n         * layout reprojection or the final bounding box.\n         */\n        calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n        this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n        if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {\n          this.hasProjected = true;\n          this.scheduleRender();\n          this.notifyListeners(\"projectionUpdate\", target);\n        }\n        /**\n         * Increase debug counter for recalculated projections\n         */\n        projectionFrameData.recalculatedProjection++;\n      }\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        this.isVisible = false;\n        // TODO: Schedule render\n      }\n    }, {\n      key: \"show\",\n      value: function show() {\n        this.isVisible = true;\n        // TODO: Schedule render\n      }\n    }, {\n      key: \"scheduleRender\",\n      value: function scheduleRender() {\n        var notifyAll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        this.options.scheduleRender && this.options.scheduleRender();\n        if (notifyAll) {\n          var stack = this.getStack();\n          stack && stack.scheduleRender();\n        }\n        if (this.resumingFrom && !this.resumingFrom.instance) {\n          this.resumingFrom = undefined;\n        }\n      }\n    }, {\n      key: \"setAnimationOrigin\",\n      value: function setAnimationOrigin(delta) {\n        var _this25 = this;\n        var hasOnlyRelativeTargetChanged = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var snapshot = this.snapshot;\n        var snapshotLatestValues = snapshot ? snapshot.latestValues : {};\n        var mixedValues = _objectSpread({}, this.latestValues);\n        var targetDelta = indexLegacy.createDelta();\n        if (!this.relativeParent || !this.relativeParent.options.layoutRoot) {\n          this.relativeTarget = this.relativeTargetOrigin = undefined;\n        }\n        this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n        var relativeLayout = indexLegacy.createBox();\n        var snapshotSource = snapshot ? snapshot.source : undefined;\n        var layoutSource = this.layout ? this.layout.source : undefined;\n        var isSharedLayoutAnimation = snapshotSource !== layoutSource;\n        var stack = this.getStack();\n        var isOnlyMember = !stack || stack.members.length <= 1;\n        var shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));\n        this.animationProgress = 0;\n        var prevRelativeTarget;\n        this.mixTargetDelta = function (latest) {\n          var progress = latest / 1000;\n          mixAxisDelta(targetDelta.x, delta.x, progress);\n          mixAxisDelta(targetDelta.y, delta.y, progress);\n          _this25.setTargetDelta(targetDelta);\n          if (_this25.relativeTarget && _this25.relativeTargetOrigin && _this25.layout && _this25.relativeParent && _this25.relativeParent.layout) {\n            calcRelativePosition(relativeLayout, _this25.layout.layoutBox, _this25.relativeParent.layout.layoutBox);\n            mixBox(_this25.relativeTarget, _this25.relativeTargetOrigin, relativeLayout, progress);\n            /**\n             * If this is an unchanged relative target we can consider the\n             * projection not dirty.\n             */\n            if (prevRelativeTarget && boxEquals(_this25.relativeTarget, prevRelativeTarget)) {\n              _this25.isProjectionDirty = false;\n            }\n            if (!prevRelativeTarget) prevRelativeTarget = indexLegacy.createBox();\n            copyBoxInto(prevRelativeTarget, _this25.relativeTarget);\n          }\n          if (isSharedLayoutAnimation) {\n            _this25.animationValues = mixedValues;\n            mixValues(mixedValues, snapshotLatestValues, _this25.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n          }\n          _this25.root.scheduleUpdateProjection();\n          _this25.scheduleRender();\n          _this25.animationProgress = progress;\n        };\n        this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n      }\n    }, {\n      key: \"startAnimation\",\n      value: function startAnimation(options) {\n        var _this26 = this;\n        this.notifyListeners(\"animationStart\");\n        this.currentAnimation && this.currentAnimation.stop();\n        if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n          this.resumingFrom.currentAnimation.stop();\n        }\n        if (this.pendingAnimation) {\n          indexLegacy.cancelFrame(this.pendingAnimation);\n          this.pendingAnimation = undefined;\n        }\n        /**\n         * Start the animation in the next frame to have a frame with progress 0,\n         * where the target is the same as when the animation started, so we can\n         * calculate the relative positions correctly for instant transitions.\n         */\n        this.pendingAnimation = indexLegacy.frame.update(function () {\n          globalProjectionState.hasAnimatedSinceResize = true;\n          _this26.currentAnimation = indexLegacy.animateSingleValue(0, animationTarget, _objectSpread({}, options, {\n            onUpdate: function onUpdate(latest) {\n              _this26.mixTargetDelta(latest);\n              options.onUpdate && options.onUpdate(latest);\n            },\n            onComplete: function onComplete() {\n              options.onComplete && options.onComplete();\n              _this26.completeAnimation();\n            }\n          }));\n          if (_this26.resumingFrom) {\n            _this26.resumingFrom.currentAnimation = _this26.currentAnimation;\n          }\n          _this26.pendingAnimation = undefined;\n        });\n      }\n    }, {\n      key: \"completeAnimation\",\n      value: function completeAnimation() {\n        if (this.resumingFrom) {\n          this.resumingFrom.currentAnimation = undefined;\n          this.resumingFrom.preserveOpacity = undefined;\n        }\n        var stack = this.getStack();\n        stack && stack.exitAnimationComplete();\n        this.resumingFrom = this.currentAnimation = this.animationValues = undefined;\n        this.notifyListeners(\"animationComplete\");\n      }\n    }, {\n      key: \"finishAnimation\",\n      value: function finishAnimation() {\n        if (this.currentAnimation) {\n          this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n          this.currentAnimation.stop();\n        }\n        this.completeAnimation();\n      }\n    }, {\n      key: \"applyTransformsToTarget\",\n      value: function applyTransformsToTarget() {\n        var lead = this.getLead();\n        var targetWithTransforms = lead.targetWithTransforms,\n          target = lead.target,\n          layout = lead.layout,\n          latestValues = lead.latestValues;\n        if (!targetWithTransforms || !target || !layout) return;\n        /**\n         * If we're only animating position, and this element isn't the lead element,\n         * then instead of projecting into the lead box we instead want to calculate\n         * a new target that aligns the two boxes but maintains the layout shape.\n         */\n        if (this !== lead && this.layout && layout && shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n          target = this.target || indexLegacy.createBox();\n          var xLength = calcLength(this.layout.layoutBox.x);\n          target.x.min = lead.target.x.min;\n          target.x.max = target.x.min + xLength;\n          var yLength = calcLength(this.layout.layoutBox.y);\n          target.y.min = lead.target.y.min;\n          target.y.max = target.y.min + yLength;\n        }\n        copyBoxInto(targetWithTransforms, target);\n        /**\n         * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n         * This is the final box that we will then project into by calculating a transform delta and\n         * applying it to the corrected box.\n         */\n        indexLegacy.transformBox(targetWithTransforms, latestValues);\n        /**\n         * Update the delta between the corrected box and the final target box, after\n         * user-set transforms are applied to it. This will be used by the renderer to\n         * create a transform style that will reproject the element from its layout layout\n         * into the desired bounding box.\n         */\n        calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n      }\n    }, {\n      key: \"registerSharedNode\",\n      value: function registerSharedNode(layoutId, node) {\n        if (!this.sharedNodes.has(layoutId)) {\n          this.sharedNodes.set(layoutId, new NodeStack());\n        }\n        var stack = this.sharedNodes.get(layoutId);\n        stack.add(node);\n        var config = node.options.initialPromotionConfig;\n        node.promote({\n          transition: config ? config.transition : undefined,\n          preserveFollowOpacity: config && config.shouldPreserveFollowOpacity ? config.shouldPreserveFollowOpacity(node) : undefined\n        });\n      }\n    }, {\n      key: \"isLead\",\n      value: function isLead() {\n        var stack = this.getStack();\n        return stack ? stack.lead === this : true;\n      }\n    }, {\n      key: \"getLead\",\n      value: function getLead() {\n        var _a;\n        var layoutId = this.options.layoutId;\n        return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n      }\n    }, {\n      key: \"getPrevLead\",\n      value: function getPrevLead() {\n        var _a;\n        var layoutId = this.options.layoutId;\n        return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n      }\n    }, {\n      key: \"getStack\",\n      value: function getStack() {\n        var layoutId = this.options.layoutId;\n        if (layoutId) return this.root.sharedNodes.get(layoutId);\n      }\n    }, {\n      key: \"promote\",\n      value: function promote() {\n        var _ref30 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          needsReset = _ref30.needsReset,\n          transition = _ref30.transition,\n          preserveFollowOpacity = _ref30.preserveFollowOpacity;\n        var stack = this.getStack();\n        if (stack) stack.promote(this, preserveFollowOpacity);\n        if (needsReset) {\n          this.projectionDelta = undefined;\n          this.needsReset = true;\n        }\n        if (transition) this.setOptions({\n          transition: transition\n        });\n      }\n    }, {\n      key: \"relegate\",\n      value: function relegate() {\n        var stack = this.getStack();\n        if (stack) {\n          return stack.relegate(this);\n        } else {\n          return false;\n        }\n      }\n    }, {\n      key: \"resetRotation\",\n      value: function resetRotation() {\n        var visualElement = this.options.visualElement;\n        if (!visualElement) return;\n        // If there's no detected rotation values, we can early return without a forced render.\n        var hasRotate = false;\n        /**\n         * An unrolled check for rotation values. Most elements don't have any rotation and\n         * skipping the nested loop and new object creation is 50% faster.\n         */\n        var latestValues = visualElement.latestValues;\n        if (latestValues.rotate || latestValues.rotateX || latestValues.rotateY || latestValues.rotateZ) {\n          hasRotate = true;\n        }\n        // If there's no rotation values, we don't need to do any more.\n        if (!hasRotate) return;\n        var resetValues = {};\n        // Check the rotate value of all axes and reset to 0\n        for (var i = 0; i < transformAxes.length; i++) {\n          var key = \"rotate\" + transformAxes[i];\n          // Record the rotation and then temporarily set it to 0\n          if (latestValues[key]) {\n            resetValues[key] = latestValues[key];\n            visualElement.setStaticValue(key, 0);\n          }\n        }\n        // Force a render of this element to apply the transform with all rotations\n        // set to 0.\n        visualElement.render();\n        // Put back all the values we reset\n        for (var _key4 in resetValues) {\n          visualElement.setStaticValue(_key4, resetValues[_key4]);\n        }\n        // Schedule a render for the next frame. This ensures we won't visually\n        // see the element with the reset rotate value applied.\n        visualElement.scheduleRender();\n      }\n    }, {\n      key: \"getProjectionStyles\",\n      value: function getProjectionStyles() {\n        var styleProp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var _a, _b;\n        // TODO: Return lifecycle-persistent object\n        var styles = {};\n        if (!this.instance || this.isSVG) return styles;\n        if (!this.isVisible) {\n          return {\n            visibility: \"hidden\"\n          };\n        } else {\n          styles.visibility = \"\";\n        }\n        var transformTemplate = this.getTransformTemplate();\n        if (this.needsReset) {\n          this.needsReset = false;\n          styles.opacity = \"\";\n          styles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n          styles.transform = transformTemplate ? transformTemplate(this.latestValues, \"\") : \"none\";\n          return styles;\n        }\n        var lead = this.getLead();\n        if (!this.projectionDelta || !this.layout || !lead.target) {\n          var emptyStyles = {};\n          if (this.options.layoutId) {\n            emptyStyles.opacity = this.latestValues.opacity !== undefined ? this.latestValues.opacity : 1;\n            emptyStyles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n          }\n          if (this.hasProjected && !indexLegacy.hasTransform(this.latestValues)) {\n            emptyStyles.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n            this.hasProjected = false;\n          }\n          return emptyStyles;\n        }\n        var valuesToRender = lead.animationValues || lead.latestValues;\n        this.applyTransformsToTarget();\n        styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n        if (transformTemplate) {\n          styles.transform = transformTemplate(valuesToRender, styles.transform);\n        }\n        var _this$projectionDelta = this.projectionDelta,\n          x = _this$projectionDelta.x,\n          y = _this$projectionDelta.y;\n        styles.transformOrigin = \"\".concat(x.origin * 100, \"% \").concat(y.origin * 100, \"% 0\");\n        if (lead.animationValues) {\n          /**\n           * If the lead component is animating, assign this either the entering/leaving\n           * opacity\n           */\n          styles.opacity = lead === this ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;\n        } else {\n          /**\n           * Or we're not animating at all, set the lead component to its layout\n           * opacity and other components to hidden.\n           */\n          styles.opacity = lead === this ? valuesToRender.opacity !== undefined ? valuesToRender.opacity : \"\" : valuesToRender.opacityExit !== undefined ? valuesToRender.opacityExit : 0;\n        }\n        /**\n         * Apply scale correction\n         */\n        for (var key in indexLegacy.scaleCorrectors) {\n          if (valuesToRender[key] === undefined) continue;\n          var _indexLegacy$scaleCor = indexLegacy.scaleCorrectors[key],\n            correct = _indexLegacy$scaleCor.correct,\n            applyTo = _indexLegacy$scaleCor.applyTo;\n          /**\n           * Only apply scale correction to the value if we have an\n           * active projection transform. Otherwise these values become\n           * vulnerable to distortion if the element changes size without\n           * a corresponding layout animation.\n           */\n          var corrected = styles.transform === \"none\" ? valuesToRender[key] : correct(valuesToRender[key], lead);\n          if (applyTo) {\n            var num = applyTo.length;\n            for (var i = 0; i < num; i++) {\n              styles[applyTo[i]] = corrected;\n            }\n          } else {\n            styles[key] = corrected;\n          }\n        }\n        /**\n         * Disable pointer events on follow components. This is to ensure\n         * that if a follow component covers a lead component it doesn't block\n         * pointer events on the lead.\n         */\n        if (this.options.layoutId) {\n          styles.pointerEvents = lead === this ? resolveMotionValue(styleProp.pointerEvents) || \"\" : \"none\";\n        }\n        return styles;\n      }\n    }, {\n      key: \"clearSnapshot\",\n      value: function clearSnapshot() {\n        this.resumeFrom = this.snapshot = undefined;\n      } // Only run on root\n    }, {\n      key: \"resetTree\",\n      value: function resetTree() {\n        this.root.nodes.forEach(function (node) {\n          var _a;\n          return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n        });\n        this.root.nodes.forEach(clearMeasurements);\n        this.root.sharedNodes.clear();\n      }\n    }]);\n    return ProjectionNode;\n  }();\n}\nfunction updateLayout(node) {\n  node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n  var _a;\n  var snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n  if (node.isLead() && node.layout && snapshot && node.hasListeners(\"didUpdate\")) {\n    var _node$layout = node.layout,\n      _layout = _node$layout.layoutBox,\n      measuredLayout = _node$layout.measuredBox;\n    var animationType = node.options.animationType;\n    var isShared = snapshot.source !== node.layout.source;\n    // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n    // animations for instance if layout=\"size\" and an element has only changed position\n    if (animationType === \"size\") {\n      eachAxis(function (axis) {\n        var axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n        var length = calcLength(axisSnapshot);\n        axisSnapshot.min = _layout[axis].min;\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    } else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, _layout)) {\n      eachAxis(function (axis) {\n        var axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n        var length = calcLength(_layout[axis]);\n        axisSnapshot.max = axisSnapshot.min + length;\n        /**\n         * Ensure relative target gets resized and rerendererd\n         */\n        if (node.relativeTarget && !node.currentAnimation) {\n          node.isProjectionDirty = true;\n          node.relativeTarget[axis].max = node.relativeTarget[axis].min + length;\n        }\n      });\n    }\n    var layoutDelta = indexLegacy.createDelta();\n    calcBoxDelta(layoutDelta, _layout, snapshot.layoutBox);\n    var visualDelta = indexLegacy.createDelta();\n    if (isShared) {\n      calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n    } else {\n      calcBoxDelta(visualDelta, _layout, snapshot.layoutBox);\n    }\n    var hasLayoutChanged = !isDeltaZero(layoutDelta);\n    var hasRelativeTargetChanged = false;\n    if (!node.resumeFrom) {\n      var relativeParent = node.getClosestProjectingParent();\n      /**\n       * If the relativeParent is itself resuming from a different element then\n       * the relative snapshot is not relavent\n       */\n      if (relativeParent && !relativeParent.resumeFrom) {\n        var parentSnapshot = relativeParent.snapshot,\n          parentLayout = relativeParent.layout;\n        if (parentSnapshot && parentLayout) {\n          var relativeSnapshot = indexLegacy.createBox();\n          calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n          var relativeLayout = indexLegacy.createBox();\n          calcRelativePosition(relativeLayout, _layout, parentLayout.layoutBox);\n          if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n            hasRelativeTargetChanged = true;\n          }\n          if (relativeParent.options.layoutRoot) {\n            node.relativeTarget = relativeLayout;\n            node.relativeTargetOrigin = relativeSnapshot;\n            node.relativeParent = relativeParent;\n          }\n        }\n      }\n    }\n    node.notifyListeners(\"didUpdate\", {\n      layout: _layout,\n      snapshot: snapshot,\n      delta: visualDelta,\n      layoutDelta: layoutDelta,\n      hasLayoutChanged: hasLayoutChanged,\n      hasRelativeTargetChanged: hasRelativeTargetChanged\n    });\n  } else if (node.isLead()) {\n    var onExitComplete = node.options.onExitComplete;\n    onExitComplete && onExitComplete();\n  }\n  /**\n   * Clearing transition\n   * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n   * and why we need it at all\n   */\n  node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n  /**\n   * Increase debug counter for nodes encountered this frame\n   */\n  projectionFrameData.totalNodes++;\n  if (!node.parent) return;\n  /**\n   * If this node isn't projecting, propagate isProjectionDirty. It will have\n   * no performance impact but it will allow the next child that *is* projecting\n   * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n   * correcting.\n   */\n  if (!node.isProjecting()) {\n    node.isProjectionDirty = node.parent.isProjectionDirty;\n  }\n  /**\n   * Propagate isSharedProjectionDirty and isTransformDirty\n   * throughout the whole tree. A future revision can take another look at\n   * this but for safety we still recalcualte shared nodes.\n   */\n  node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty || node.parent.isProjectionDirty || node.parent.isSharedProjectionDirty));\n  node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n  node.isProjectionDirty = node.isSharedProjectionDirty = node.isTransformDirty = false;\n}\nfunction clearSnapshot(node) {\n  node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n  node.clearMeasurements();\n}\nfunction clearIsLayoutDirty(node) {\n  node.isLayoutDirty = false;\n}\nfunction resetTransformStyle(node) {\n  var visualElement = node.options.visualElement;\n  if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n    visualElement.notify(\"BeforeLayoutMeasure\");\n  }\n  node.resetTransform();\n}\nfunction finishAnimation(node) {\n  node.finishAnimation();\n  node.targetDelta = node.relativeTarget = node.target = undefined;\n  node.isProjectionDirty = true;\n}\nfunction resolveTargetDelta(node) {\n  node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n  node.calcProjection();\n}\nfunction resetRotation(node) {\n  node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n  stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n  output.translate = indexLegacy.mix(delta.translate, 0, p);\n  output.scale = indexLegacy.mix(delta.scale, 1, p);\n  output.origin = delta.origin;\n  output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n  output.min = indexLegacy.mix(from.min, to.min, p);\n  output.max = indexLegacy.mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n  mixAxis(output.x, from.x, to.x, p);\n  mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n  return node.animationValues && node.animationValues.opacityExit !== undefined;\n}\nvar defaultLayoutTransition = {\n  duration: 0.45,\n  ease: [0.4, 0, 0.1, 1]\n};\nvar userAgentContains = function userAgentContains(string) {\n  return typeof navigator !== \"undefined\" && navigator.userAgent.toLowerCase().includes(string);\n};\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */\nvar roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\") ? Math.round : indexLegacy.noop;\nfunction roundAxis(axis) {\n  // Round to the nearest .5 pixels to support subpixel layouts\n  axis.min = roundPoint(axis.min);\n  axis.max = roundPoint(axis.max);\n}\nfunction roundBox(box) {\n  roundAxis(box.x);\n  roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n  return animationType === \"position\" || animationType === \"preserve-aspect\" && !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2);\n}\nvar DocumentProjectionNode = createProjectionNode({\n  attachResizeListener: function attachResizeListener(ref, notify) {\n    return addDomEvent(ref, \"resize\", notify);\n  },\n  measureScroll: function measureScroll() {\n    return {\n      x: document.documentElement.scrollLeft || document.body.scrollLeft,\n      y: document.documentElement.scrollTop || document.body.scrollTop\n    };\n  },\n  checkIsScrollRoot: function checkIsScrollRoot() {\n    return true;\n  }\n});\nvar rootProjectionNode = {\n  current: undefined\n};\nvar HTMLProjectionNode = createProjectionNode({\n  measureScroll: function measureScroll(instance) {\n    return {\n      x: instance.scrollLeft,\n      y: instance.scrollTop\n    };\n  },\n  defaultParent: function defaultParent() {\n    if (!rootProjectionNode.current) {\n      var documentNode = new DocumentProjectionNode({});\n      documentNode.mount(window);\n      documentNode.setOptions({\n        layoutScroll: true\n      });\n      rootProjectionNode.current = documentNode;\n    }\n    return rootProjectionNode.current;\n  },\n  resetTransform: function resetTransform(instance, value) {\n    instance.style.transform = value !== undefined ? value : \"none\";\n  },\n  checkIsScrollRoot: function checkIsScrollRoot(instance) {\n    return Boolean(window.getComputedStyle(instance).position === \"fixed\");\n  }\n});\nvar notify = function notify(node) {\n  return !node.isLayoutDirty && node.willUpdate(false);\n};\nfunction nodeGroup() {\n  var nodes = new Set();\n  var subscriptions = new WeakMap();\n  var dirtyAll = function dirtyAll() {\n    return nodes.forEach(notify);\n  };\n  return {\n    add: function add(node) {\n      nodes.add(node);\n      subscriptions.set(node, node.addEventListener(\"willUpdate\", dirtyAll));\n    },\n    remove: function remove(node) {\n      nodes.delete(node);\n      var unsubscribe = subscriptions.get(node);\n      if (unsubscribe) {\n        unsubscribe();\n        subscriptions.delete(node);\n      }\n      dirtyAll();\n    },\n    dirty: dirtyAll\n  };\n}\nfunction pixelsToPercent(pixels, axis) {\n  if (axis.max === axis.min) return 0;\n  return pixels / (axis.max - axis.min) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */\nvar correctBorderRadius = {\n  correct: function correct(latest, node) {\n    if (!node.target) return latest;\n    /**\n     * If latest is a string, if it's a percentage we can return immediately as it's\n     * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n     */\n    if (typeof latest === \"string\") {\n      if (indexLegacy.px.test(latest)) {\n        latest = parseFloat(latest);\n      } else {\n        return latest;\n      }\n    }\n    /**\n     * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n     * pixel value as a percentage of each axis\n     */\n    var x = pixelsToPercent(latest, node.target.x);\n    var y = pixelsToPercent(latest, node.target.y);\n    return \"\".concat(x, \"% \").concat(y, \"%\");\n  }\n};\nvar correctBoxShadow = {\n  correct: function correct(latest, _ref31) {\n    var treeScale = _ref31.treeScale,\n      projectionDelta = _ref31.projectionDelta;\n    var original = latest;\n    var shadow = indexLegacy.complex.parse(latest);\n    // TODO: Doesn't support multiple shadows\n    if (shadow.length > 5) return original;\n    var template = indexLegacy.complex.createTransformer(latest);\n    var offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n    // Calculate the overall context scale\n    var xScale = projectionDelta.x.scale * treeScale.x;\n    var yScale = projectionDelta.y.scale * treeScale.y;\n    shadow[0 + offset] /= xScale;\n    shadow[1 + offset] /= yScale;\n    /**\n     * Ideally we'd correct x and y scales individually, but because blur and\n     * spread apply to both we have to take a scale average and apply that instead.\n     * We could potentially improve the outcome of this by incorporating the ratio between\n     * the two scales.\n     */\n    var averageScale = indexLegacy.mix(xScale, yScale, 0.5);\n    // Blur\n    if (typeof shadow[2 + offset] === \"number\") shadow[2 + offset] /= averageScale;\n    // Spread\n    if (typeof shadow[3 + offset] === \"number\") shadow[3 + offset] /= averageScale;\n    return template(shadow);\n  }\n};\n\n/**\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\n * to access information about whether it's still present in the React tree.\n *\n * ```jsx\n * import { usePresence } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const [isPresent, safeToRemove] = usePresence()\n *\n *   useEffect(() => {\n *     !isPresent && setTimeout(safeToRemove, 1000)\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\n *\n * @public\n */\nfunction usePresence() {\n  var context = React.useContext(PresenceContext);\n  if (context === null) return [true, null];\n  var isPresent = context.isPresent,\n    onExitComplete = context.onExitComplete,\n    register = context.register; // It's safe to call the following hooks conditionally (after an early return) because the context will always\n  // either be null or non-null for the lifespan of the component.\n  var id = React.useId();\n  React.useEffect(function () {\n    return register(id);\n  }, []);\n  var safeToRemove = function safeToRemove() {\n    return onExitComplete && onExitComplete(id);\n  };\n  return !isPresent && onExitComplete ? [false, safeToRemove] : [true];\n}\n/**\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\n * There is no `safeToRemove` function.\n *\n * ```jsx\n * import { useIsPresent } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const isPresent = useIsPresent()\n *\n *   useEffect(() => {\n *     !isPresent && console.log(\"I've been removed!\")\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * @public\n */\nfunction useIsPresent() {\n  return isPresent(React.useContext(PresenceContext));\n}\nfunction isPresent(context) {\n  return context === null ? true : context.isPresent;\n}\nvar MeasureLayoutWithContext = /*#__PURE__*/function (_React__default$defau) {\n  _inherits(MeasureLayoutWithContext, _React__default$defau);\n  function MeasureLayoutWithContext() {\n    _classCallCheck(this, MeasureLayoutWithContext);\n    return _possibleConstructorReturn(this, _getPrototypeOf(MeasureLayoutWithContext).apply(this, arguments));\n  }\n  _createClass(MeasureLayoutWithContext, [{\n    key: \"componentDidMount\",\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */\n    value: function componentDidMount() {\n      var _this27 = this;\n      var _this$props = this.props,\n        visualElement = _this$props.visualElement,\n        layoutGroup = _this$props.layoutGroup,\n        switchLayoutGroup = _this$props.switchLayoutGroup,\n        layoutId = _this$props.layoutId;\n      var projection = visualElement.projection;\n      indexLegacy.addScaleCorrector(defaultScaleCorrectors);\n      if (projection) {\n        if (layoutGroup.group) layoutGroup.group.add(projection);\n        if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {\n          switchLayoutGroup.register(projection);\n        }\n        projection.root.didUpdate();\n        projection.addEventListener(\"animationComplete\", function () {\n          _this27.safeToRemove();\n        });\n        projection.setOptions(_objectSpread({}, projection.options, {\n          onExitComplete: function onExitComplete() {\n            return _this27.safeToRemove();\n          }\n        }));\n      }\n      globalProjectionState.hasEverUpdated = true;\n    }\n  }, {\n    key: \"getSnapshotBeforeUpdate\",\n    value: function getSnapshotBeforeUpdate(prevProps) {\n      var _this28 = this;\n      var _this$props2 = this.props,\n        layoutDependency = _this$props2.layoutDependency,\n        visualElement = _this$props2.visualElement,\n        drag = _this$props2.drag,\n        isPresent = _this$props2.isPresent;\n      var projection = visualElement.projection;\n      if (!projection) return null;\n      /**\n       * TODO: We use this data in relegate to determine whether to\n       * promote a previous element. There's no guarantee its presence data\n       * will have updated by this point - if a bug like this arises it will\n       * have to be that we markForRelegation and then find a new lead some other way,\n       * perhaps in didUpdate\n       */\n      projection.isPresent = isPresent;\n      if (drag || prevProps.layoutDependency !== layoutDependency || layoutDependency === undefined) {\n        projection.willUpdate();\n      } else {\n        this.safeToRemove();\n      }\n      if (prevProps.isPresent !== isPresent) {\n        if (isPresent) {\n          projection.promote();\n        } else if (!projection.relegate()) {\n          /**\n           * If there's another stack member taking over from this one,\n           * it's in charge of the exit animation and therefore should\n           * be in charge of the safe to remove. Otherwise we call it here.\n           */\n          indexLegacy.frame.postRender(function () {\n            var stack = projection.getStack();\n            if (!stack || !stack.members.length) {\n              _this28.safeToRemove();\n            }\n          });\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this29 = this;\n      var projection = this.props.visualElement.projection;\n      if (projection) {\n        projection.root.didUpdate();\n        queueMicrotask(function () {\n          if (!projection.currentAnimation && projection.isLead()) {\n            _this29.safeToRemove();\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this$props3 = this.props,\n        visualElement = _this$props3.visualElement,\n        layoutGroup = _this$props3.layoutGroup,\n        promoteContext = _this$props3.switchLayoutGroup;\n      var projection = visualElement.projection;\n      if (projection) {\n        projection.scheduleCheckAfterUnmount();\n        if (layoutGroup && layoutGroup.group) layoutGroup.group.remove(projection);\n        if (promoteContext && promoteContext.deregister) promoteContext.deregister(projection);\n      }\n    }\n  }, {\n    key: \"safeToRemove\",\n    value: function safeToRemove() {\n      var safeToRemove = this.props.safeToRemove;\n      safeToRemove && safeToRemove();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n  return MeasureLayoutWithContext;\n}(React__default[\"default\"].Component);\nfunction MeasureLayout(props) {\n  var _usePresence = usePresence(),\n    _usePresence2 = _slicedToArray(_usePresence, 2),\n    isPresent = _usePresence2[0],\n    safeToRemove = _usePresence2[1];\n  var layoutGroup = React.useContext(LayoutGroupContext);\n  return React__default[\"default\"].createElement(MeasureLayoutWithContext, _objectSpread({}, props, {\n    layoutGroup: layoutGroup,\n    switchLayoutGroup: React.useContext(SwitchLayoutGroupContext),\n    isPresent: isPresent,\n    safeToRemove: safeToRemove\n  }));\n}\nvar defaultScaleCorrectors = {\n  borderRadius: _objectSpread({}, correctBorderRadius, {\n    applyTo: [\"borderTopLeftRadius\", \"borderTopRightRadius\", \"borderBottomLeftRadius\", \"borderBottomRightRadius\"]\n  }),\n  borderTopLeftRadius: correctBorderRadius,\n  borderTopRightRadius: correctBorderRadius,\n  borderBottomLeftRadius: correctBorderRadius,\n  borderBottomRightRadius: correctBorderRadius,\n  boxShadow: correctBoxShadow\n};\nvar drag = {\n  pan: {\n    Feature: PanGesture\n  },\n  drag: {\n    Feature: DragGesture,\n    ProjectionNode: HTMLProjectionNode,\n    MeasureLayout: MeasureLayout\n  }\n};\nvar createDomVisualElement = function createDomVisualElement(Component, options) {\n  return isSVGComponent(Component) ? new indexLegacy.SVGVisualElement(options, {\n    enableHardwareAcceleration: false\n  }) : new indexLegacy.HTMLVisualElement(options, {\n    enableHardwareAcceleration: true\n  });\n};\nvar layout = {\n  layout: {\n    ProjectionNode: HTMLProjectionNode,\n    MeasureLayout: MeasureLayout\n  }\n};\nvar preloadedFeatures = _objectSpread({}, animations, gestureAnimations, drag, layout);\n/**\n * HTML & SVG components, optimised for use with gestures and animation. These can be used as\n * drop-in replacements for any HTML & SVG component, all CSS & SVG properties are supported.\n *\n * @public\n */\nvar motion = /*@__PURE__*/createMotionProxy(function (Component, config) {\n  return createDomMotionConfig(Component, config, preloadedFeatures, createDomVisualElement);\n});\n/**\n * Create a DOM `motion` component with the provided string. This is primarily intended\n * as a full alternative to `motion` for consumers who have to support environments that don't\n * support `Proxy`.\n *\n * ```javascript\n * import { createDomMotionComponent } from \"framer-motion\"\n *\n * const motion = {\n *   div: createDomMotionComponent('div')\n * }\n * ```\n *\n * @public\n */\nfunction createDomMotionComponent(key) {\n  return createMotionComponent(createDomMotionConfig(key, {\n    forwardMotionProps: false\n  }, preloadedFeatures, createDomVisualElement));\n}\n\n/**\n * @public\n */\nvar m = createMotionProxy(createDomMotionConfig);\nfunction useIsMounted() {\n  var isMounted = React.useRef(false);\n  useIsomorphicLayoutEffect(function () {\n    isMounted.current = true;\n    return function () {\n      isMounted.current = false;\n    };\n  }, []);\n  return isMounted;\n}\nfunction useForceUpdate() {\n  var isMounted = useIsMounted();\n  var _React$useState = React.useState(0),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    forcedRenderCount = _React$useState2[0],\n    setForcedRenderCount = _React$useState2[1];\n  var forceRender = React.useCallback(function () {\n    isMounted.current && setForcedRenderCount(forcedRenderCount + 1);\n  }, [forcedRenderCount]);\n  /**\n   * Defer this to the end of the next animation frame in case there are multiple\n   * synchronous calls.\n   */\n  var deferredForceRender = React.useCallback(function () {\n    return indexLegacy.frame.postRender(forceRender);\n  }, [forceRender]);\n  return [deferredForceRender, forcedRenderCount];\n}\n\n/**\n * Measurement functionality has to be within a separate component\n * to leverage snapshot lifecycle.\n */\nvar PopChildMeasure = /*#__PURE__*/function (_React__namespace$Com) {\n  _inherits(PopChildMeasure, _React__namespace$Com);\n  function PopChildMeasure() {\n    _classCallCheck(this, PopChildMeasure);\n    return _possibleConstructorReturn(this, _getPrototypeOf(PopChildMeasure).apply(this, arguments));\n  }\n  _createClass(PopChildMeasure, [{\n    key: \"getSnapshotBeforeUpdate\",\n    value: function getSnapshotBeforeUpdate(prevProps) {\n      var element = this.props.childRef.current;\n      if (element && prevProps.isPresent && !this.props.isPresent) {\n        var size = this.props.sizeRef.current;\n        size.height = element.offsetHeight || 0;\n        size.width = element.offsetWidth || 0;\n        size.top = element.offsetTop;\n        size.left = element.offsetLeft;\n      }\n      return null;\n    }\n    /**\n     * Required with getSnapshotBeforeUpdate to stop React complaining.\n     */\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.props.children;\n    }\n  }]);\n  return PopChildMeasure;\n}(React__namespace.Component);\nfunction PopChild(_ref32) {\n  var children = _ref32.children,\n    isPresent = _ref32.isPresent;\n  var id = React.useId();\n  var ref = React.useRef(null);\n  var size = React.useRef({\n    width: 0,\n    height: 0,\n    top: 0,\n    left: 0\n  });\n  /**\n   * We create and inject a style block so we can apply this explicit\n   * sizing in a non-destructive manner by just deleting the style block.\n   *\n   * We can't apply size via render as the measurement happens\n   * in getSnapshotBeforeUpdate (post-render), likewise if we apply the\n   * styles directly on the DOM node, we might be overwriting\n   * styles set via the style prop.\n   */\n  React.useInsertionEffect(function () {\n    var _size$current = size.current,\n      width = _size$current.width,\n      height = _size$current.height,\n      top = _size$current.top,\n      left = _size$current.left;\n    if (isPresent || !ref.current || !width || !height) return;\n    ref.current.dataset.motionPopId = id;\n    var style = document.createElement(\"style\");\n    document.head.appendChild(style);\n    if (style.sheet) {\n      style.sheet.insertRule(\"\\n          [data-motion-pop-id=\\\"\".concat(id, \"\\\"] {\\n            position: absolute !important;\\n            width: \").concat(width, \"px !important;\\n            height: \").concat(height, \"px !important;\\n            top: \").concat(top, \"px !important;\\n            left: \").concat(left, \"px !important;\\n          }\\n        \"));\n    }\n    return function () {\n      document.head.removeChild(style);\n    };\n  }, [isPresent]);\n  return React__namespace.createElement(PopChildMeasure, {\n    isPresent: isPresent,\n    childRef: ref,\n    sizeRef: size\n  }, React__namespace.cloneElement(children, {\n    ref: ref\n  }));\n}\nvar PresenceChild = function PresenceChild(_ref33) {\n  var children = _ref33.children,\n    initial = _ref33.initial,\n    isPresent = _ref33.isPresent,\n    _onExitComplete = _ref33.onExitComplete,\n    custom = _ref33.custom,\n    presenceAffectsLayout = _ref33.presenceAffectsLayout,\n    mode = _ref33.mode;\n  var presenceChildren = useConstant(newChildrenMap);\n  var id = React.useId();\n  var context = React.useMemo(function () {\n    return {\n      id: id,\n      initial: initial,\n      isPresent: isPresent,\n      custom: custom,\n      onExitComplete: function onExitComplete(childId) {\n        presenceChildren.set(childId, true);\n        var _iterator = _createForOfIteratorHelper(presenceChildren.values()),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var isComplete = _step.value;\n            if (!isComplete) return; // can stop searching when any is incomplete\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        _onExitComplete && _onExitComplete();\n      },\n      register: function register(childId) {\n        presenceChildren.set(childId, false);\n        return function () {\n          return presenceChildren.delete(childId);\n        };\n      }\n    };\n  },\n  /**\n   * If the presence of a child affects the layout of the components around it,\n   * we want to make a new context value to ensure they get re-rendered\n   * so they can detect that layout change.\n   */\n  presenceAffectsLayout ? undefined : [isPresent]);\n  React.useMemo(function () {\n    presenceChildren.forEach(function (_, key) {\n      return presenceChildren.set(key, false);\n    });\n  }, [isPresent]);\n  /**\n   * If there's no `motion` components to fire exit animations, we want to remove this\n   * component immediately.\n   */\n  React__namespace.useEffect(function () {\n    !isPresent && !presenceChildren.size && _onExitComplete && _onExitComplete();\n  }, [isPresent]);\n  if (mode === \"popLayout\") {\n    children = React__namespace.createElement(PopChild, {\n      isPresent: isPresent\n    }, children);\n  }\n  return React__namespace.createElement(PresenceContext.Provider, {\n    value: context\n  }, children);\n};\nfunction newChildrenMap() {\n  return new Map();\n}\nfunction useUnmountEffect(callback) {\n  return React.useEffect(function () {\n    return function () {\n      return callback();\n    };\n  }, []);\n}\nvar getChildKey = function getChildKey(child) {\n  return child.key || \"\";\n};\nfunction updateChildLookup(children, allChildren) {\n  children.forEach(function (child) {\n    var key = getChildKey(child);\n    allChildren.set(key, child);\n  });\n}\nfunction onlyElements(children) {\n  var filtered = [];\n  // We use forEach here instead of map as map mutates the component key by preprending `.$`\n  React.Children.forEach(children, function (child) {\n    if (React.isValidElement(child)) filtered.push(child);\n  });\n  return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nvar AnimatePresence = function AnimatePresence(_ref34) {\n  var children = _ref34.children,\n    custom = _ref34.custom,\n    _ref34$initial = _ref34.initial,\n    initial = _ref34$initial === void 0 ? true : _ref34$initial,\n    onExitComplete = _ref34.onExitComplete,\n    exitBeforeEnter = _ref34.exitBeforeEnter,\n    _ref34$presenceAffect = _ref34.presenceAffectsLayout,\n    presenceAffectsLayout = _ref34$presenceAffect === void 0 ? true : _ref34$presenceAffect,\n    _ref34$mode = _ref34.mode,\n    mode = _ref34$mode === void 0 ? \"sync\" : _ref34$mode;\n  indexLegacy.invariant(!exitBeforeEnter, \"Replace exitBeforeEnter with mode='wait'\");\n  // We want to force a re-render once all exiting animations have finished. We\n  // either use a local forceRender function, or one from a parent context if it exists.\n  var forceRender = React.useContext(LayoutGroupContext).forceRender || useForceUpdate()[0];\n  var isMounted = useIsMounted();\n  // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n  var filteredChildren = onlyElements(children);\n  var childrenToRender = filteredChildren;\n  var exitingChildren = React.useRef(new Map()).current;\n  // Keep a living record of the children we're actually rendering so we\n  // can diff to figure out which are entering and exiting\n  var presentChildren = React.useRef(childrenToRender);\n  // A lookup table to quickly reference components by key\n  var allChildren = React.useRef(new Map()).current;\n  // If this is the initial component render, just deal with logic surrounding whether\n  // we play onMount animations or not.\n  var isInitialRender = React.useRef(true);\n  useIsomorphicLayoutEffect(function () {\n    isInitialRender.current = false;\n    updateChildLookup(filteredChildren, allChildren);\n    presentChildren.current = childrenToRender;\n  });\n  useUnmountEffect(function () {\n    isInitialRender.current = true;\n    allChildren.clear();\n    exitingChildren.clear();\n  });\n  if (isInitialRender.current) {\n    return React__namespace.createElement(React__namespace.Fragment, null, childrenToRender.map(function (child) {\n      return React__namespace.createElement(PresenceChild, {\n        key: getChildKey(child),\n        isPresent: true,\n        initial: initial ? undefined : false,\n        presenceAffectsLayout: presenceAffectsLayout,\n        mode: mode\n      }, child);\n    }));\n  }\n  // If this is a subsequent render, deal with entering and exiting children\n  childrenToRender = _toConsumableArray(childrenToRender);\n  // Diff the keys of the currently-present and target children to update our\n  // exiting list.\n  var presentKeys = presentChildren.current.map(getChildKey);\n  var targetKeys = filteredChildren.map(getChildKey);\n  // Diff the present children with our target children and mark those that are exiting\n  var numPresent = presentKeys.length;\n  for (var i = 0; i < numPresent; i++) {\n    var key = presentKeys[i];\n    if (targetKeys.indexOf(key) === -1 && !exitingChildren.has(key)) {\n      exitingChildren.set(key, undefined);\n    }\n  }\n  // If we currently have exiting children, and we're deferring rendering incoming children\n  // until after all current children have exiting, empty the childrenToRender array\n  if (mode === \"wait\" && exitingChildren.size) {\n    childrenToRender = [];\n  }\n  // Loop through all currently exiting components and clone them to overwrite `animate`\n  // with any `exit` prop they might have defined.\n  exitingChildren.forEach(function (component, key) {\n    // If this component is actually entering again, early return\n    if (targetKeys.indexOf(key) !== -1) return;\n    var child = allChildren.get(key);\n    if (!child) return;\n    var insertionIndex = presentKeys.indexOf(key);\n    var exitingComponent = component;\n    if (!exitingComponent) {\n      var onExit = function onExit() {\n        allChildren.delete(key);\n        exitingChildren.delete(key);\n        // Remove this child from the present children\n        var removeIndex = presentChildren.current.findIndex(function (presentChild) {\n          return presentChild.key === key;\n        });\n        presentChildren.current.splice(removeIndex, 1);\n        // Defer re-rendering until all exiting children have indeed left\n        if (!exitingChildren.size) {\n          presentChildren.current = filteredChildren;\n          if (isMounted.current === false) return;\n          forceRender();\n          onExitComplete && onExitComplete();\n        }\n      };\n      exitingComponent = React__namespace.createElement(PresenceChild, {\n        key: getChildKey(child),\n        isPresent: false,\n        onExitComplete: onExit,\n        custom: custom,\n        presenceAffectsLayout: presenceAffectsLayout,\n        mode: mode\n      }, child);\n      exitingChildren.set(key, exitingComponent);\n    }\n    childrenToRender.splice(insertionIndex, 0, exitingComponent);\n  });\n  // Add `MotionContext` even to children that don't need it to ensure we're rendering\n  // the same tree between renders\n  childrenToRender = childrenToRender.map(function (child) {\n    var key = child.key;\n    return exitingChildren.has(key) ? child : React__namespace.createElement(PresenceChild, {\n      key: getChildKey(child),\n      isPresent: true,\n      presenceAffectsLayout: presenceAffectsLayout,\n      mode: mode\n    }, child);\n  });\n  if (process.env.NODE_ENV !== \"production\" && mode === \"wait\" && childrenToRender.length > 1) {\n    console.warn(\"You're attempting to animate multiple children within AnimatePresence, but its mode is set to \\\"wait\\\". This will lead to odd visual behaviour.\");\n  }\n  return React__namespace.createElement(React__namespace.Fragment, null, exitingChildren.size ? childrenToRender : childrenToRender.map(function (child) {\n    return React.cloneElement(child);\n  }));\n};\n\n/**\n * `MotionConfig` is used to set configuration options for all children `motion` components.\n *\n * ```jsx\n * import { motion, MotionConfig } from \"framer-motion\"\n *\n * export function App() {\n *   return (\n *     <MotionConfig transition={{ type: \"spring\" }}>\n *       <motion.div animate={{ x: 100 }} />\n *     </MotionConfig>\n *   )\n * }\n * ```\n *\n * @public\n */\nfunction MotionConfig(_ref35) {\n  var children = _ref35.children,\n    isValidProp = _ref35.isValidProp,\n    config = _objectWithoutProperties(_ref35, [\"children\", \"isValidProp\"]);\n  isValidProp && loadExternalIsValidProp(isValidProp);\n  /**\n   * Inherit props from any parent MotionConfig components\n   */\n  config = _objectSpread({}, React.useContext(MotionConfigContext), config);\n  /**\n   * Don't allow isStatic to change between renders as it affects how many hooks\n   * motion components fire.\n   */\n  config.isStatic = useConstant(function () {\n    return config.isStatic;\n  });\n  /**\n   * Creating a new config context object will re-render every `motion` component\n   * every time it renders. So we only want to create a new one sparingly.\n   */\n  var context = React.useMemo(function () {\n    return config;\n  }, [JSON.stringify(config.transition), config.transformPagePoint, config.reducedMotion]);\n  return React__namespace.createElement(MotionConfigContext.Provider, {\n    value: context\n  }, children);\n}\n\n/**\n * Used in conjunction with the `m` component to reduce bundle size.\n *\n * `m` is a version of the `motion` component that only loads functionality\n * critical for the initial render.\n *\n * `LazyMotion` can then be used to either synchronously or asynchronously\n * load animation and gesture support.\n *\n * ```jsx\n * // Synchronous loading\n * import { LazyMotion, m, domAnimation } from \"framer-motion\"\n *\n * function App() {\n *   return (\n *     <LazyMotion features={domAnimation}>\n *       <m.div animate={{ scale: 2 }} />\n *     </LazyMotion>\n *   )\n * }\n *\n * // Asynchronous loading\n * import { LazyMotion, m } from \"framer-motion\"\n *\n * function App() {\n *   return (\n *     <LazyMotion features={() => import('./path/to/domAnimation')}>\n *       <m.div animate={{ scale: 2 }} />\n *     </LazyMotion>\n *   )\n * }\n * ```\n *\n * @public\n */\nfunction LazyMotion(_ref36) {\n  var children = _ref36.children,\n    features = _ref36.features,\n    _ref36$strict = _ref36.strict,\n    strict = _ref36$strict === void 0 ? false : _ref36$strict;\n  var _React$useState3 = React.useState(!isLazyBundle(features)),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    setIsLoaded = _React$useState4[1];\n  var loadedRenderer = React.useRef(undefined);\n  /**\n   * If this is a synchronous load, load features immediately\n   */\n  if (!isLazyBundle(features)) {\n    var renderer = features.renderer,\n      loadedFeatures = _objectWithoutProperties(features, [\"renderer\"]);\n    loadedRenderer.current = renderer;\n    loadFeatures(loadedFeatures);\n  }\n  React.useEffect(function () {\n    if (isLazyBundle(features)) {\n      features().then(function (_ref37) {\n        var renderer = _ref37.renderer,\n          loadedFeatures = _objectWithoutProperties(_ref37, [\"renderer\"]);\n        loadFeatures(loadedFeatures);\n        loadedRenderer.current = renderer;\n        setIsLoaded(true);\n      });\n    }\n  }, []);\n  return React__namespace.createElement(LazyContext.Provider, {\n    value: {\n      renderer: loadedRenderer.current,\n      strict: strict\n    }\n  }, children);\n}\nfunction isLazyBundle(features) {\n  return typeof features === \"function\";\n}\n\n/**\n * Note: Still used by components generated by old versions of Framer\n *\n * @deprecated\n */\nvar DeprecatedLayoutGroupContext = React.createContext(null);\nvar shouldInheritGroup = function shouldInheritGroup(inherit) {\n  return inherit === true;\n};\nvar shouldInheritId = function shouldInheritId(inherit) {\n  return shouldInheritGroup(inherit === true) || inherit === \"id\";\n};\nvar LayoutGroup = function LayoutGroup(_ref38) {\n  var children = _ref38.children,\n    id = _ref38.id,\n    _ref38$inherit = _ref38.inherit,\n    inherit = _ref38$inherit === void 0 ? true : _ref38$inherit;\n  var layoutGroupContext = React.useContext(LayoutGroupContext);\n  var deprecatedLayoutGroupContext = React.useContext(DeprecatedLayoutGroupContext);\n  var _useForceUpdate = useForceUpdate(),\n    _useForceUpdate2 = _slicedToArray(_useForceUpdate, 2),\n    forceRender = _useForceUpdate2[0],\n    key = _useForceUpdate2[1];\n  var context = React.useRef(null);\n  var upstreamId = layoutGroupContext.id || deprecatedLayoutGroupContext;\n  if (context.current === null) {\n    if (shouldInheritId(inherit) && upstreamId) {\n      id = id ? upstreamId + \"-\" + id : upstreamId;\n    }\n    context.current = {\n      id: id,\n      group: shouldInheritGroup(inherit) ? layoutGroupContext.group || nodeGroup() : nodeGroup()\n    };\n  }\n  var memoizedContext = React.useMemo(function () {\n    return _objectSpread({}, context.current, {\n      forceRender: forceRender\n    });\n  }, [key]);\n  return React__namespace.createElement(LayoutGroupContext.Provider, {\n    value: memoizedContext\n  }, children);\n};\nvar ReorderContext = React.createContext(null);\nfunction checkReorder(order, value, offset, velocity) {\n  if (!velocity) return order;\n  var index = order.findIndex(function (item) {\n    return item.value === value;\n  });\n  if (index === -1) return order;\n  var nextOffset = velocity > 0 ? 1 : -1;\n  var nextItem = order[index + nextOffset];\n  if (!nextItem) return order;\n  var item = order[index];\n  var nextLayout = nextItem.layout;\n  var nextItemCenter = indexLegacy.mix(nextLayout.min, nextLayout.max, 0.5);\n  if (nextOffset === 1 && item.layout.max + offset > nextItemCenter || nextOffset === -1 && item.layout.min + offset < nextItemCenter) {\n    return indexLegacy.moveItem(order, index, index + nextOffset);\n  }\n  return order;\n}\nfunction ReorderGroup(_ref39, externalRef) {\n  var children = _ref39.children,\n    _ref39$as = _ref39.as,\n    as = _ref39$as === void 0 ? \"ul\" : _ref39$as,\n    _ref39$axis = _ref39.axis,\n    axis = _ref39$axis === void 0 ? \"y\" : _ref39$axis,\n    onReorder = _ref39.onReorder,\n    values = _ref39.values,\n    props = _objectWithoutProperties(_ref39, [\"children\", \"as\", \"axis\", \"onReorder\", \"values\"]);\n  var Component = useConstant(function () {\n    return motion(as);\n  });\n  var order = [];\n  var isReordering = React.useRef(false);\n  indexLegacy.invariant(Boolean(values), \"Reorder.Group must be provided a values prop\");\n  var context = {\n    axis: axis,\n    registerItem: function registerItem(value, layout) {\n      /**\n       * Ensure entries can't add themselves more than once\n       */\n      if (layout && order.findIndex(function (entry) {\n        return value === entry.value;\n      }) === -1) {\n        order.push({\n          value: value,\n          layout: layout[axis]\n        });\n        order.sort(compareMin);\n      }\n    },\n    updateOrder: function updateOrder(id, offset, velocity) {\n      if (isReordering.current) return;\n      var newOrder = checkReorder(order, id, offset, velocity);\n      if (order !== newOrder) {\n        isReordering.current = true;\n        onReorder(newOrder.map(getValue).filter(function (value) {\n          return values.indexOf(value) !== -1;\n        }));\n      }\n    }\n  };\n  React.useEffect(function () {\n    isReordering.current = false;\n  });\n  return React__namespace.createElement(Component, _objectSpread({}, props, {\n    ref: externalRef,\n    ignoreStrict: true\n  }), React__namespace.createElement(ReorderContext.Provider, {\n    value: context\n  }, children));\n}\nvar Group = React.forwardRef(ReorderGroup);\nfunction getValue(item) {\n  return item.value;\n}\nfunction compareMin(a, b) {\n  return a.layout.min - b.layout.min;\n}\n\n/**\n * Creates a `MotionValue` to track the state and velocity of a value.\n *\n * Usually, these are created automatically. For advanced use-cases, like use with `useTransform`, you can create `MotionValue`s externally and pass them into the animated component via the `style` prop.\n *\n * ```jsx\n * export const MyComponent = () => {\n *   const scale = useMotionValue(1)\n *\n *   return <motion.div style={{ scale }} />\n * }\n * ```\n *\n * @param initial - The initial state.\n *\n * @public\n */\nfunction useMotionValue(initial) {\n  var value = useConstant(function () {\n    return indexLegacy.motionValue(initial);\n  });\n  /**\n   * If this motion value is being used in static mode, like on\n   * the Framer canvas, force components to rerender when the motion\n   * value is updated.\n   */\n  var _React$useContext2 = React.useContext(MotionConfigContext),\n    isStatic = _React$useContext2.isStatic;\n  if (isStatic) {\n    var _React$useState5 = React.useState(initial),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      setLatest = _React$useState6[1];\n    React.useEffect(function () {\n      return value.on(\"change\", setLatest);\n    }, []);\n  }\n  return value;\n}\nfunction useCombineMotionValues(values, combineValues) {\n  /**\n   * Initialise the returned motion value. This remains the same between renders.\n   */\n  var value = useMotionValue(combineValues());\n  /**\n   * Create a function that will update the template motion value with the latest values.\n   * This is pre-bound so whenever a motion value updates it can schedule its\n   * execution in Framesync. If it's already been scheduled it won't be fired twice\n   * in a single frame.\n   */\n  var updateValue = function updateValue() {\n    return value.set(combineValues());\n  };\n  /**\n   * Synchronously update the motion value with the latest values during the render.\n   * This ensures that within a React render, the styles applied to the DOM are up-to-date.\n   */\n  updateValue();\n  /**\n   * Subscribe to all motion values found within the template. Whenever any of them change,\n   * schedule an update.\n   */\n  useIsomorphicLayoutEffect(function () {\n    var scheduleUpdate = function scheduleUpdate() {\n      return indexLegacy.frame.update(updateValue, false, true);\n    };\n    var subscriptions = values.map(function (v) {\n      return v.on(\"change\", scheduleUpdate);\n    });\n    return function () {\n      subscriptions.forEach(function (unsubscribe) {\n        return unsubscribe();\n      });\n      indexLegacy.cancelFrame(updateValue);\n    };\n  });\n  return value;\n}\nfunction useComputed(compute) {\n  /**\n   * Open session of collectMotionValues. Any MotionValue that calls get()\n   * will be saved into this array.\n   */\n  indexLegacy.collectMotionValues.current = [];\n  compute();\n  var value = useCombineMotionValues(indexLegacy.collectMotionValues.current, compute);\n  /**\n   * Synchronously close session of collectMotionValues.\n   */\n  indexLegacy.collectMotionValues.current = undefined;\n  return value;\n}\nfunction useTransform(input, inputRangeOrTransformer, outputRange, options) {\n  if (typeof input === \"function\") {\n    return useComputed(input);\n  }\n  var transformer = typeof inputRangeOrTransformer === \"function\" ? inputRangeOrTransformer : indexLegacy.transform(inputRangeOrTransformer, outputRange, options);\n  return Array.isArray(input) ? useListTransform(input, transformer) : useListTransform([input], function (_ref40) {\n    var _ref41 = _slicedToArray(_ref40, 1),\n      latest = _ref41[0];\n    return transformer(latest);\n  });\n}\nfunction useListTransform(values, transformer) {\n  var latest = useConstant(function () {\n    return [];\n  });\n  return useCombineMotionValues(values, function () {\n    latest.length = 0;\n    var numValues = values.length;\n    for (var i = 0; i < numValues; i++) {\n      latest[i] = values[i].get();\n    }\n    return transformer(latest);\n  });\n}\nfunction useDefaultMotionValue(value) {\n  var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return indexLegacy.isMotionValue(value) ? value : useMotionValue(defaultValue);\n}\nfunction ReorderItem(_ref42, externalRef) {\n  var children = _ref42.children,\n    _ref42$style = _ref42.style,\n    style = _ref42$style === void 0 ? {} : _ref42$style,\n    value = _ref42.value,\n    _ref42$as = _ref42.as,\n    as = _ref42$as === void 0 ? \"li\" : _ref42$as,\n    _onDrag = _ref42.onDrag,\n    _ref42$layout = _ref42.layout,\n    layout = _ref42$layout === void 0 ? true : _ref42$layout,\n    props = _objectWithoutProperties(_ref42, [\"children\", \"style\", \"value\", \"as\", \"onDrag\", \"layout\"]);\n  var Component = useConstant(function () {\n    return motion(as);\n  });\n  var context = React.useContext(ReorderContext);\n  var point = {\n    x: useDefaultMotionValue(style.x),\n    y: useDefaultMotionValue(style.y)\n  };\n  var zIndex = useTransform([point.x, point.y], function (_ref43) {\n    var _ref44 = _slicedToArray(_ref43, 2),\n      latestX = _ref44[0],\n      latestY = _ref44[1];\n    return latestX || latestY ? 1 : \"unset\";\n  });\n  var measuredLayout = React.useRef(null);\n  indexLegacy.invariant(Boolean(context), \"Reorder.Item must be a child of Reorder.Group\");\n  var axis = context.axis,\n    registerItem = context.registerItem,\n    updateOrder = context.updateOrder;\n  React.useEffect(function () {\n    registerItem(value, measuredLayout.current);\n  }, [context]);\n  return React__namespace.createElement(Component, _objectSpread({\n    drag: axis\n  }, props, {\n    dragSnapToOrigin: true,\n    style: _objectSpread({}, style, {\n      x: point.x,\n      y: point.y,\n      zIndex: zIndex\n    }),\n    layout: layout,\n    onDrag: function onDrag(event, gesturePoint) {\n      var velocity = gesturePoint.velocity;\n      velocity[axis] && updateOrder(value, point[axis].get(), velocity[axis]);\n      _onDrag && _onDrag(event, gesturePoint);\n    },\n    onLayoutMeasure: function onLayoutMeasure(measured) {\n      measuredLayout.current = measured;\n    },\n    ref: externalRef,\n    ignoreStrict: true\n  }), children);\n}\nvar Item = React.forwardRef(ReorderItem);\nvar Reorder = {\n  Group: Group,\n  Item: Item\n};\n\n/**\n * @public\n */\nvar domAnimation = _objectSpread({\n  renderer: createDomVisualElement\n}, animations, gestureAnimations);\n\n/**\n * @public\n */\nvar domMax = _objectSpread({}, domAnimation, drag, layout);\n\n/**\n * Combine multiple motion values into a new one using a string template literal.\n *\n * ```jsx\n * import {\n *   motion,\n *   useSpring,\n *   useMotionValue,\n *   useMotionTemplate\n * } from \"framer-motion\"\n *\n * function Component() {\n *   const shadowX = useSpring(0)\n *   const shadowY = useMotionValue(0)\n *   const shadow = useMotionTemplate`drop-shadow(${shadowX}px ${shadowY}px 20px rgba(0,0,0,0.3))`\n *\n *   return <motion.div style={{ filter: shadow }} />\n * }\n * ```\n *\n * @public\n */\nfunction useMotionTemplate(fragments) {\n  for (var _len2 = arguments.length, values = new Array(_len2 > 1 ? _len2 - 1 : 0), _key5 = 1; _key5 < _len2; _key5++) {\n    values[_key5 - 1] = arguments[_key5];\n  }\n  /**\n   * Create a function that will build a string from the latest motion values.\n   */\n  var numFragments = fragments.length;\n  function buildValue() {\n    var output = \"\";\n    for (var i = 0; i < numFragments; i++) {\n      output += fragments[i];\n      var value = values[i];\n      if (value) {\n        output += indexLegacy.isMotionValue(value) ? value.get() : value;\n      }\n    }\n    return output;\n  }\n  return useCombineMotionValues(values.filter(indexLegacy.isMotionValue), buildValue);\n}\n\n/**\n * Creates a `MotionValue` that, when `set`, will use a spring animation to animate to its new state.\n *\n * It can either work as a stand-alone `MotionValue` by initialising it with a value, or as a subscriber\n * to another `MotionValue`.\n *\n * @remarks\n *\n * ```jsx\n * const x = useSpring(0, { stiffness: 300 })\n * const y = useSpring(x, { damping: 10 })\n * ```\n *\n * @param inputValue - `MotionValue` or number. If provided a `MotionValue`, when the input `MotionValue` changes, the created `MotionValue` will spring towards that value.\n * @param springConfig - Configuration options for the spring.\n * @returns `MotionValue`\n *\n * @public\n */\nfunction useSpring(source) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _React$useContext3 = React.useContext(MotionConfigContext),\n    isStatic = _React$useContext3.isStatic;\n  var activeSpringAnimation = React.useRef(null);\n  var value = useMotionValue(indexLegacy.isMotionValue(source) ? source.get() : source);\n  var stopAnimation = function stopAnimation() {\n    if (activeSpringAnimation.current) {\n      activeSpringAnimation.current.stop();\n    }\n  };\n  React.useInsertionEffect(function () {\n    return value.attach(function (v, set) {\n      /**\n       * A more hollistic approach to this might be to use isStatic to fix VisualElement animations\n       * at that level, but this will work for now\n       */\n      if (isStatic) return set(v);\n      stopAnimation();\n      activeSpringAnimation.current = indexLegacy.animateValue(_objectSpread({\n        keyframes: [value.get(), v],\n        velocity: value.getVelocity(),\n        type: \"spring\",\n        restDelta: 0.001,\n        restSpeed: 0.01\n      }, config, {\n        onUpdate: set\n      }));\n      /**\n       * If we're between frames, resync the animation to the frameloop.\n       */\n      if (!indexLegacy.frameData.isProcessing) {\n        var delta = performance.now() - indexLegacy.frameData.timestamp;\n        if (delta < 30) {\n          activeSpringAnimation.current.time = indexLegacy.millisecondsToSeconds(delta);\n        }\n      }\n      return value.get();\n    }, stopAnimation);\n  }, [JSON.stringify(config)]);\n  useIsomorphicLayoutEffect(function () {\n    if (indexLegacy.isMotionValue(source)) {\n      return source.on(\"change\", function (v) {\n        return value.set(parseFloat(v));\n      });\n    }\n  }, [value]);\n  return value;\n}\nfunction useMotionValueEvent(value, event, callback) {\n  /**\n   * useInsertionEffect will create subscriptions before any other\n   * effects will run. Effects run upwards through the tree so it\n   * can be that binding a useLayoutEffect higher up the tree can\n   * miss changes from lower down the tree.\n   */\n  React.useInsertionEffect(function () {\n    return value.on(event, callback);\n  }, [value, event, callback]);\n}\n\n/**\n * Creates a `MotionValue` that updates when the velocity of the provided `MotionValue` changes.\n *\n * ```javascript\n * const x = useMotionValue(0)\n * const xVelocity = useVelocity(x)\n * const xAcceleration = useVelocity(xVelocity)\n * ```\n *\n * @public\n */\nfunction useVelocity(value) {\n  var velocity = useMotionValue(value.getVelocity());\n  useMotionValueEvent(value, \"velocityChange\", function (newVelocity) {\n    velocity.set(newVelocity);\n  });\n  return velocity;\n}\nfunction refWarning(name, ref) {\n  indexLegacy.warning(Boolean(!ref || ref.current), \"You have defined a \".concat(name, \" options but the provided ref is not yet hydrated, probably because it's defined higher up the tree. Try calling useScroll() in the same component as the ref, or setting its `layoutEffect: false` option.\"));\n}\nvar createScrollMotionValues = function createScrollMotionValues() {\n  return {\n    scrollX: indexLegacy.motionValue(0),\n    scrollY: indexLegacy.motionValue(0),\n    scrollXProgress: indexLegacy.motionValue(0),\n    scrollYProgress: indexLegacy.motionValue(0)\n  };\n};\nfunction useScroll() {\n  var _ref45 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    container = _ref45.container,\n    target = _ref45.target,\n    _ref45$layoutEffect = _ref45.layoutEffect,\n    layoutEffect = _ref45$layoutEffect === void 0 ? true : _ref45$layoutEffect,\n    options = _objectWithoutProperties(_ref45, [\"container\", \"target\", \"layoutEffect\"]);\n  var values = useConstant(createScrollMotionValues);\n  var useLifecycleEffect = layoutEffect ? useIsomorphicLayoutEffect : React.useEffect;\n  useLifecycleEffect(function () {\n    refWarning(\"target\", target);\n    refWarning(\"container\", container);\n    return indexLegacy.scrollInfo(function (_ref46) {\n      var x = _ref46.x,\n        y = _ref46.y;\n      values.scrollX.set(x.current);\n      values.scrollXProgress.set(x.progress);\n      values.scrollY.set(y.current);\n      values.scrollYProgress.set(y.progress);\n    }, _objectSpread({}, options, {\n      container: (container === null || container === void 0 ? void 0 : container.current) || undefined,\n      target: (target === null || target === void 0 ? void 0 : target.current) || undefined\n    }));\n  }, [container, target, JSON.stringify(options.offset)]);\n  return values;\n}\n\n/**\n * @deprecated useElementScroll is deprecated. Convert to useScroll({ container: ref })\n */\nfunction useElementScroll(ref) {\n  if (process.env.NODE_ENV === \"development\") {\n    indexLegacy.warnOnce(false, \"useElementScroll is deprecated. Convert to useScroll({ container: ref }).\");\n  }\n  return useScroll({\n    container: ref\n  });\n}\n\n/**\n * @deprecated useViewportScroll is deprecated. Convert to useScroll()\n */\nfunction useViewportScroll() {\n  if (process.env.NODE_ENV !== \"production\") {\n    indexLegacy.warnOnce(false, \"useViewportScroll is deprecated. Convert to useScroll().\");\n  }\n  return useScroll();\n}\nfunction useAnimationFrame(callback) {\n  var initialTimestamp = React.useRef(0);\n  var _React$useContext4 = React.useContext(MotionConfigContext),\n    isStatic = _React$useContext4.isStatic;\n  React.useEffect(function () {\n    if (isStatic) return;\n    var provideTimeSinceStart = function provideTimeSinceStart(_ref47) {\n      var timestamp = _ref47.timestamp,\n        delta = _ref47.delta;\n      if (!initialTimestamp.current) initialTimestamp.current = timestamp;\n      callback(timestamp - initialTimestamp.current, delta);\n    };\n    indexLegacy.frame.update(provideTimeSinceStart, true);\n    return function () {\n      return indexLegacy.cancelFrame(provideTimeSinceStart);\n    };\n  }, [callback]);\n}\nfunction useTime() {\n  var time = useMotionValue(0);\n  useAnimationFrame(function (t) {\n    return time.set(t);\n  });\n  return time;\n}\nvar WillChangeMotionValue = /*#__PURE__*/function (_indexLegacy$MotionVa) {\n  _inherits(WillChangeMotionValue, _indexLegacy$MotionVa);\n  function WillChangeMotionValue() {\n    var _this30;\n    _classCallCheck(this, WillChangeMotionValue);\n    _this30 = _possibleConstructorReturn(this, _getPrototypeOf(WillChangeMotionValue).apply(this, arguments));\n    _this30.members = [];\n    _this30.transforms = new Set();\n    return _this30;\n  }\n  _createClass(WillChangeMotionValue, [{\n    key: \"add\",\n    value: function add(name) {\n      var memberName;\n      if (indexLegacy.transformProps.has(name)) {\n        this.transforms.add(name);\n        memberName = \"transform\";\n      } else if (!name.startsWith(\"origin\") && !indexLegacy.isCSSVariableName(name) && name !== \"willChange\") {\n        memberName = indexLegacy.camelToDash(name);\n      }\n      if (memberName) {\n        indexLegacy.addUniqueItem(this.members, memberName);\n        this.update();\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(name) {\n      if (indexLegacy.transformProps.has(name)) {\n        this.transforms.delete(name);\n        if (!this.transforms.size) {\n          indexLegacy.removeItem(this.members, \"transform\");\n        }\n      } else {\n        indexLegacy.removeItem(this.members, indexLegacy.camelToDash(name));\n      }\n      this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.set(this.members.length ? this.members.join(\", \") : \"auto\");\n    }\n  }]);\n  return WillChangeMotionValue;\n}(indexLegacy.MotionValue);\nfunction useWillChange() {\n  return useConstant(function () {\n    return new WillChangeMotionValue(\"auto\");\n  });\n}\n\n/**\n * A hook that returns `true` if we should be using reduced motion based on the current device's Reduced Motion setting.\n *\n * This can be used to implement changes to your UI based on Reduced Motion. For instance, replacing motion-sickness inducing\n * `x`/`y` animations with `opacity`, disabling the autoplay of background videos, or turning off parallax motion.\n *\n * It will actively respond to changes and re-render your components with the latest setting.\n *\n * ```jsx\n * export function Sidebar({ isOpen }) {\n *   const shouldReduceMotion = useReducedMotion()\n *   const closedX = shouldReduceMotion ? 0 : \"-100%\"\n *\n *   return (\n *     <motion.div animate={{\n *       opacity: isOpen ? 1 : 0,\n *       x: isOpen ? 0 : closedX\n *     }} />\n *   )\n * }\n * ```\n *\n * @return boolean\n *\n * @public\n */\nfunction useReducedMotion() {\n  /**\n   * Lazy initialisation of prefersReducedMotion\n   */\n  !indexLegacy.hasReducedMotionListener.current && indexLegacy.initPrefersReducedMotion();\n  var _React$useState7 = React.useState(indexLegacy.prefersReducedMotion.current),\n    _React$useState8 = _slicedToArray(_React$useState7, 1),\n    shouldReduceMotion = _React$useState8[0];\n  if (process.env.NODE_ENV !== \"production\") {\n    indexLegacy.warnOnce(shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n  }\n  /**\n   * TODO See if people miss automatically updating shouldReduceMotion setting\n   */\n  return shouldReduceMotion;\n}\nfunction useReducedMotionConfig() {\n  var reducedMotionPreference = useReducedMotion();\n  var _React$useContext5 = React.useContext(MotionConfigContext),\n    reducedMotion = _React$useContext5.reducedMotion;\n  if (reducedMotion === \"never\") {\n    return false;\n  } else if (reducedMotion === \"always\") {\n    return true;\n  } else {\n    return reducedMotionPreference;\n  }\n}\nfunction stopAnimation(visualElement) {\n  visualElement.values.forEach(function (value) {\n    return value.stop();\n  });\n}\n/**\n * @public\n */\nfunction animationControls() {\n  /**\n   * Track whether the host component has mounted.\n   */\n  var hasMounted = false;\n  /**\n   * A collection of linked component animation controls.\n   */\n  var subscribers = new Set();\n  var controls = {\n    subscribe: function subscribe(visualElement) {\n      subscribers.add(visualElement);\n      return function () {\n        return void subscribers.delete(visualElement);\n      };\n    },\n    start: function start(definition, transitionOverride) {\n      indexLegacy.invariant(hasMounted, \"controls.start() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n      var animations = [];\n      subscribers.forEach(function (visualElement) {\n        animations.push(animateVisualElement(visualElement, definition, {\n          transitionOverride: transitionOverride\n        }));\n      });\n      return Promise.all(animations);\n    },\n    set: function set(definition) {\n      indexLegacy.invariant(hasMounted, \"controls.set() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n      return subscribers.forEach(function (visualElement) {\n        indexLegacy.setValues(visualElement, definition);\n      });\n    },\n    stop: function stop() {\n      subscribers.forEach(function (visualElement) {\n        stopAnimation(visualElement);\n      });\n    },\n    mount: function mount() {\n      hasMounted = true;\n      return function () {\n        hasMounted = false;\n        controls.stop();\n      };\n    }\n  };\n  return controls;\n}\nfunction useAnimate() {\n  var scope = useConstant(function () {\n    return {\n      current: null,\n      animations: []\n    };\n  });\n  var animate = useConstant(function () {\n    return indexLegacy.createScopedAnimate(scope);\n  });\n  useUnmountEffect(function () {\n    scope.animations.forEach(function (animation) {\n      return animation.stop();\n    });\n  });\n  return [scope, animate];\n}\n\n/**\n * Creates `AnimationControls`, which can be used to manually start, stop\n * and sequence animations on one or more components.\n *\n * The returned `AnimationControls` should be passed to the `animate` property\n * of the components you want to animate.\n *\n * These components can then be animated with the `start` method.\n *\n * ```jsx\n * import * as React from 'react'\n * import { motion, useAnimation } from 'framer-motion'\n *\n * export function MyComponent(props) {\n *    const controls = useAnimation()\n *\n *    controls.start({\n *        x: 100,\n *        transition: { duration: 0.5 },\n *    })\n *\n *    return <motion.div animate={controls} />\n * }\n * ```\n *\n * @returns Animation controller with `start` and `stop` methods\n *\n * @public\n */\nfunction useAnimationControls() {\n  var controls = useConstant(animationControls);\n  useIsomorphicLayoutEffect(controls.mount, []);\n  return controls;\n}\nvar useAnimation = useAnimationControls;\n\n/**\n * Cycles through a series of visual properties. Can be used to toggle between or cycle through animations. It works similar to `useState` in React. It is provided an initial array of possible states, and returns an array of two arguments.\n *\n * An index value can be passed to the returned `cycle` function to cycle to a specific index.\n *\n * ```jsx\n * import * as React from \"react\"\n * import { motion, useCycle } from \"framer-motion\"\n *\n * export const MyComponent = () => {\n *   const [x, cycleX] = useCycle(0, 50, 100)\n *\n *   return (\n *     <motion.div\n *       animate={{ x: x }}\n *       onTap={() => cycleX()}\n *      />\n *    )\n * }\n * ```\n *\n * @param items - items to cycle through\n * @returns [currentState, cycleState]\n *\n * @public\n */\nfunction useCycle() {\n  for (var _len3 = arguments.length, items = new Array(_len3), _key6 = 0; _key6 < _len3; _key6++) {\n    items[_key6] = arguments[_key6];\n  }\n  var index = React.useRef(0);\n  var _React$useState9 = React.useState(items[index.current]),\n    _React$useState10 = _slicedToArray(_React$useState9, 2),\n    item = _React$useState10[0],\n    setItem = _React$useState10[1];\n  var runCycle = React.useCallback(function (next) {\n    index.current = typeof next !== \"number\" ? indexLegacy.wrap(0, items.length, index.current + 1) : next;\n    setItem(items[index.current]);\n  }, // The array will change on each call, but by putting items.length at\n  // the front of this array, we guarantee the dependency comparison will match up\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [items.length].concat(items));\n  return [item, runCycle];\n}\nfunction useInView(ref) {\n  var _ref48 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    root = _ref48.root,\n    margin = _ref48.margin,\n    amount = _ref48.amount,\n    _ref48$once = _ref48.once,\n    once = _ref48$once === void 0 ? false : _ref48$once;\n  var _React$useState11 = React.useState(false),\n    _React$useState12 = _slicedToArray(_React$useState11, 2),\n    isInView = _React$useState12[0],\n    setInView = _React$useState12[1];\n  React.useEffect(function () {\n    if (!ref.current || once && isInView) return;\n    var onEnter = function onEnter() {\n      setInView(true);\n      return once ? undefined : function () {\n        return setInView(false);\n      };\n    };\n    var options = {\n      root: root && root.current || undefined,\n      margin: margin,\n      amount: amount\n    };\n    return indexLegacy.inView(ref.current, onEnter, options);\n  }, [root, ref, margin, once]);\n  return isInView;\n}\n\n/**\n * Can manually trigger a drag gesture on one or more `drag`-enabled `motion` components.\n *\n * ```jsx\n * const dragControls = useDragControls()\n *\n * function startDrag(event) {\n *   dragControls.start(event, { snapToCursor: true })\n * }\n *\n * return (\n *   <>\n *     <div onPointerDown={startDrag} />\n *     <motion.div drag=\"x\" dragControls={dragControls} />\n *   </>\n * )\n * ```\n *\n * @public\n */\nvar DragControls = /*#__PURE__*/function () {\n  function DragControls() {\n    _classCallCheck(this, DragControls);\n    this.componentControls = new Set();\n  }\n  /**\n   * Subscribe a component's internal `VisualElementDragControls` to the user-facing API.\n   *\n   * @internal\n   */\n  _createClass(DragControls, [{\n    key: \"subscribe\",\n    value: function subscribe(controls) {\n      var _this31 = this;\n      this.componentControls.add(controls);\n      return function () {\n        return _this31.componentControls.delete(controls);\n      };\n    }\n    /**\n     * Start a drag gesture on every `motion` component that has this set of drag controls\n     * passed into it via the `dragControls` prop.\n     *\n     * ```jsx\n     * dragControls.start(e, {\n     *   snapToCursor: true\n     * })\n     * ```\n     *\n     * @param event - PointerEvent\n     * @param options - Options\n     *\n     * @public\n     */\n  }, {\n    key: \"start\",\n    value: function start(event, options) {\n      this.componentControls.forEach(function (controls) {\n        controls.start(event.nativeEvent || event, options);\n      });\n    }\n  }]);\n  return DragControls;\n}();\nvar createDragControls = function createDragControls() {\n  return new DragControls();\n};\n/**\n * Usually, dragging is initiated by pressing down on a `motion` component with a `drag` prop\n * and moving it. For some use-cases, for instance clicking at an arbitrary point on a video scrubber, we\n * might want to initiate that dragging from a different component than the draggable one.\n *\n * By creating a `dragControls` using the `useDragControls` hook, we can pass this into\n * the draggable component's `dragControls` prop. It exposes a `start` method\n * that can start dragging from pointer events on other components.\n *\n * ```jsx\n * const dragControls = useDragControls()\n *\n * function startDrag(event) {\n *   dragControls.start(event, { snapToCursor: true })\n * }\n *\n * return (\n *   <>\n *     <div onPointerDown={startDrag} />\n *     <motion.div drag=\"x\" dragControls={dragControls} />\n *   </>\n * )\n * ```\n *\n * @public\n */\nfunction useDragControls() {\n  return useConstant(createDragControls);\n}\n\n/**\n * Attaches an event listener directly to the provided DOM element.\n *\n * Bypassing React's event system can be desirable, for instance when attaching non-passive\n * event handlers.\n *\n * ```jsx\n * const ref = useRef(null)\n *\n * useDomEvent(ref, 'wheel', onWheel, { passive: false })\n *\n * return <div ref={ref} />\n * ```\n *\n * @param ref - React.RefObject that's been provided to the element you want to bind the listener to.\n * @param eventName - Name of the event you want listen for.\n * @param handler - Function to fire when receiving the event.\n * @param options - Options to pass to `Event.addEventListener`.\n *\n * @public\n */\nfunction useDomEvent(ref, eventName, handler, options) {\n  React.useEffect(function () {\n    var element = ref.current;\n    if (handler && element) {\n      return addDomEvent(element, eventName, handler, options);\n    }\n  }, [ref, eventName, handler, options]);\n}\n\n/**\n * Checks if a component is a `motion` component.\n */\nfunction isMotionComponent(component) {\n  return component !== null && typeof component === \"object\" && motionComponentSymbol in component;\n}\n\n/**\n * Unwraps a `motion` component and returns either a string for `motion.div` or\n * the React component for `motion(Component)`.\n *\n * If the component is not a `motion` component it returns undefined.\n */\nfunction unwrapMotionComponent(component) {\n  if (isMotionComponent(component)) {\n    return component[motionComponentSymbol];\n  }\n  return undefined;\n}\nfunction useInstantLayoutTransition() {\n  return startTransition;\n}\nfunction startTransition(callback) {\n  if (!rootProjectionNode.current) return;\n  rootProjectionNode.current.isUpdating = false;\n  rootProjectionNode.current.blockUpdate();\n  callback && callback();\n}\nfunction useInstantTransition() {\n  var _useForceUpdate3 = useForceUpdate(),\n    _useForceUpdate4 = _slicedToArray(_useForceUpdate3, 2),\n    forceUpdate = _useForceUpdate4[0],\n    forcedRenderCount = _useForceUpdate4[1];\n  var startInstantLayoutTransition = useInstantLayoutTransition();\n  var unlockOnFrameRef = React.useRef();\n  React.useEffect(function () {\n    /**\n     * Unblock after two animation frames, otherwise this will unblock too soon.\n     */\n    indexLegacy.frame.postRender(function () {\n      return indexLegacy.frame.postRender(function () {\n        /**\n         * If the callback has been called again after the effect\n         * triggered this 2 frame delay, don't unblock animations. This\n         * prevents the previous effect from unblocking the current\n         * instant transition too soon. This becomes more likely when\n         * used in conjunction with React.startTransition().\n         */\n        if (forcedRenderCount !== unlockOnFrameRef.current) return;\n        indexLegacy.instantAnimationState.current = false;\n      });\n    });\n  }, [forcedRenderCount]);\n  return function (callback) {\n    startInstantLayoutTransition(function () {\n      indexLegacy.instantAnimationState.current = true;\n      forceUpdate();\n      callback();\n      unlockOnFrameRef.current = forcedRenderCount + 1;\n    });\n  };\n}\nfunction useResetProjection() {\n  var reset = React__namespace.useCallback(function () {\n    var root = rootProjectionNode.current;\n    if (!root) return;\n    root.resetTree();\n  }, []);\n  return reset;\n}\nvar appearStoreId = function appearStoreId(id, value) {\n  return \"\".concat(id, \": \").concat(value);\n};\nvar appearAnimationStore = new Map();\nfunction handoffOptimizedAppearAnimation(id, name,\n/**\n * Legacy argument. This function is inlined apart from framer-motion so\n * will co-ordinate with Shuang with how best to remove this.\n */\n_value,\n/**\n * This function is loaded via window by startOptimisedAnimation.\n * By accepting `sync` as an argument, rather than using it via\n * import, it can be kept out of the first-load Framer bundle,\n * while also allowing this function to not be included in\n * Framer Motion bundles where it's not needed.\n */\nframe) {\n  var storeId = appearStoreId(id, indexLegacy.transformProps.has(name) ? \"transform\" : name);\n  var appearAnimation = appearAnimationStore.get(storeId);\n  if (!appearAnimation) return 0;\n  var animation = appearAnimation.animation,\n    startTime = appearAnimation.startTime;\n  var cancelOptimisedAnimation = function cancelOptimisedAnimation() {\n    appearAnimationStore.delete(storeId);\n    /**\n     * Animation.cancel() throws so it needs to be wrapped in a try/catch\n     */\n    try {\n      animation.cancel();\n    } catch (e) {}\n  };\n  if (startTime !== null) {\n    /**\n     * We allow the animation to persist until the next frame:\n     *   1. So it continues to play until Framer Motion is ready to render\n     *      (avoiding a potential flash of the element's original state)\n     *   2. As all independent transforms share a single transform animation, stopping\n     *      it synchronously would prevent subsequent transforms from handing off.\n     */\n    frame.render(cancelOptimisedAnimation);\n    /**\n     * We use main thread timings vs those returned by Animation.currentTime as it\n     * can be the case, particularly in Firefox, that currentTime doesn't return\n     * an updated value for several frames, even as the animation plays smoothly via\n     * the GPU.\n     */\n    return performance.now() - startTime || 0;\n  } else {\n    cancelOptimisedAnimation();\n    return 0;\n  }\n}\nfunction startOptimizedAppearAnimation(element, name, keyframes, options, onReady) {\n  var id = element.dataset[indexLegacy.optimizedAppearDataId];\n  if (!id) return;\n  window.HandoffAppearAnimations = handoffOptimizedAppearAnimation;\n  var storeId = appearStoreId(id, name);\n  /**\n   * Use a dummy animation to detect when Chrome is ready to start\n   * painting the page and hold off from triggering the real animation\n   * until then.\n   *\n   * https://bugs.chromium.org/p/chromium/issues/detail?id=1406850\n   */\n  var readyAnimation = indexLegacy.animateStyle(element, name, [keyframes[0], keyframes[0]],\n  /**\n   * 10 secs is basically just a super-safe duration to give Chrome\n   * long enough to get the animation ready.\n   */\n  {\n    duration: 10000,\n    ease: \"linear\"\n  });\n  appearAnimationStore.set(storeId, {\n    animation: readyAnimation,\n    startTime: null\n  });\n  var startAnimation = function startAnimation() {\n    readyAnimation.cancel();\n    var appearAnimation = indexLegacy.animateStyle(element, name, keyframes, options);\n    if (document.timeline) {\n      appearAnimation.startTime = document.timeline.currentTime;\n    }\n    appearAnimationStore.set(storeId, {\n      animation: appearAnimation,\n      startTime: performance.now()\n    });\n    if (onReady) onReady(appearAnimation);\n  };\n  if (readyAnimation.ready) {\n    readyAnimation.ready.then(startAnimation).catch(indexLegacy.noop);\n  } else {\n    startAnimation();\n  }\n}\nvar createObject = function createObject() {\n  return {};\n};\nvar StateVisualElement = /*#__PURE__*/function (_indexLegacy$VisualEl) {\n  _inherits(StateVisualElement, _indexLegacy$VisualEl);\n  function StateVisualElement() {\n    _classCallCheck(this, StateVisualElement);\n    return _possibleConstructorReturn(this, _getPrototypeOf(StateVisualElement).apply(this, arguments));\n  }\n  _createClass(StateVisualElement, [{\n    key: \"build\",\n    value: function build() {}\n  }, {\n    key: \"measureInstanceViewportBox\",\n    value: function measureInstanceViewportBox() {\n      return indexLegacy.createBox();\n    }\n  }, {\n    key: \"resetTransform\",\n    value: function resetTransform() {}\n  }, {\n    key: \"restoreTransform\",\n    value: function restoreTransform() {}\n  }, {\n    key: \"removeValueFromRenderState\",\n    value: function removeValueFromRenderState() {}\n  }, {\n    key: \"renderInstance\",\n    value: function renderInstance() {}\n  }, {\n    key: \"scrapeMotionValuesFromProps\",\n    value: function scrapeMotionValuesFromProps() {\n      return createObject();\n    }\n  }, {\n    key: \"getBaseTargetFromProps\",\n    value: function getBaseTargetFromProps() {\n      return undefined;\n    }\n  }, {\n    key: \"readValueFromInstance\",\n    value: function readValueFromInstance(_state, key, options) {\n      return options.initialState[key] || 0;\n    }\n  }, {\n    key: \"sortInstanceNodePosition\",\n    value: function sortInstanceNodePosition() {\n      return 0;\n    }\n  }, {\n    key: \"makeTargetAnimatableFromInstance\",\n    value: function makeTargetAnimatableFromInstance(_ref49) {\n      var transition = _ref49.transition,\n        transitionEnd = _ref49.transitionEnd,\n        target = _objectWithoutProperties(_ref49, [\"transition\", \"transitionEnd\"]);\n      var origin = indexLegacy.getOrigin(target, transition || {}, this);\n      indexLegacy.checkTargetForNewValues(this, target, origin);\n      return _objectSpread({\n        transition: transition,\n        transitionEnd: transitionEnd\n      }, target);\n    }\n  }]);\n  return StateVisualElement;\n}(indexLegacy.VisualElement);\nvar useVisualState = makeUseVisualState({\n  scrapeMotionValuesFromProps: createObject,\n  createRenderState: createObject\n});\n/**\n * This is not an officially supported API and may be removed\n * on any version.\n */\nfunction useAnimatedState(initialState) {\n  var _React$useState13 = React.useState(initialState),\n    _React$useState14 = _slicedToArray(_React$useState13, 2),\n    animationState = _React$useState14[0],\n    setAnimationState = _React$useState14[1];\n  var visualState = useVisualState({}, false);\n  var element = useConstant(function () {\n    return new StateVisualElement({\n      props: {},\n      visualState: visualState,\n      presenceContext: null\n    }, {\n      initialState: initialState\n    });\n  });\n  React.useEffect(function () {\n    element.mount({});\n    return function () {\n      return element.unmount();\n    };\n  }, [element]);\n  React.useEffect(function () {\n    element.update({\n      onUpdate: function onUpdate(v) {\n        setAnimationState(_objectSpread({}, v));\n      }\n    }, null);\n  }, [setAnimationState, element]);\n  var startAnimation = useConstant(function () {\n    return function (animationDefinition) {\n      return animateVisualElement(element, animationDefinition);\n    };\n  });\n  return [animationState, startAnimation];\n}\n\n// Keep things reasonable and avoid scale: Infinity. In practise we might need\n// to add another value, opacity, that could interpolate scaleX/Y [0,0.01] => [0,1]\n// to simply hide content at unreasonable scales.\nvar maxScale = 100000;\nvar invertScale = function invertScale(scale) {\n  return scale > 0.001 ? 1 / scale : maxScale;\n};\nvar hasWarned = false;\n/**\n * Returns a `MotionValue` each for `scaleX` and `scaleY` that update with the inverse\n * of their respective parent scales.\n *\n * This is useful for undoing the distortion of content when scaling a parent component.\n *\n * By default, `useInvertedScale` will automatically fetch `scaleX` and `scaleY` from the nearest parent.\n * By passing other `MotionValue`s in as `useInvertedScale({ scaleX, scaleY })`, it will invert the output\n * of those instead.\n *\n * ```jsx\n * const MyComponent = () => {\n *   const { scaleX, scaleY } = useInvertedScale()\n *   return <motion.div style={{ scaleX, scaleY }} />\n * }\n * ```\n *\n * @deprecated\n */\nfunction useInvertedScale(scale) {\n  var parentScaleX = useMotionValue(1);\n  var parentScaleY = useMotionValue(1);\n  var _React$useContext6 = React.useContext(MotionContext),\n    visualElement = _React$useContext6.visualElement;\n  indexLegacy.invariant(!!(scale || visualElement), \"If no scale values are provided, useInvertedScale must be used within a child of another motion component.\");\n  indexLegacy.warning(hasWarned, \"useInvertedScale is deprecated and will be removed in 3.0. Use the layout prop instead.\");\n  hasWarned = true;\n  if (scale) {\n    parentScaleX = scale.scaleX || parentScaleX;\n    parentScaleY = scale.scaleY || parentScaleY;\n  } else if (visualElement) {\n    parentScaleX = visualElement.getValue(\"scaleX\", 1);\n    parentScaleY = visualElement.getValue(\"scaleY\", 1);\n  }\n  var scaleX = useTransform(parentScaleX, invertScale);\n  var scaleY = useTransform(parentScaleY, invertScale);\n  return {\n    scaleX: scaleX,\n    scaleY: scaleY\n  };\n}\nvar id = 0;\nvar AnimateSharedLayout = function AnimateSharedLayout(_ref50) {\n  var children = _ref50.children;\n  React__namespace.useEffect(function () {\n    indexLegacy.invariant(false, \"AnimateSharedLayout is deprecated: https://www.framer.com/docs/guide-upgrade/##shared-layout-animations\");\n  }, []);\n  return React__namespace.createElement(LayoutGroup, {\n    id: useConstant(function () {\n      return \"asl-\".concat(id++);\n    })\n  }, children);\n};\nexports.MotionValue = indexLegacy.MotionValue;\nexports.VisualElement = indexLegacy.VisualElement;\nexports.addScaleCorrector = indexLegacy.addScaleCorrector;\nexports.animate = indexLegacy.animate;\nexports.animateValue = indexLegacy.animateValue;\nexports.anticipate = indexLegacy.anticipate;\nexports.backIn = indexLegacy.backIn;\nexports.backInOut = indexLegacy.backInOut;\nexports.backOut = indexLegacy.backOut;\nexports.buildTransform = indexLegacy.buildTransform;\nexports.cancelFrame = indexLegacy.cancelFrame;\nexports.cancelSync = indexLegacy.cancelSync;\nexports.checkTargetForNewValues = indexLegacy.checkTargetForNewValues;\nexports.circIn = indexLegacy.circIn;\nexports.circInOut = indexLegacy.circInOut;\nexports.circOut = indexLegacy.circOut;\nexports.clamp = indexLegacy.clamp;\nexports.color = indexLegacy.color;\nexports.complex = indexLegacy.complex;\nexports.createBox = indexLegacy.createBox;\nexports.createScopedAnimate = indexLegacy.createScopedAnimate;\nexports.cubicBezier = indexLegacy.cubicBezier;\nexports.delay = indexLegacy.delay;\nexports.distance = indexLegacy.distance;\nexports.distance2D = indexLegacy.distance2D;\nexports.easeIn = indexLegacy.easeIn;\nexports.easeInOut = indexLegacy.easeInOut;\nexports.easeOut = indexLegacy.easeOut;\nexports.frame = indexLegacy.frame;\nexports.frameData = indexLegacy.frameData;\nexports.inView = indexLegacy.inView;\nexports.interpolate = indexLegacy.interpolate;\nObject.defineProperty(exports, 'invariant', {\n  enumerable: true,\n  get: function get() {\n    return indexLegacy.invariant;\n  }\n});\nexports.isBrowser = indexLegacy.isBrowser;\nexports.isMotionValue = indexLegacy.isMotionValue;\nexports.mirrorEasing = indexLegacy.mirrorEasing;\nexports.mix = indexLegacy.mix;\nexports.motionValue = indexLegacy.motionValue;\nexports.optimizedAppearDataAttribute = indexLegacy.optimizedAppearDataAttribute;\nexports.pipe = indexLegacy.pipe;\nexports.progress = indexLegacy.progress;\nexports.px = indexLegacy.px;\nexports.reverseEasing = indexLegacy.reverseEasing;\nexports.scroll = indexLegacy.scroll;\nexports.scrollInfo = indexLegacy.scrollInfo;\nexports.spring = indexLegacy.spring;\nexports.stagger = indexLegacy.stagger;\nexports.steps = indexLegacy.steps;\nexports.sync = indexLegacy.sync;\nexports.transform = indexLegacy.transform;\nexports.visualElementStore = indexLegacy.visualElementStore;\nObject.defineProperty(exports, 'warning', {\n  enumerable: true,\n  get: function get() {\n    return indexLegacy.warning;\n  }\n});\nexports.wrap = indexLegacy.wrap;\nexports.AnimatePresence = AnimatePresence;\nexports.AnimateSharedLayout = AnimateSharedLayout;\nexports.DeprecatedLayoutGroupContext = DeprecatedLayoutGroupContext;\nexports.DragControls = DragControls;\nexports.FlatTree = FlatTree;\nexports.LayoutGroup = LayoutGroup;\nexports.LayoutGroupContext = LayoutGroupContext;\nexports.LazyMotion = LazyMotion;\nexports.MotionConfig = MotionConfig;\nexports.MotionConfigContext = MotionConfigContext;\nexports.MotionContext = MotionContext;\nexports.PresenceContext = PresenceContext;\nexports.Reorder = Reorder;\nexports.SwitchLayoutGroupContext = SwitchLayoutGroupContext;\nexports.addPointerEvent = addPointerEvent;\nexports.addPointerInfo = addPointerInfo;\nexports.animateVisualElement = animateVisualElement;\nexports.animationControls = animationControls;\nexports.animations = animations;\nexports.calcLength = calcLength;\nexports.createDomMotionComponent = createDomMotionComponent;\nexports.createMotionComponent = createMotionComponent;\nexports.domAnimation = domAnimation;\nexports.domMax = domMax;\nexports.filterProps = filterProps;\nexports.isDragActive = isDragActive;\nexports.isMotionComponent = isMotionComponent;\nexports.isValidMotionProp = isValidMotionProp;\nexports.m = m;\nexports.makeUseVisualState = makeUseVisualState;\nexports.motion = motion;\nexports.resolveMotionValue = resolveMotionValue;\nexports.startOptimizedAppearAnimation = startOptimizedAppearAnimation;\nexports.unwrapMotionComponent = unwrapMotionComponent;\nexports.useAnimate = useAnimate;\nexports.useAnimation = useAnimation;\nexports.useAnimationControls = useAnimationControls;\nexports.useAnimationFrame = useAnimationFrame;\nexports.useCycle = useCycle;\nexports.useDeprecatedAnimatedState = useAnimatedState;\nexports.useDeprecatedInvertedScale = useInvertedScale;\nexports.useDomEvent = useDomEvent;\nexports.useDragControls = useDragControls;\nexports.useElementScroll = useElementScroll;\nexports.useForceUpdate = useForceUpdate;\nexports.useInView = useInView;\nexports.useInstantLayoutTransition = useInstantLayoutTransition;\nexports.useInstantTransition = useInstantTransition;\nexports.useIsPresent = useIsPresent;\nexports.useIsomorphicLayoutEffect = useIsomorphicLayoutEffect;\nexports.useMotionTemplate = useMotionTemplate;\nexports.useMotionValue = useMotionValue;\nexports.useMotionValueEvent = useMotionValueEvent;\nexports.usePresence = usePresence;\nexports.useReducedMotion = useReducedMotion;\nexports.useReducedMotionConfig = useReducedMotionConfig;\nexports.useResetProjection = useResetProjection;\nexports.useScroll = useScroll;\nexports.useSpring = useSpring;\nexports.useTime = useTime;\nexports.useTransform = useTransform;\nexports.useUnmountEffect = useUnmountEffect;\nexports.useVelocity = useVelocity;\nexports.useViewportScroll = useViewportScroll;\nexports.useWillChange = useWillChange;","map":null,"metadata":{},"sourceType":"script"}