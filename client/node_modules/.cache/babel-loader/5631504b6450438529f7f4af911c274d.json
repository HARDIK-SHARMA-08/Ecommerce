{"ast":null,"code":"\"use client\";\n\nimport _objectSpread from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport { useAvatarGroupContext } from \"./chunk-PM5WBSHT.mjs\";\n\n// src/use-avatar.ts\nimport { avatar } from \"@nextui-org/theme\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { useDOMRef } from \"@nextui-org/react-utils\";\nimport { clsx, safeText, dataAttr } from \"@nextui-org/shared-utils\";\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { useMemo, useCallback } from \"react\";\nimport { useImage } from \"@nextui-org/use-image\";\nimport { useHover } from \"@react-aria/interactions\";\nfunction useAvatar() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _a, _b, _c, _d, _e;\n  var groupContext = useAvatarGroupContext();\n  var isInGroup = !!groupContext;\n  var as = props.as,\n    ref = props.ref,\n    src = props.src,\n    name = props.name,\n    icon = props.icon,\n    classNames = props.classNames,\n    fallback = props.fallback,\n    _props$alt = props.alt,\n    alt = _props$alt === void 0 ? name || \"avatar\" : _props$alt,\n    imgRefProp = props.imgRef,\n    _props$color = props.color,\n    color = _props$color === void 0 ? (_a = groupContext == null ? void 0 : groupContext.color) != null ? _a : \"default\" : _props$color,\n    _props$radius = props.radius,\n    radius = _props$radius === void 0 ? (_b = groupContext == null ? void 0 : groupContext.radius) != null ? _b : \"full\" : _props$radius,\n    _props$size = props.size,\n    size = _props$size === void 0 ? (_c = groupContext == null ? void 0 : groupContext.size) != null ? _c : \"md\" : _props$size,\n    _props$isBordered = props.isBordered,\n    isBordered = _props$isBordered === void 0 ? (_d = groupContext == null ? void 0 : groupContext.isBordered) != null ? _d : false : _props$isBordered,\n    _props$isDisabled = props.isDisabled,\n    isDisabled = _props$isDisabled === void 0 ? (_e = groupContext == null ? void 0 : groupContext.isDisabled) != null ? _e : false : _props$isDisabled,\n    _props$isFocusable = props.isFocusable,\n    isFocusable = _props$isFocusable === void 0 ? false : _props$isFocusable,\n    _props$getInitials = props.getInitials,\n    getInitials = _props$getInitials === void 0 ? safeText : _props$getInitials,\n    _props$ignoreFallback = props.ignoreFallback,\n    ignoreFallback = _props$ignoreFallback === void 0 ? false : _props$ignoreFallback,\n    _props$showFallback = props.showFallback,\n    showFallbackProp = _props$showFallback === void 0 ? false : _props$showFallback,\n    _props$ImgComponent = props.ImgComponent,\n    ImgComponent = _props$ImgComponent === void 0 ? \"img\" : _props$ImgComponent,\n    imgProps = props.imgProps,\n    className = props.className,\n    onError = props.onError,\n    otherProps = _objectWithoutProperties(props, [\"as\", \"ref\", \"src\", \"name\", \"icon\", \"classNames\", \"fallback\", \"alt\", \"imgRef\", \"color\", \"radius\", \"size\", \"isBordered\", \"isDisabled\", \"isFocusable\", \"getInitials\", \"ignoreFallback\", \"showFallback\", \"ImgComponent\", \"imgProps\", \"className\", \"onError\"]);\n  var Component = as || \"span\";\n  var domRef = useDOMRef(ref);\n  var imgRef = useDOMRef(imgRefProp);\n  var _useFocusRing = useFocusRing(),\n    isFocusVisible = _useFocusRing.isFocusVisible,\n    isFocused = _useFocusRing.isFocused,\n    focusProps = _useFocusRing.focusProps;\n  var _useHover = useHover({\n      isDisabled: isDisabled\n    }),\n    isHovered = _useHover.isHovered,\n    hoverProps = _useHover.hoverProps;\n  var imageStatus = useImage({\n    src: src,\n    onError: onError,\n    ignoreFallback: ignoreFallback\n  });\n  var isImgLoaded = imageStatus === \"loaded\";\n  var showFallback = (!src || !isImgLoaded) && showFallbackProp;\n  var slots = useMemo(function () {\n    var _a2;\n    return avatar({\n      color: color,\n      radius: radius,\n      size: size,\n      isBordered: isBordered,\n      isDisabled: isDisabled,\n      isInGroup: isInGroup,\n      isInGridGroup: (_a2 = groupContext == null ? void 0 : groupContext.isGrid) != null ? _a2 : false\n    });\n  }, [color, radius, size, isBordered, isDisabled, isInGroup, groupContext == null ? void 0 : groupContext.isGrid]);\n  var baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  var canBeFocused = useMemo(function () {\n    return isFocusable || as === \"button\";\n  }, [isFocusable, as]);\n  var getAvatarProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _objectSpread({\n      ref: domRef,\n      tabIndex: canBeFocused ? 0 : -1,\n      \"data-hover\": dataAttr(isHovered),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-focus-visible\": dataAttr(isFocusVisible),\n      className: slots.base({\n        class: clsx(baseStyles, props2 == null ? void 0 : props2.className)\n      })\n    }, mergeProps(otherProps, hoverProps, canBeFocused ? focusProps : {}));\n  }, [canBeFocused, slots, baseStyles, focusProps, otherProps]);\n  var getImageProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _objectSpread({\n      ref: imgRef,\n      src: src,\n      \"data-loaded\": dataAttr(isImgLoaded),\n      className: slots.img({\n        class: classNames == null ? void 0 : classNames.img\n      })\n    }, mergeProps(imgProps, props2));\n  }, [slots, isImgLoaded, imgProps, src, imgRef]);\n  return {\n    Component: Component,\n    ImgComponent: ImgComponent,\n    src: src,\n    alt: alt,\n    icon: icon,\n    name: name,\n    imgRef: imgRef,\n    slots: slots,\n    classNames: classNames,\n    fallback: fallback,\n    isImgLoaded: isImgLoaded,\n    showFallback: showFallback,\n    ignoreFallback: ignoreFallback,\n    getInitials: getInitials,\n    getAvatarProps: getAvatarProps,\n    getImageProps: getImageProps\n  };\n}\nexport { useAvatar };","map":null,"metadata":{},"sourceType":"module"}