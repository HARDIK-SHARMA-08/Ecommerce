{"ast":null,"code":"\"use client\";\n\n// src/use-listbox-item.ts\nimport _toConsumableArray from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useMemo, useRef, useCallback } from \"react\";\nimport { listboxItem } from \"@nextui-org/theme\";\nimport { mapPropsVariants } from \"@nextui-org/system\";\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { filterDOMProps } from \"@nextui-org/react-utils\";\nimport { clsx, dataAttr, removeEvents } from \"@nextui-org/shared-utils\";\nimport { useOption } from \"@react-aria/listbox\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { useHover, usePress } from \"@react-aria/interactions\";\nimport { useIsMobile } from \"@nextui-org/use-is-mobile\";\nfunction useListboxItem(originalProps) {\n  var _mapPropsVariants = mapPropsVariants(originalProps, listboxItem.variantKeys),\n    _mapPropsVariants2 = _slicedToArray(_mapPropsVariants, 2),\n    props = _mapPropsVariants2[0],\n    variantProps = _mapPropsVariants2[1];\n  var as = props.as,\n    item = props.item,\n    state = props.state,\n    description = props.description,\n    startContent = props.startContent,\n    endContent = props.endContent,\n    isVirtualized = props.isVirtualized,\n    selectedIcon = props.selectedIcon,\n    className = props.className,\n    classNames = props.classNames,\n    autoFocus = props.autoFocus,\n    onPress = props.onPress,\n    onClick = props.onClick,\n    _props$isReadOnly = props.isReadOnly,\n    isReadOnly = _props$isReadOnly === void 0 ? false : _props$isReadOnly,\n    otherProps = _objectWithoutProperties(props, [\"as\", \"item\", \"state\", \"description\", \"startContent\", \"endContent\", \"isVirtualized\", \"selectedIcon\", \"className\", \"classNames\", \"autoFocus\", \"onPress\", \"onClick\", \"isReadOnly\"]);\n  var disableAnimation = originalProps.disableAnimation;\n  var domRef = useRef(null);\n  var Component = as || \"li\";\n  var shouldFilterDOMProps = typeof Component === \"string\";\n  var rendered = item.rendered,\n    key = item.key;\n  var isDisabled = state.disabledKeys.has(key) || originalProps.isDisabled;\n  var isSelectable = state.selectionManager.selectionMode !== \"none\";\n  var isMobile = useIsMobile();\n  var _usePress = usePress({\n      ref: domRef,\n      isDisabled: isDisabled,\n      onPress: onPress\n    }),\n    pressProps = _usePress.pressProps,\n    isPressed = _usePress.isPressed;\n  var _useHover = useHover({\n      isDisabled: isDisabled\n    }),\n    isHovered = _useHover.isHovered,\n    hoverProps = _useHover.hoverProps;\n  var _useFocusRing = useFocusRing({\n      autoFocus: autoFocus\n    }),\n    isFocusVisible = _useFocusRing.isFocusVisible,\n    focusProps = _useFocusRing.focusProps;\n  var _useOption = useOption({\n      key: key,\n      isDisabled: isDisabled,\n      \"aria-label\": props[\"aria-label\"],\n      isVirtualized: isVirtualized\n    }, state, domRef),\n    isFocused = _useOption.isFocused,\n    isSelected = _useOption.isSelected,\n    optionProps = _useOption.optionProps,\n    labelProps = _useOption.labelProps,\n    descriptionProps = _useOption.descriptionProps;\n  var itemProps = optionProps;\n  var slots = useMemo(function () {\n    return listboxItem(_objectSpread({}, variantProps, {\n      isDisabled: isDisabled,\n      disableAnimation: disableAnimation\n    }));\n  }, [].concat(_toConsumableArray(Object.values(variantProps)), [isDisabled, disableAnimation]));\n  var baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  if (isReadOnly) {\n    itemProps = removeEvents(itemProps);\n  }\n  var getItemProps = function getItemProps() {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _objectSpread({\n      ref: domRef\n    }, mergeProps({\n      onClick: onClick\n    }, itemProps, isReadOnly ? {} : mergeProps(focusProps, pressProps), hoverProps, filterDOMProps(otherProps, {\n      enabled: shouldFilterDOMProps\n    }), props2), {\n      \"data-selectable\": dataAttr(isSelectable),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-hover\": dataAttr(isMobile ? isHovered || isPressed : isHovered),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-selected\": dataAttr(isSelected),\n      \"data-pressed\": dataAttr(isPressed),\n      \"data-focus-visible\": dataAttr(isFocusVisible),\n      className: slots.base({\n        class: clsx(baseStyles, props2.className)\n      })\n    });\n  };\n  var getLabelProps = function getLabelProps() {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _objectSpread({}, mergeProps(labelProps, props2), {\n      \"data-label\": dataAttr(true),\n      className: slots.title({\n        class: classNames == null ? void 0 : classNames.title\n      })\n    });\n  };\n  var getDescriptionProps = function getDescriptionProps() {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _objectSpread({}, mergeProps(descriptionProps, props2), {\n      className: slots.description({\n        class: classNames == null ? void 0 : classNames.description\n      })\n    });\n  };\n  var getWrapperProps = function getWrapperProps() {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _objectSpread({}, mergeProps(props2), {\n      className: slots.wrapper({\n        class: classNames == null ? void 0 : classNames.wrapper\n      })\n    });\n  };\n  var getSelectedIconProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _objectSpread({\n      \"aria-hidden\": dataAttr(true),\n      \"data-disabled\": dataAttr(isDisabled),\n      className: slots.selectedIcon({\n        class: classNames == null ? void 0 : classNames.selectedIcon\n      })\n    }, props2);\n  }, [isDisabled, slots, classNames]);\n  return {\n    Component: Component,\n    domRef: domRef,\n    slots: slots,\n    classNames: classNames,\n    isSelectable: isSelectable,\n    isSelected: isSelected,\n    isDisabled: isDisabled,\n    rendered: rendered,\n    description: description,\n    startContent: startContent,\n    endContent: endContent,\n    selectedIcon: selectedIcon,\n    disableAnimation: disableAnimation,\n    getItemProps: getItemProps,\n    getLabelProps: getLabelProps,\n    getWrapperProps: getWrapperProps,\n    getDescriptionProps: getDescriptionProps,\n    getSelectedIconProps: getSelectedIconProps\n  };\n}\nexport { useListboxItem };","map":null,"metadata":{},"sourceType":"module"}