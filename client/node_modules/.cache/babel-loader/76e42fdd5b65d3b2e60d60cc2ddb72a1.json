{"ast":null,"code":"import _objectSpread from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\n// src/use-multiselect.ts\nimport { useCollator } from \"@react-aria/i18n\";\nimport { setInteractionModality } from \"@react-aria/interactions\";\nimport { useField } from \"@react-aria/label\";\nimport { useMenuTrigger } from \"@react-aria/menu\";\nimport { ListKeyboardDelegate, useTypeSelect } from \"@react-aria/selection\";\nimport { chain, filterDOMProps, mergeProps, useId } from \"@react-aria/utils\";\nimport { useMemo } from \"react\";\nfunction useMultiSelect(props, state, ref) {\n  var disallowEmptySelection = props.disallowEmptySelection,\n    isDisabled = props.isDisabled;\n  var collator = useCollator({\n    usage: \"search\",\n    sensitivity: \"base\"\n  });\n  var delegate = useMemo(function () {\n    return new ListKeyboardDelegate(state.collection, state.disabledKeys, null, collator);\n  }, [state.collection, state.disabledKeys, collator]);\n  var _useMenuTrigger = useMenuTrigger({\n      isDisabled: isDisabled,\n      type: \"listbox\"\n    }, state, ref),\n    menuTriggerProps = _useMenuTrigger.menuTriggerProps,\n    menuProps = _useMenuTrigger.menuProps;\n  var triggerOnKeyDown = function triggerOnKeyDown(e) {\n    if (state.selectionMode === \"single\") {\n      switch (e.key) {\n        case \"ArrowLeft\":\n          {\n            e.preventDefault();\n            var key = state.selectedKeys.size > 0 ? delegate.getKeyAbove(state.selectedKeys.values().next().value) : delegate.getFirstKey();\n            if (key) {\n              state.setSelectedKeys([key]);\n            }\n            break;\n          }\n        case \"ArrowRight\":\n          {\n            e.preventDefault();\n            var _key = state.selectedKeys.size > 0 ? delegate.getKeyBelow(state.selectedKeys.values().next().value) : delegate.getFirstKey();\n            if (_key) {\n              state.setSelectedKeys([_key]);\n            }\n            break;\n          }\n      }\n    }\n  };\n  var _useTypeSelect = useTypeSelect({\n      keyboardDelegate: delegate,\n      selectionManager: state.selectionManager,\n      onTypeSelect: function onTypeSelect(key) {\n        state.setSelectedKeys([key]);\n      }\n    }),\n    typeSelectProps = _useTypeSelect.typeSelectProps;\n  var _useField = useField(_objectSpread({}, props, {\n      labelElementType: \"span\"\n    })),\n    labelProps = _useField.labelProps,\n    fieldProps = _useField.fieldProps,\n    descriptionProps = _useField.descriptionProps,\n    errorMessageProps = _useField.errorMessageProps;\n  typeSelectProps.onKeyDown = typeSelectProps.onKeyDownCapture;\n  delete typeSelectProps.onKeyDownCapture;\n  var domProps = filterDOMProps(props, {\n    labelable: true\n  });\n  var triggerProps = mergeProps(typeSelectProps, menuTriggerProps, fieldProps);\n  var valueId = useId();\n  return {\n    labelProps: _objectSpread({}, labelProps, {\n      onClick: function onClick() {\n        var _a;\n        if (!props.isDisabled) {\n          (_a = ref.current) == null ? void 0 : _a.focus();\n          setInteractionModality(\"keyboard\");\n        }\n      }\n    }),\n    triggerProps: mergeProps(domProps, _objectSpread({}, triggerProps, {\n      onKeyDown: chain(triggerProps.onKeyDown, triggerOnKeyDown, props.onKeyDown),\n      onKeyUp: props.onKeyUp,\n      \"aria-labelledby\": [valueId, domProps[\"aria-label\"] !== void 0 ? domProps[\"aria-labelledby\"] !== void 0 ? domProps[\"aria-labelledby\"] : triggerProps.id : triggerProps[\"aria-labelledby\"]].join(\" \"),\n      onFocus: function onFocus(e) {\n        if (state.isFocused) {\n          return;\n        }\n        if (props.onFocus) {\n          props.onFocus(e);\n        }\n        state.setFocused(true);\n      },\n      onBlur: function onBlur(e) {\n        if (state.isOpen) {\n          return;\n        }\n        if (props.onBlur) {\n          props.onBlur(e);\n        }\n        state.setFocused(false);\n      }\n    })),\n    valueProps: {\n      id: valueId\n    },\n    menuProps: _objectSpread({}, menuProps, {\n      disallowEmptySelection: disallowEmptySelection,\n      autoFocus: state.focusStrategy || true,\n      shouldSelectOnPressUp: true,\n      shouldFocusOnHover: true,\n      onBlur: function onBlur(e) {\n        if (e.currentTarget.contains(e.relatedTarget)) {\n          return;\n        }\n        if (props.onBlur) {\n          props.onBlur(e);\n        }\n        state.setFocused(false);\n      },\n      onFocus: menuProps == null ? void 0 : menuProps.onFocus,\n      \"aria-labelledby\": [fieldProps[\"aria-labelledby\"], triggerProps[\"aria-label\"] && !fieldProps[\"aria-labelledby\"] ? triggerProps.id : null].filter(Boolean).join(\" \")\n    }),\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps\n  };\n}\nexport { useMultiSelect };","map":null,"metadata":{},"sourceType":"module"}