{"ast":null,"code":"import { disposables as m } from '../../utils/disposables.js';\nimport { isIOS as f } from '../../utils/platform.js';\nfunction T() {\n  if (!f()) return {};\n  var l;\n  return {\n    before: function before() {\n      l = window.pageYOffset;\n    },\n    after: function after(_ref) {\n      var o = _ref.doc,\n        t = _ref.d,\n        s = _ref.meta;\n      function i(n) {\n        return s.containers.flatMap(function (e) {\n          return e();\n        }).some(function (e) {\n          return e.contains(n);\n        });\n      }\n      t.microTask(function () {\n        if (window.getComputedStyle(o.documentElement).scrollBehavior !== \"auto\") {\n          var e = m();\n          e.style(o.documentElement, \"scroll-behavior\", \"auto\"), t.add(function () {\n            return t.microTask(function () {\n              return e.dispose();\n            });\n          });\n        }\n        t.style(o.body, \"marginTop\", \"-\".concat(l, \"px\")), window.scrollTo(0, 0);\n        var n = null;\n        t.addEventListener(o, \"click\", function (e) {\n          if (e.target instanceof HTMLElement) try {\n            var r = e.target.closest(\"a\");\n            if (!r) return;\n            var _URL = new URL(r.href),\n              c = _URL.hash,\n              a = o.querySelector(c);\n            a && !i(a) && (n = a);\n          } catch (_unused) {}\n        }, !0), t.addEventListener(o, \"touchmove\", function (e) {\n          e.target instanceof HTMLElement && !i(e.target) && e.preventDefault();\n        }, {\n          passive: !1\n        }), t.add(function () {\n          window.scrollTo(0, window.pageYOffset + l), n && n.isConnected && (n.scrollIntoView({\n            block: \"nearest\"\n          }), n = null);\n        });\n      });\n    }\n  };\n}\nexport { T as handleIOSLocking };","map":null,"metadata":{},"sourceType":"module"}