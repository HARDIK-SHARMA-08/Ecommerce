{"ast":null,"code":"var _objectSpread = require(\"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\nvar $eFCLV$reactariautils = require(\"@react-aria/utils\");\nvar $eFCLV$reactariainteractions = require(\"@react-aria/interactions\");\nvar $eFCLV$reactarialabel = require(\"@react-aria/label\");\nvar $eFCLV$reactariaselection = require(\"@react-aria/selection\");\nvar $eFCLV$reactstatelycollections = require(\"@react-stately/collections\");\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n$parcel$export(module.exports, \"useListBox\", function () {\n  return $a3ce5bb3074610af$export$50eacbbf140a3141;\n});\n$parcel$export(module.exports, \"useOption\", function () {\n  return $c164f9f79f4cef2d$export$497855f14858aa34;\n});\n$parcel$export(module.exports, \"useListBoxSection\", function () {\n  return $f32afd5f225c3320$export$c3f9f39876e4bc7;\n});\n$parcel$export(module.exports, \"listData\", function () {\n  return $87beb89ab4a308fd$export$3585ede4d035bf14;\n});\n$parcel$export(module.exports, \"getItemId\", function () {\n  return $87beb89ab4a308fd$export$9145995848b05025;\n});\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nvar $87beb89ab4a308fd$export$3585ede4d035bf14 = new WeakMap();\nfunction $87beb89ab4a308fd$var$normalizeKey(key) {\n  if (typeof key === \"string\") return key.replace(/\\s*/g, \"\");\n  return \"\" + key;\n}\nfunction $87beb89ab4a308fd$export$9145995848b05025(state, itemKey) {\n  var data = $87beb89ab4a308fd$export$3585ede4d035bf14.get(state);\n  if (!data) throw new Error(\"Unknown list\");\n  return \"\".concat(data.id, \"-option-\").concat($87beb89ab4a308fd$var$normalizeKey(itemKey));\n}\nfunction $a3ce5bb3074610af$export$50eacbbf140a3141(props, state, ref) {\n  var domProps = (0, $eFCLV$reactariautils.filterDOMProps)(props, {\n    labelable: true\n  });\n  // Use props instead of state here. We don't want this to change due to long press.\n  var selectionBehavior = props.selectionBehavior || \"toggle\";\n  var linkBehavior = props.linkBehavior || (selectionBehavior === \"replace\" ? \"action\" : \"override\");\n  if (selectionBehavior === \"toggle\" && linkBehavior === \"action\")\n    // linkBehavior=\"action\" does not work with selectionBehavior=\"toggle\" because there is no way\n    // to initiate selection (checkboxes are not allowed inside a listbox). Link items will not be\n    // selectable in this configuration.\n    linkBehavior = \"override\";\n  var _ref = (0, $eFCLV$reactariaselection.useSelectableList)(_objectSpread({}, props, {\n      ref: ref,\n      selectionManager: state.selectionManager,\n      collection: state.collection,\n      disabledKeys: state.disabledKeys,\n      linkBehavior: linkBehavior\n    })),\n    listProps = _ref.listProps;\n  var _ref2 = (0, $eFCLV$reactariainteractions.useFocusWithin)({\n      onFocusWithin: props.onFocus,\n      onBlurWithin: props.onBlur,\n      onFocusWithinChange: props.onFocusChange\n    }),\n    focusWithinProps = _ref2.focusWithinProps; // Share list id and some props with child options.\n  var id = (0, $eFCLV$reactariautils.useId)(props.id);\n  (0, $87beb89ab4a308fd$export$3585ede4d035bf14).set(state, {\n    id: id,\n    shouldUseVirtualFocus: props.shouldUseVirtualFocus,\n    shouldSelectOnPressUp: props.shouldSelectOnPressUp,\n    shouldFocusOnHover: props.shouldFocusOnHover,\n    isVirtualized: props.isVirtualized,\n    onAction: props.onAction,\n    linkBehavior: linkBehavior\n  });\n  var _ref3 = (0, $eFCLV$reactarialabel.useLabel)(_objectSpread({}, props, {\n      id: id,\n      // listbox is not an HTML input element so it\n      // shouldn't be labeled by a <label> element.\n      labelElementType: \"span\"\n    })),\n    labelProps = _ref3.labelProps,\n    fieldProps = _ref3.fieldProps;\n  return {\n    labelProps: labelProps,\n    listBoxProps: (0, $eFCLV$reactariautils.mergeProps)(domProps, focusWithinProps, state.selectionManager.selectionMode === \"multiple\" ? {\n      \"aria-multiselectable\": \"true\"\n    } : {}, _objectSpread({\n      role: \"listbox\"\n    }, (0, $eFCLV$reactariautils.mergeProps)(fieldProps, listProps)))\n  };\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $c164f9f79f4cef2d$export$497855f14858aa34(props, state, ref) {\n  var _item_props;\n  var key = props.key;\n  var data = (0, $87beb89ab4a308fd$export$3585ede4d035bf14).get(state);\n  var _props_isDisabled;\n  var isDisabled = (_props_isDisabled = props.isDisabled) !== null && _props_isDisabled !== void 0 ? _props_isDisabled : state.disabledKeys.has(key);\n  var _props_isSelected;\n  var isSelected = (_props_isSelected = props.isSelected) !== null && _props_isSelected !== void 0 ? _props_isSelected : state.selectionManager.isSelected(key);\n  var _props_shouldSelectOnPressUp;\n  var shouldSelectOnPressUp = (_props_shouldSelectOnPressUp = props.shouldSelectOnPressUp) !== null && _props_shouldSelectOnPressUp !== void 0 ? _props_shouldSelectOnPressUp : data === null || data === void 0 ? void 0 : data.shouldSelectOnPressUp;\n  var _props_shouldFocusOnHover;\n  var shouldFocusOnHover = (_props_shouldFocusOnHover = props.shouldFocusOnHover) !== null && _props_shouldFocusOnHover !== void 0 ? _props_shouldFocusOnHover : data === null || data === void 0 ? void 0 : data.shouldFocusOnHover;\n  var _props_shouldUseVirtualFocus;\n  var shouldUseVirtualFocus = (_props_shouldUseVirtualFocus = props.shouldUseVirtualFocus) !== null && _props_shouldUseVirtualFocus !== void 0 ? _props_shouldUseVirtualFocus : data === null || data === void 0 ? void 0 : data.shouldUseVirtualFocus;\n  var _props_isVirtualized;\n  var isVirtualized = (_props_isVirtualized = props.isVirtualized) !== null && _props_isVirtualized !== void 0 ? _props_isVirtualized : data === null || data === void 0 ? void 0 : data.isVirtualized;\n  var labelId = (0, $eFCLV$reactariautils.useSlotId)();\n  var descriptionId = (0, $eFCLV$reactariautils.useSlotId)();\n  var optionProps = {\n    role: \"option\",\n    \"aria-disabled\": isDisabled || undefined,\n    \"aria-selected\": state.selectionManager.selectionMode !== \"none\" ? isSelected : undefined\n  };\n  // Safari with VoiceOver on macOS misreads options with aria-labelledby or aria-label as simply \"text\".\n  // We should not map slots to the label and description on Safari and instead just have VoiceOver read the textContent.\n  // https://bugs.webkit.org/show_bug.cgi?id=209279\n  if (!((0, $eFCLV$reactariautils.isMac)() && (0, $eFCLV$reactariautils.isWebKit)())) {\n    optionProps[\"aria-label\"] = props[\"aria-label\"];\n    optionProps[\"aria-labelledby\"] = labelId;\n    optionProps[\"aria-describedby\"] = descriptionId;\n  }\n  var item = state.collection.getItem(key);\n  if (isVirtualized) {\n    var index = Number(item === null || item === void 0 ? void 0 : item.index);\n    optionProps[\"aria-posinset\"] = Number.isNaN(index) ? undefined : index + 1;\n    optionProps[\"aria-setsize\"] = (0, $eFCLV$reactstatelycollections.getItemCount)(state.collection);\n  }\n  var _ref4 = (0, $eFCLV$reactariaselection.useSelectableItem)({\n      selectionManager: state.selectionManager,\n      key: key,\n      ref: ref,\n      shouldSelectOnPressUp: shouldSelectOnPressUp,\n      allowsDifferentPressOrigin: shouldSelectOnPressUp && shouldFocusOnHover,\n      isVirtualized: isVirtualized,\n      shouldUseVirtualFocus: shouldUseVirtualFocus,\n      isDisabled: isDisabled,\n      onAction: (data === null || data === void 0 ? void 0 : data.onAction) ? function () {\n        var _data_onAction;\n        return data === null || data === void 0 ? void 0 : (_data_onAction = data.onAction) === null || _data_onAction === void 0 ? void 0 : _data_onAction.call(data, key);\n      } : undefined,\n      linkBehavior: data === null || data === void 0 ? void 0 : data.linkBehavior\n    }),\n    itemProps = _ref4.itemProps,\n    isPressed = _ref4.isPressed,\n    isFocused = _ref4.isFocused,\n    hasAction = _ref4.hasAction,\n    allowsSelection = _ref4.allowsSelection;\n  var _ref5 = (0, $eFCLV$reactariainteractions.useHover)({\n      isDisabled: isDisabled || !shouldFocusOnHover,\n      onHoverStart: function onHoverStart() {\n        if (!(0, $eFCLV$reactariainteractions.isFocusVisible)()) {\n          state.selectionManager.setFocused(true);\n          state.selectionManager.setFocusedKey(key);\n        }\n      }\n    }),\n    hoverProps = _ref5.hoverProps;\n  var domProps = (0, $eFCLV$reactariautils.filterDOMProps)(item === null || item === void 0 ? void 0 : item.props, {\n    isLink: !!(item === null || item === void 0 ? void 0 : (_item_props = item.props) === null || _item_props === void 0 ? void 0 : _item_props.href)\n  });\n  delete domProps.id;\n  return {\n    optionProps: _objectSpread({}, optionProps, (0, $eFCLV$reactariautils.mergeProps)(domProps, itemProps, hoverProps), {\n      id: (0, $87beb89ab4a308fd$export$9145995848b05025)(state, key)\n    }),\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    isFocused: isFocused,\n    isFocusVisible: isFocused && (0, $eFCLV$reactariainteractions.isFocusVisible)(),\n    isSelected: isSelected,\n    isDisabled: isDisabled,\n    isPressed: isPressed,\n    allowsSelection: allowsSelection,\n    hasAction: hasAction\n  };\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nfunction $f32afd5f225c3320$export$c3f9f39876e4bc7(props) {\n  var heading = props.heading,\n    ariaLabel = props[\"aria-label\"];\n  var headingId = (0, $eFCLV$reactariautils.useId)();\n  return {\n    itemProps: {\n      role: \"presentation\"\n    },\n    headingProps: heading ? {\n      // Techincally, listbox cannot contain headings according to ARIA.\n      // We hide the heading from assistive technology, using role=\"presentation\",\n      // and only use it as a visual label for the nested group.\n      id: headingId,\n      role: \"presentation\"\n    } : {},\n    groupProps: {\n      role: \"group\",\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": heading ? headingId : undefined\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"script"}