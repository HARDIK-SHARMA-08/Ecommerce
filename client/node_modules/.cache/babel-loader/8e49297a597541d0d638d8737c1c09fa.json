{"ast":null,"code":"\"use client\";\n\nimport _toConsumableArray from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useReactAriaPopover } from \"./chunk-JGMU3RCI.mjs\";\n\n// src/use-popover.ts\nimport { useEffect } from \"react\";\nimport { useDOMRef } from \"@nextui-org/react-utils\";\nimport { useOverlayTriggerState } from \"@react-stately/overlays\";\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { ariaHideOutside, useOverlayTrigger } from \"@react-aria/overlays\";\nimport { mapPropsVariants } from \"@nextui-org/system\";\nimport { getArrowPlacement, getShouldUseAxisPlacement } from \"@nextui-org/aria-utils\";\nimport { popover } from \"@nextui-org/theme\";\nimport { mergeProps, mergeRefs } from \"@react-aria/utils\";\nimport { clsx, dataAttr } from \"@nextui-org/shared-utils\";\nimport { useMemo, useCallback, useRef } from \"react\";\nfunction usePopover(originalProps) {\n  var _a, _b;\n  var _mapPropsVariants = mapPropsVariants(originalProps, popover.variantKeys),\n    _mapPropsVariants2 = _slicedToArray(_mapPropsVariants, 2),\n    props = _mapPropsVariants2[0],\n    variantProps = _mapPropsVariants2[1];\n  var as = props.as,\n    children = props.children,\n    ref = props.ref,\n    stateProp = props.state,\n    triggerRefProp = props.triggerRef,\n    scrollRef = props.scrollRef,\n    isOpen = props.isOpen,\n    defaultOpen = props.defaultOpen,\n    _onOpenChange = props.onOpenChange,\n    _props$isNonModal = props.isNonModal,\n    isNonModal = _props$isNonModal === void 0 ? true : _props$isNonModal,\n    _props$shouldFlip = props.shouldFlip,\n    shouldFlip = _props$shouldFlip === void 0 ? true : _props$shouldFlip,\n    _props$containerPaddi = props.containerPadding,\n    containerPadding = _props$containerPaddi === void 0 ? 12 : _props$containerPaddi,\n    _props$shouldBlockScr = props.shouldBlockScroll,\n    shouldBlockScroll = _props$shouldBlockScr === void 0 ? false : _props$shouldBlockScr,\n    shouldCloseOnBlur = props.shouldCloseOnBlur,\n    portalContainer = props.portalContainer,\n    _props$placement = props.placement,\n    placementProp = _props$placement === void 0 ? \"top\" : _props$placement,\n    _props$triggerType = props.triggerType,\n    triggerType = _props$triggerType === void 0 ? \"dialog\" : _props$triggerType,\n    _props$showArrow = props.showArrow,\n    showArrow = _props$showArrow === void 0 ? false : _props$showArrow,\n    _props$offset = props.offset,\n    offset = _props$offset === void 0 ? 7 : _props$offset,\n    _props$crossOffset = props.crossOffset,\n    crossOffset = _props$crossOffset === void 0 ? 0 : _props$crossOffset,\n    boundaryElement = props.boundaryElement,\n    isKeyboardDismissDisabled = props.isKeyboardDismissDisabled,\n    shouldCloseOnInteractOutside = props.shouldCloseOnInteractOutside,\n    motionProps = props.motionProps,\n    className = props.className,\n    classNames = props.classNames,\n    onClose = props.onClose,\n    otherProps = _objectWithoutProperties(props, [\"as\", \"children\", \"ref\", \"state\", \"triggerRef\", \"scrollRef\", \"isOpen\", \"defaultOpen\", \"onOpenChange\", \"isNonModal\", \"shouldFlip\", \"containerPadding\", \"shouldBlockScroll\", \"shouldCloseOnBlur\", \"portalContainer\", \"placement\", \"triggerType\", \"showArrow\", \"offset\", \"crossOffset\", \"boundaryElement\", \"isKeyboardDismissDisabled\", \"shouldCloseOnInteractOutside\", \"motionProps\", \"className\", \"classNames\", \"onClose\"]);\n  var Component = as || \"div\";\n  var domRef = useDOMRef(ref);\n  var domTriggerRef = useRef(null);\n  var triggerRef = triggerRefProp || domTriggerRef;\n  var disableAnimation = (_a = originalProps.disableAnimation) != null ? _a : false;\n  var innerState = useOverlayTriggerState({\n    isOpen: isOpen,\n    defaultOpen: defaultOpen,\n    onOpenChange: function onOpenChange(isOpen2) {\n      _onOpenChange == null ? void 0 : _onOpenChange(isOpen2);\n      if (!isOpen2) {\n        onClose == null ? void 0 : onClose();\n      }\n    }\n  });\n  var state = stateProp || innerState;\n  var _useReactAriaPopover = useReactAriaPopover({\n      triggerRef: triggerRef,\n      isNonModal: isNonModal,\n      popoverRef: domRef,\n      placement: placementProp,\n      offset: offset,\n      scrollRef: scrollRef,\n      shouldCloseOnBlur: shouldCloseOnBlur,\n      boundaryElement: boundaryElement,\n      crossOffset: crossOffset,\n      shouldFlip: shouldFlip,\n      containerPadding: containerPadding,\n      isKeyboardDismissDisabled: isKeyboardDismissDisabled,\n      shouldCloseOnInteractOutside: shouldCloseOnInteractOutside\n    }, state),\n    popoverProps = _useReactAriaPopover.popoverProps,\n    underlayProps = _useReactAriaPopover.underlayProps,\n    arrowProps = _useReactAriaPopover.arrowProps,\n    ariaPlacement = _useReactAriaPopover.placement;\n  var _useOverlayTrigger = useOverlayTrigger({\n      type: triggerType\n    }, state, triggerRef),\n    triggerProps = _useOverlayTrigger.triggerProps;\n  var _useFocusRing = useFocusRing(),\n    isFocusVisible = _useFocusRing.isFocusVisible,\n    isFocused = _useFocusRing.isFocused,\n    focusProps = _useFocusRing.focusProps;\n  var slots = useMemo(function () {\n    return popover(_objectSpread({}, variantProps));\n  }, _toConsumableArray(Object.values(variantProps)));\n  var baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  var getPopoverProps = function getPopoverProps() {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _objectSpread({\n      ref: domRef\n    }, mergeProps(popoverProps, otherProps, props2), {\n      style: mergeProps(popoverProps.style, otherProps.style, props2.style)\n    });\n  };\n  var getDialogProps = function getDialogProps() {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _objectSpread({\n      \"data-open\": dataAttr(state.isOpen),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-focus-visible\": dataAttr(isFocusVisible),\n      \"data-placement\": getArrowPlacement(ariaPlacement, placementProp)\n    }, mergeProps(focusProps, props2), {\n      className: slots.base({\n        class: clsx(baseStyles, props2.className)\n      }),\n      style: {\n        outline: \"none\"\n      }\n    });\n  };\n  var placement = useMemo(function () {\n    return getShouldUseAxisPlacement(ariaPlacement, placementProp) ? ariaPlacement : placementProp;\n  }, [ariaPlacement, placementProp]);\n  var getTriggerProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread({\n      \"aria-haspopup\": \"dialog\"\n    }, mergeProps(triggerProps, props2), {\n      className: slots.trigger({\n        class: clsx(classNames == null ? void 0 : classNames.trigger, props2.className)\n      }),\n      ref: mergeRefs(_ref, triggerRef)\n    });\n  }, [isOpen, state, triggerProps, triggerRef]);\n  var getBackdropProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _objectSpread({\n      className: slots.backdrop({\n        class: classNames == null ? void 0 : classNames.backdrop\n      }),\n      onClick: function onClick() {\n        return state.close();\n      }\n    }, underlayProps, props2);\n  }, [slots, classNames, underlayProps]);\n  var getArrowProps = useCallback(function () {\n    return _objectSpread({\n      className: slots.arrow({\n        class: classNames == null ? void 0 : classNames.arrow\n      }),\n      \"data-placement\": getArrowPlacement(ariaPlacement, placementProp)\n    }, arrowProps);\n  }, [arrowProps, ariaPlacement, placementProp, slots, classNames]);\n  useEffect(function () {\n    if (state.isOpen && (domRef == null ? void 0 : domRef.current)) {\n      return ariaHideOutside([domRef == null ? void 0 : domRef.current]);\n    }\n  }, [state.isOpen, domRef]);\n  return {\n    state: state,\n    Component: Component,\n    children: children,\n    classNames: classNames,\n    showArrow: showArrow,\n    triggerRef: triggerRef,\n    placement: placement,\n    isNonModal: isNonModal,\n    popoverRef: domRef,\n    portalContainer: portalContainer,\n    isOpen: state.isOpen,\n    onClose: state.close,\n    disableAnimation: disableAnimation,\n    shouldBlockScroll: shouldBlockScroll,\n    backdrop: (_b = originalProps.backdrop) != null ? _b : \"transparent\",\n    motionProps: motionProps,\n    getBackdropProps: getBackdropProps,\n    getPopoverProps: getPopoverProps,\n    getTriggerProps: getTriggerProps,\n    getArrowProps: getArrowProps,\n    getDialogProps: getDialogProps\n  };\n}\nexport { usePopover };","map":null,"metadata":{},"sourceType":"module"}