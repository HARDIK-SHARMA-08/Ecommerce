{"ast":null,"code":"\"use client\";\n\"use strict\";\n\nvar _toConsumableArray = require(\"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\nvar _objectSpread = require(\"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\nvar _objectWithoutProperties = require(\"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectWithoutProperties\");\nvar _slicedToArray = require(\"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = function __export(target, all) {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = function __copyProps(to, from, except, desc) {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    var _iterator = _createForOfIteratorHelper(__getOwnPropNames(from)),\n      _step;\n    try {\n      var _loop = function _loop() {\n        var key = _step.value;\n        if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n          get: function get() {\n            return from[key];\n          },\n          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n      };\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        _loop();\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return to;\n};\nvar __toCommonJS = function __toCommonJS(mod) {\n  return __copyProps(__defProp({}, \"__esModule\", {\n    value: true\n  }), mod);\n};\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Snippet: function Snippet() {\n    return snippet_default;\n  },\n  useSnippet: function useSnippet() {\n    return _useSnippet;\n  }\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/use-snippet.ts\nvar import_theme = require(\"@nextui-org/theme\");\nvar import_system = require(\"@nextui-org/system\");\nvar import_react_utils = require(\"@nextui-org/react-utils\");\nvar import_shared_utils = require(\"@nextui-org/shared-utils\");\nvar import_use_clipboard = require(\"@nextui-org/use-clipboard\");\nvar import_focus = require(\"@react-aria/focus\");\nvar import_react = require(\"react\");\nfunction _useSnippet(originalProps) {\n  var _ref = (0, import_system.mapPropsVariants)(originalProps, import_theme.snippet.variantKeys),\n    _ref2 = _slicedToArray(_ref, 2),\n    props = _ref2[0],\n    variantProps = _ref2[1];\n  var ref = props.ref,\n    as = props.as,\n    children = props.children,\n    _props$symbol = props.symbol,\n    symbol = _props$symbol === void 0 ? \"$\" : _props$symbol,\n    classNames = props.classNames,\n    timeout = props.timeout,\n    copyIcon = props.copyIcon,\n    checkIcon = props.checkIcon,\n    codeString = props.codeString,\n    _props$disableCopy = props.disableCopy,\n    disableCopy = _props$disableCopy === void 0 ? false : _props$disableCopy,\n    _props$disableTooltip = props.disableTooltip,\n    disableTooltip = _props$disableTooltip === void 0 ? false : _props$disableTooltip,\n    _props$hideCopyButton = props.hideCopyButton,\n    hideCopyButton = _props$hideCopyButton === void 0 ? false : _props$hideCopyButton,\n    _props$autoFocus = props.autoFocus,\n    autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,\n    _props$hideSymbol = props.hideSymbol,\n    hideSymbol = _props$hideSymbol === void 0 ? false : _props$hideSymbol,\n    onCopyProp = props.onCopy,\n    _props$tooltipProps = props.tooltipProps,\n    userTooltipProps = _props$tooltipProps === void 0 ? {} : _props$tooltipProps,\n    _props$copyButtonProp = props.copyButtonProps,\n    userButtonProps = _props$copyButtonProp === void 0 ? {} : _props$copyButtonProp,\n    className = props.className,\n    otherProps = _objectWithoutProperties(props, [\"ref\", \"as\", \"children\", \"symbol\", \"classNames\", \"timeout\", \"copyIcon\", \"checkIcon\", \"codeString\", \"disableCopy\", \"disableTooltip\", \"hideCopyButton\", \"autoFocus\", \"hideSymbol\", \"onCopy\", \"tooltipProps\", \"copyButtonProps\", \"className\"]);\n  var Component = as || \"div\";\n  var shouldFilterDOMProps = typeof Component === \"string\";\n  var tooltipProps = _objectSpread({\n    offset: 15,\n    delay: 1e3,\n    content: \"Copy to clipboard\",\n    color: originalProps == null ? void 0 : originalProps.color,\n    isDisabled: props.disableCopy\n  }, userTooltipProps);\n  var domRef = (0, import_react_utils.useDOMRef)(ref);\n  var preRef = (0, import_react.useRef)(null);\n  var _ref3 = (0, import_use_clipboard.useClipboard)({\n      timeout: timeout\n    }),\n    copy = _ref3.copy,\n    copied = _ref3.copied;\n  var isMultiLine = children && Array.isArray(children);\n  var _ref4 = (0, import_focus.useFocusRing)({\n      autoFocus: autoFocus\n    }),\n    isFocusVisible = _ref4.isFocusVisible,\n    isFocused = _ref4.isFocused,\n    focusProps = _ref4.focusProps;\n  var slots = (0, import_react.useMemo)(function () {\n    return (0, import_theme.snippet)(_objectSpread({}, variantProps));\n  }, _toConsumableArray(Object.values(variantProps)));\n  var symbolBefore = (0, import_react.useMemo)(function () {\n    if (!symbol || typeof symbol !== \"string\") return symbol;\n    var str = symbol.trim();\n    return str ? \"\".concat(str, \" \") : \"\";\n  }, [symbol]);\n  var baseStyles = (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.base, className);\n  var getSnippetProps = (0, import_react.useCallback)(function () {\n    return _objectSpread({\n      className: slots.base({\n        class: baseStyles\n      })\n    }, (0, import_react_utils.filterDOMProps)(otherProps, {\n      enabled: shouldFilterDOMProps\n    }));\n  }, [slots, baseStyles, isMultiLine, otherProps]);\n  var onCopy = (0, import_react.useCallback)(function () {\n    var _a;\n    if (disableCopy) {\n      return;\n    }\n    var stringValue = \"\";\n    if (typeof children === \"string\") {\n      stringValue = children;\n    } else if (Array.isArray(children)) {\n      children.forEach(function (child) {\n        var _a2, _b;\n        var childString = typeof child === \"string\" ? child : (_b = (_a2 = child == null ? void 0 : child.props) == null ? void 0 : _a2.children) == null ? void 0 : _b.toString();\n        if (childString) {\n          stringValue += childString + \"\\n\";\n        }\n      });\n    }\n    var valueToCopy = codeString || stringValue || ((_a = preRef.current) == null ? void 0 : _a.textContent) || \"\";\n    copy(valueToCopy);\n    onCopyProp == null ? void 0 : onCopyProp(valueToCopy);\n  }, [copy, codeString, disableCopy, onCopyProp, children]);\n  var copyButtonProps = _objectSpread({\n    \"aria-label\": typeof tooltipProps.content === \"string\" ? tooltipProps.content : \"Copy to clipboard\",\n    size: \"sm\",\n    variant: \"light\",\n    isDisabled: disableCopy,\n    onPress: onCopy,\n    isIconOnly: true\n  }, userButtonProps);\n  var getCopyButtonProps = (0, import_react.useCallback)(function () {\n    return _objectSpread({}, copyButtonProps, {\n      \"data-copied\": (0, import_shared_utils.dataAttr)(copied),\n      className: slots.copyButton({\n        class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.copyButton)\n      })\n    });\n  }, [slots, isFocusVisible, isFocused, disableCopy, classNames == null ? void 0 : classNames.copyButton, copyButtonProps, focusProps]);\n  return {\n    Component: Component,\n    as: as,\n    domRef: domRef,\n    preRef: preRef,\n    children: children,\n    slots: slots,\n    classNames: classNames,\n    copied: copied,\n    onCopy: onCopy,\n    copyIcon: copyIcon,\n    checkIcon: checkIcon,\n    symbolBefore: symbolBefore,\n    isMultiLine: isMultiLine,\n    isFocusVisible: isFocusVisible,\n    hideCopyButton: hideCopyButton,\n    disableCopy: disableCopy,\n    disableTooltip: disableTooltip,\n    hideSymbol: hideSymbol,\n    tooltipProps: tooltipProps,\n    getSnippetProps: getSnippetProps,\n    getCopyButtonProps: getCopyButtonProps\n  };\n}\n\n// src/snippet.tsx\nvar import_react2 = require(\"react\");\nvar import_system2 = require(\"@nextui-org/system\");\nvar import_tooltip = require(\"@nextui-org/tooltip\");\nvar import_shared_icons = require(\"@nextui-org/shared-icons\");\nvar import_button = require(\"@nextui-org/button\");\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar Snippet = (0, import_system2.forwardRef)(function (props, ref) {\n  var _useSnippet2 = _useSnippet(_objectSpread({}, props, {\n      ref: ref\n    })),\n    Component = _useSnippet2.Component,\n    domRef = _useSnippet2.domRef,\n    preRef = _useSnippet2.preRef,\n    children = _useSnippet2.children,\n    slots = _useSnippet2.slots,\n    classNames = _useSnippet2.classNames,\n    copied = _useSnippet2.copied,\n    _useSnippet2$copyIcon = _useSnippet2.copyIcon,\n    copyIcon = _useSnippet2$copyIcon === void 0 ? /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_shared_icons.CopyLinearIcon, {}) : _useSnippet2$copyIcon,\n    _useSnippet2$checkIco = _useSnippet2.checkIcon,\n    checkIcon = _useSnippet2$checkIco === void 0 ? /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_shared_icons.CheckLinearIcon, {}) : _useSnippet2$checkIco,\n    symbolBefore = _useSnippet2.symbolBefore,\n    disableCopy = _useSnippet2.disableCopy,\n    disableTooltip = _useSnippet2.disableTooltip,\n    hideSymbol = _useSnippet2.hideSymbol,\n    hideCopyButton = _useSnippet2.hideCopyButton,\n    tooltipProps = _useSnippet2.tooltipProps,\n    isMultiLine = _useSnippet2.isMultiLine,\n    onCopy = _useSnippet2.onCopy,\n    getSnippetProps = _useSnippet2.getSnippetProps,\n    getCopyButtonProps = _useSnippet2.getCopyButtonProps;\n  var TooltipContent = (0, import_react2.useCallback)(function (_ref5) {\n    var children2 = _ref5.children;\n    return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_tooltip.Tooltip, _objectSpread({}, tooltipProps, {\n      isDisabled: copied || tooltipProps.isDisabled,\n      children: children2\n    }));\n  }, _toConsumableArray(Object.values(tooltipProps)));\n  var contents = (0, import_react2.useMemo)(function () {\n    if (hideCopyButton) {\n      return null;\n    }\n    var clonedCheckIcon = checkIcon && (0, import_react2.cloneElement)(checkIcon, {\n      className: slots.checkIcon()\n    });\n    var clonedCopyIcon = copyIcon && (0, import_react2.cloneElement)(copyIcon, {\n      className: slots.copyIcon()\n    });\n    var copyButton = /* @__PURE__ */(0, import_jsx_runtime.jsxs)(import_button.Button, _objectSpread({}, getCopyButtonProps(), {\n      children: [clonedCheckIcon, clonedCopyIcon]\n    }));\n    if (disableTooltip) {\n      return copyButton;\n    }\n    return /* @__PURE__ */(0, import_jsx_runtime.jsx)(TooltipContent, {\n      children: copyButton\n    });\n  }, [slots, classNames == null ? void 0 : classNames.copyButton, copied, checkIcon, copyIcon, onCopy, TooltipContent, disableCopy, disableTooltip, hideCopyButton]);\n  var preContent = (0, import_react2.useMemo)(function () {\n    if (isMultiLine && children && Array.isArray(children)) {\n      return /* @__PURE__ */(0, import_jsx_runtime.jsx)(\"div\", {\n        className: slots.content({\n          class: classNames == null ? void 0 : classNames.content\n        }),\n        children: children.map(function (t, index) {\n          return /* @__PURE__ */(0, import_jsx_runtime.jsxs)(\"pre\", {\n            className: slots.pre({\n              class: classNames == null ? void 0 : classNames.pre\n            }),\n            children: [!hideSymbol && /* @__PURE__ */(0, import_jsx_runtime.jsx)(\"span\", {\n              className: slots.symbol({\n                class: classNames == null ? void 0 : classNames.symbol\n              }),\n              children: symbolBefore\n            }), t]\n          }, \"\".concat(index, \"-\").concat(t));\n        })\n      });\n    }\n    return /* @__PURE__ */(0, import_jsx_runtime.jsxs)(\"pre\", {\n      ref: preRef,\n      className: slots.pre({\n        class: classNames == null ? void 0 : classNames.pre\n      }),\n      children: [!hideSymbol && /* @__PURE__ */(0, import_jsx_runtime.jsx)(\"span\", {\n        className: slots.symbol({\n          class: classNames == null ? void 0 : classNames.symbol\n        }),\n        children: symbolBefore\n      }), children]\n    });\n  }, [children, hideSymbol, isMultiLine, symbolBefore, classNames == null ? void 0 : classNames.pre, slots]);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsxs)(Component, _objectSpread({\n    ref: domRef\n  }, getSnippetProps(), {\n    children: [preContent, contents]\n  }));\n});\nSnippet.displayName = \"NextUI.Snippet\";\nvar snippet_default = Snippet;\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  Snippet: Snippet,\n  useSnippet: _useSnippet\n});","map":null,"metadata":{},"sourceType":"script"}