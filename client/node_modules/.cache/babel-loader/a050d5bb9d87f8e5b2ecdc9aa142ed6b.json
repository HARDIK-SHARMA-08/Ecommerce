{"ast":null,"code":"// src/index.ts\nimport { useRef, useEffect } from \"react\";\nvar isBrowser = typeof window !== \"undefined\";\nfunction getScrollPosition(element) {\n  if (!isBrowser) return {\n    x: 0,\n    y: 0\n  };\n  if (!element) {\n    return {\n      x: window.scrollX,\n      y: window.scrollY\n    };\n  }\n  return {\n    x: element.scrollLeft,\n    y: element.scrollTop\n  };\n}\nvar useScrollPosition = function useScrollPosition(props) {\n  var elementRef = props.elementRef,\n    _props$delay = props.delay,\n    delay = _props$delay === void 0 ? 30 : _props$delay,\n    callback = props.callback,\n    isEnabled = props.isEnabled;\n  var position = useRef(isEnabled ? getScrollPosition(elementRef == null ? void 0 : elementRef.current) : {\n    x: 0,\n    y: 0\n  });\n  var throttleTimeout = null;\n  var handler = function handler() {\n    var currPos = getScrollPosition(elementRef == null ? void 0 : elementRef.current);\n    if (typeof callback === \"function\") {\n      callback({\n        prevPos: position.current,\n        currPos: currPos\n      });\n    }\n    position.current = currPos;\n    throttleTimeout = null;\n  };\n  useEffect(function () {\n    if (!isEnabled) return;\n    var handleScroll = function handleScroll() {\n      if (delay) {\n        if (throttleTimeout === null) {\n          throttleTimeout = setTimeout(handler, delay);\n        }\n      } else {\n        handler();\n      }\n    };\n    var target = (elementRef == null ? void 0 : elementRef.current) || window;\n    target.addEventListener(\"scroll\", handleScroll);\n    return function () {\n      return target.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, [elementRef == null ? void 0 : elementRef.current, delay, isEnabled]);\n  return position.current;\n};\nexport { useScrollPosition };","map":null,"metadata":{},"sourceType":"module"}