{"ast":null,"code":"import _slicedToArray from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { FloatingFocusManager, FloatingList, useListNavigation, useTypeahead } from '@floating-ui/react';\nimport { cloneElement, createContext, useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { HiOutlineChevronDown, HiOutlineChevronLeft, HiOutlineChevronRight, HiOutlineChevronUp } from 'react-icons/hi';\nimport { Button, useTheme } from '../../';\nimport { mergeDeep } from '../../helpers/merge-deep';\nimport { DropdownDivider } from './DropdownDivider';\nimport { DropdownHeader } from './DropdownHeader';\nimport { DropdownItem } from './DropdownItem';\nimport { twMerge } from 'tailwind-merge';\nimport { useBaseFLoating, useFloatingInteractions } from '../../helpers/use-floating';\nvar icons = {\n  top: HiOutlineChevronUp,\n  right: HiOutlineChevronRight,\n  bottom: HiOutlineChevronDown,\n  left: HiOutlineChevronLeft\n};\nvar Trigger = function Trigger(_ref) {\n  var refs = _ref.refs,\n    children = _ref.children,\n    inline = _ref.inline,\n    theme = _ref.theme,\n    disabled = _ref.disabled,\n    setButtonWidth = _ref.setButtonWidth,\n    getReferenceProps = _ref.getReferenceProps,\n    renderTrigger = _ref.renderTrigger,\n    buttonProps = _objectWithoutProperties(_ref, [\"refs\", \"children\", \"inline\", \"theme\", \"disabled\", \"setButtonWidth\", \"getReferenceProps\", \"renderTrigger\"]);\n  var ref = refs.reference;\n  var a11yProps = getReferenceProps();\n  useEffect(function () {\n    if (ref.current) {\n      setButtonWidth?.(ref.current.clientWidth);\n    }\n  }, [ref, setButtonWidth]);\n  if (renderTrigger) {\n    var triggerElement = renderTrigger(theme);\n    return cloneElement(triggerElement, _objectSpread({\n      ref: refs.setReference,\n      disabled: disabled\n    }, a11yProps, triggerElement.props));\n  }\n  return inline ? _jsx(\"button\", _objectSpread({\n    type: \"button\",\n    ref: refs.setReference,\n    className: theme?.inlineWrapper,\n    disabled: disabled\n  }, a11yProps, {\n    children: children\n  })) : _jsx(Button, _objectSpread({}, buttonProps, {\n    disabled: disabled,\n    type: \"button\",\n    ref: refs.setReference\n  }, a11yProps, {\n    children: children\n  }));\n};\nexport var DropdownContext = createContext({});\nvar DropdownComponent = function DropdownComponent(_ref2) {\n  var children = _ref2.children,\n    className = _ref2.className,\n    _ref2$dismissOnClick = _ref2.dismissOnClick,\n    dismissOnClick = _ref2$dismissOnClick === void 0 ? true : _ref2$dismissOnClick,\n    _ref2$theme = _ref2.theme,\n    customTheme = _ref2$theme === void 0 ? {} : _ref2$theme,\n    renderTrigger = _ref2.renderTrigger,\n    props = _objectWithoutProperties(_ref2, [\"children\", \"className\", \"dismissOnClick\", \"theme\", \"renderTrigger\"]);\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    open = _useState2[0],\n    setOpen = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    activeIndex = _useState4[0],\n    setActiveIndex = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    selectedIndex = _useState6[0],\n    setSelectedIndex = _useState6[1];\n  var _useState7 = useState(undefined),\n    _useState8 = _slicedToArray(_useState7, 2),\n    buttonWidth = _useState8[0],\n    setButtonWidth = _useState8[1];\n  var elementsRef = useRef([]);\n  var labelsRef = useRef([]);\n  var theme = mergeDeep(useTheme().theme.dropdown, customTheme);\n  var theirProps = props;\n  var dataTestId = props['data-testid'] || 'flowbite-dropdown-target';\n  var _theirProps$placement = theirProps.placement,\n    placement = _theirProps$placement === void 0 ? props.inline ? 'bottom-start' : 'bottom' : _theirProps$placement,\n    _theirProps$trigger = theirProps.trigger,\n    trigger = _theirProps$trigger === void 0 ? 'click' : _theirProps$trigger,\n    label = theirProps.label,\n    inline = theirProps.inline,\n    _theirProps$arrowIcon = theirProps.arrowIcon,\n    arrowIcon = _theirProps$arrowIcon === void 0 ? true : _theirProps$arrowIcon,\n    buttonProps = _objectWithoutProperties(theirProps, [\"placement\", \"trigger\", \"label\", \"inline\", \"arrowIcon\"]);\n  var handleSelect = useCallback(function (index) {\n    setSelectedIndex(index);\n    setOpen(false);\n  }, []);\n  var handleTypeaheadMatch = useCallback(function (index) {\n    if (open) {\n      setActiveIndex(index);\n    } else {\n      handleSelect(index);\n    }\n  }, [open, handleSelect]);\n  var _useBaseFLoating = useBaseFLoating({\n      open: open,\n      setOpen: setOpen,\n      placement: placement\n    }),\n    context = _useBaseFLoating.context,\n    floatingStyles = _useBaseFLoating.floatingStyles,\n    refs = _useBaseFLoating.refs;\n  var listNav = useListNavigation(context, {\n    listRef: elementsRef,\n    activeIndex: activeIndex,\n    selectedIndex: selectedIndex,\n    onNavigate: setActiveIndex\n  });\n  var typeahead = useTypeahead(context, {\n    listRef: labelsRef,\n    activeIndex: activeIndex,\n    selectedIndex: selectedIndex,\n    onMatch: handleTypeaheadMatch\n  });\n  var _useFloatingInteracti = useFloatingInteractions({\n      context: context,\n      role: 'menu',\n      trigger: trigger,\n      interactions: [listNav, typeahead]\n    }),\n    getReferenceProps = _useFloatingInteracti.getReferenceProps,\n    getFloatingProps = _useFloatingInteracti.getFloatingProps,\n    getItemProps = _useFloatingInteracti.getItemProps;\n  var Icon = useMemo(function () {\n    var _placement$split = placement.split('-'),\n      _placement$split2 = _slicedToArray(_placement$split, 1),\n      p = _placement$split2[0];\n    return icons[p] ?? HiOutlineChevronDown;\n  }, [placement]);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(Trigger, _objectSpread({}, buttonProps, {\n      refs: refs,\n      inline: inline,\n      theme: theme,\n      \"data-testid\": dataTestId,\n      className: twMerge(theme.floating.target, buttonProps.className),\n      setButtonWidth: setButtonWidth,\n      getReferenceProps: getReferenceProps,\n      renderTrigger: renderTrigger,\n      children: [label, arrowIcon && _jsx(Icon, {\n        className: theme.arrowIcon\n      })]\n    })), _jsx(DropdownContext.Provider, {\n      value: {\n        activeIndex: activeIndex,\n        dismissOnClick: dismissOnClick,\n        getItemProps: getItemProps,\n        handleSelect: handleSelect\n      },\n      children: open && _jsx(FloatingFocusManager, {\n        context: context,\n        modal: false,\n        children: _jsx(\"div\", _objectSpread({\n          ref: refs.setFloating,\n          style: _objectSpread({}, floatingStyles, {\n            minWidth: buttonWidth\n          }),\n          \"data-testid\": \"flowbite-dropdown\",\n          \"aria-expanded\": open\n        }, getFloatingProps({\n          className: twMerge(theme.floating.base, theme.floating.animation, 'duration-100', !open && theme.floating.hidden, theme.floating.style.auto, className)\n        }), {\n          children: _jsx(FloatingList, {\n            elementsRef: elementsRef,\n            labelsRef: labelsRef,\n            children: _jsx(\"ul\", {\n              className: theme.content,\n              tabIndex: -1,\n              children: children\n            })\n          })\n        }))\n      })\n    })]\n  });\n};\nDropdownComponent.displayName = 'Dropdown';\nDropdownHeader.displayName = 'Dropdown.Header';\nDropdownDivider.displayName = 'Dropdown.Divider';\nexport var Dropdown = Object.assign(DropdownComponent, {\n  Item: DropdownItem,\n  Header: DropdownHeader,\n  Divider: DropdownDivider\n});","map":null,"metadata":{},"sourceType":"module"}