{"ast":null,"code":"// src/index.ts\nimport { filterDOMProps, mergeProps } from \"@react-aria/utils\";\nimport { useFocusable } from \"@react-aria/focus\";\nimport { usePress } from \"@react-aria/interactions\";\nfunction useAriaButton(props, ref) {\n  var _props$elementType = props.elementType,\n    elementType = _props$elementType === void 0 ? \"button\" : _props$elementType,\n    isDisabled = props.isDisabled,\n    onPress = props.onPress,\n    onPressStart = props.onPressStart,\n    onPressEnd = props.onPressEnd,\n    onPressChange = props.onPressChange,\n    preventFocusOnPress = props.preventFocusOnPress,\n    allowFocusWhenDisabled = props.allowFocusWhenDisabled,\n    deprecatedOnClick = props.onClick,\n    href = props.href,\n    target = props.target,\n    rel = props.rel,\n    _props$type = props.type,\n    type = _props$type === void 0 ? \"button\" : _props$type,\n    allowTextSelectionOnPress = props.allowTextSelectionOnPress;\n  var additionalProps;\n  if (elementType === \"button\") {\n    additionalProps = {\n      type: type,\n      disabled: isDisabled\n    };\n  } else {\n    additionalProps = {\n      role: \"button\",\n      tabIndex: isDisabled ? void 0 : 0,\n      href: elementType === \"a\" && isDisabled ? void 0 : href,\n      target: elementType === \"a\" ? target : void 0,\n      type: elementType === \"input\" ? type : void 0,\n      disabled: elementType === \"input\" ? isDisabled : void 0,\n      \"aria-disabled\": !isDisabled || elementType === \"input\" ? void 0 : isDisabled,\n      rel: elementType === \"a\" ? rel : void 0\n    };\n  }\n  var _usePress = usePress({\n      onPressStart: onPressStart,\n      onPressEnd: onPressEnd,\n      onPressChange: onPressChange,\n      onPress: onPress,\n      isDisabled: isDisabled,\n      preventFocusOnPress: preventFocusOnPress,\n      allowTextSelectionOnPress: allowTextSelectionOnPress,\n      ref: ref\n    }),\n    pressProps = _usePress.pressProps,\n    isPressed = _usePress.isPressed;\n  var _useFocusable = useFocusable(props, ref),\n    focusableProps = _useFocusable.focusableProps;\n  if (allowFocusWhenDisabled) {\n    focusableProps.tabIndex = isDisabled ? -1 : focusableProps.tabIndex;\n  }\n  var buttonProps = mergeProps(focusableProps, pressProps, filterDOMProps(props, {\n    labelable: true\n  }));\n  return {\n    isPressed: isPressed,\n    buttonProps: mergeProps(additionalProps, buttonProps, {\n      \"aria-haspopup\": props[\"aria-haspopup\"],\n      \"aria-expanded\": props[\"aria-expanded\"],\n      \"aria-controls\": props[\"aria-controls\"],\n      \"aria-pressed\": props[\"aria-pressed\"],\n      onClick: function onClick(e) {\n        if (deprecatedOnClick) {\n          deprecatedOnClick(e);\n        }\n      }\n    })\n  };\n}\nexport { useAriaButton };","map":null,"metadata":{},"sourceType":"module"}