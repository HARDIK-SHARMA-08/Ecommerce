{"ast":null,"code":"\"use client\";\n\nimport _objectSpread from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport { usePopoverContext } from \"./chunk-SQ3I4X62.mjs\";\n\n// src/popover-content.tsx\nimport { useMemo, useRef } from \"react\";\nimport { forwardRef } from \"@nextui-org/system\";\nimport { DismissButton } from \"@react-aria/overlays\";\nimport { TRANSITION_VARIANTS } from \"@nextui-org/framer-transitions\";\nimport { motion } from \"framer-motion\";\nimport { useDialog } from \"@react-aria/dialog\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { RemoveScroll } from \"react-remove-scroll\";\nimport { getTransformOrigins } from \"@nextui-org/aria-utils\";\nimport { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nvar PopoverContent = forwardRef(function (props, _) {\n  var as = props.as,\n    children = props.children,\n    otherProps = _objectWithoutProperties(props, [\"as\", \"children\"]);\n  var _usePopoverContext = usePopoverContext(),\n    OverlayComponent = _usePopoverContext.Component,\n    isOpen = _usePopoverContext.isOpen,\n    placement = _usePopoverContext.placement,\n    showArrow = _usePopoverContext.showArrow,\n    motionProps = _usePopoverContext.motionProps,\n    backdrop = _usePopoverContext.backdrop,\n    disableAnimation = _usePopoverContext.disableAnimation,\n    shouldBlockScroll = _usePopoverContext.shouldBlockScroll,\n    getPopoverProps = _usePopoverContext.getPopoverProps,\n    getArrowProps = _usePopoverContext.getArrowProps,\n    getDialogProps = _usePopoverContext.getDialogProps,\n    getBackdropProps = _usePopoverContext.getBackdropProps,\n    isNonModal = _usePopoverContext.isNonModal,\n    onClose = _usePopoverContext.onClose;\n  var Component = as || OverlayComponent || \"div\";\n  var dialogRef = useRef(null);\n  var _useDialog = useDialog({}, dialogRef),\n    dialogProps = _useDialog.dialogProps,\n    titleProps = _useDialog.titleProps;\n  delete dialogProps.role;\n  var arrowContent = useMemo(function () {\n    if (!showArrow) return null;\n    return /* @__PURE__ */jsx(\"span\", _objectSpread({}, getArrowProps()));\n  }, [showArrow, getArrowProps]);\n  var content = /* @__PURE__ */jsxs(Fragment, {\n    children: [!isNonModal && /* @__PURE__ */jsx(DismissButton, {\n      onDismiss: onClose\n    }), /* @__PURE__ */jsx(Component, _objectSpread({}, getDialogProps(mergeProps(dialogProps, otherProps)), {\n      ref: dialogRef,\n      children: typeof children === \"function\" ? children(titleProps) : children\n    })), arrowContent, /* @__PURE__ */jsx(DismissButton, {\n      onDismiss: onClose\n    })]\n  });\n  var backdropContent = useMemo(function () {\n    if (backdrop === \"transparent\") {\n      return null;\n    }\n    if (disableAnimation) {\n      return /* @__PURE__ */jsx(\"div\", _objectSpread({}, getBackdropProps()));\n    }\n    return /* @__PURE__ */jsx(motion.div, _objectSpread({\n      animate: \"enter\",\n      exit: \"exit\",\n      initial: \"exit\",\n      variants: TRANSITION_VARIANTS.fade\n    }, getBackdropProps()));\n  }, [backdrop, disableAnimation, getBackdropProps]);\n  return /* @__PURE__ */jsxs(\"div\", _objectSpread({}, getPopoverProps(), {\n    children: [backdropContent, /* @__PURE__ */jsx(RemoveScroll, {\n      forwardProps: true,\n      enabled: shouldBlockScroll && isOpen,\n      removeScrollBar: false,\n      children: disableAnimation ? content : /* @__PURE__ */jsx(motion.div, _objectSpread({\n        animate: \"enter\",\n        exit: \"exit\",\n        initial: \"initial\",\n        style: _objectSpread({}, getTransformOrigins(placement === \"center\" ? \"top\" : placement)),\n        variants: TRANSITION_VARIANTS.scaleSpringOpacity\n      }, motionProps, {\n        children: content\n      }))\n    })]\n  }));\n});\nPopoverContent.displayName = \"NextUI.PopoverContent\";\nvar popover_content_default = PopoverContent;\nexport { popover_content_default };","map":null,"metadata":{},"sourceType":"module"}