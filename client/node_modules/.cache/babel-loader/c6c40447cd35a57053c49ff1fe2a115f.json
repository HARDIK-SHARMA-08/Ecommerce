{"ast":null,"code":"\"use client\";\n\n// src/overlays/ariaHideOutside.ts\nimport _toConsumableArray from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar refCountMap = /* @__PURE__ */new WeakMap();\nvar observerStack = [];\nfunction ariaHideOutside(targets) {\n  var root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.body;\n  var visibleNodes = new Set(targets);\n  var hiddenNodes = /* @__PURE__ */new Set();\n  var walk = function walk(root2) {\n    var _iterator = _createForOfIteratorHelper(root2.querySelectorAll(\"[data-live-announcer], [data-react-aria-top-layer]\")),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var element = _step.value;\n        visibleNodes.add(element);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    var acceptNode = function acceptNode(node) {\n      var parentElement = node.parentElement;\n      if (visibleNodes.has(node) || hiddenNodes.has(parentElement) && parentElement.getAttribute(\"role\") !== \"row\") {\n        return NodeFilter.FILTER_REJECT;\n      }\n      var _iterator2 = _createForOfIteratorHelper(visibleNodes),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var target = _step2.value;\n          if (node.contains(target)) {\n            return NodeFilter.FILTER_SKIP;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return NodeFilter.FILTER_ACCEPT;\n    };\n    var walker = document.createTreeWalker(root2, NodeFilter.SHOW_ELEMENT, {\n      acceptNode: acceptNode\n    });\n    var acceptRoot = acceptNode(root2);\n    if (acceptRoot === NodeFilter.FILTER_ACCEPT) {\n      hide(root2);\n    }\n    if (acceptRoot !== NodeFilter.FILTER_REJECT) {\n      var node = walker.nextNode();\n      while (node != null) {\n        hide(node);\n        node = walker.nextNode();\n      }\n    }\n  };\n  var hide = function hide(node) {\n    var _a;\n    var refCount = (_a = refCountMap.get(node)) != null ? _a : 0;\n    if (node.getAttribute(\"aria-hidden\") === \"true\" && refCount === 0) {\n      return;\n    }\n    if (refCount === 0) {\n      node.setAttribute(\"aria-hidden\", \"true\");\n    }\n    hiddenNodes.add(node);\n    refCountMap.set(node, refCount + 1);\n  };\n  if (observerStack.length) {\n    observerStack[observerStack.length - 1].disconnect();\n  }\n  walk(root);\n  var observer = new MutationObserver(function (changes) {\n    var _iterator3 = _createForOfIteratorHelper(changes),\n      _step3;\n    try {\n      var _loop = function _loop() {\n        var change = _step3.value;\n        if (change.type !== \"childList\" || change.addedNodes.length === 0) {\n          return 1; // continue\n        }\n        if (![].concat(_toConsumableArray(visibleNodes), _toConsumableArray(hiddenNodes)).some(function (node) {\n          return node.contains(change.target);\n        })) {\n          var _iterator4 = _createForOfIteratorHelper(change.removedNodes),\n            _step4;\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var node = _step4.value;\n              if (node instanceof Element) {\n                visibleNodes.delete(node);\n                hiddenNodes.delete(node);\n              }\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n          var _iterator5 = _createForOfIteratorHelper(change.addedNodes),\n            _step5;\n          try {\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              var _node = _step5.value;\n              if ((_node instanceof HTMLElement || _node instanceof SVGElement) && (_node.dataset.liveAnnouncer === \"true\" || _node.dataset.reactAriaTopLayer === \"true\")) {\n                visibleNodes.add(_node);\n              } else if (_node instanceof Element) {\n                walk(_node);\n              }\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n        }\n      };\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        if (_loop()) continue;\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  });\n  observer.observe(root, {\n    childList: true,\n    subtree: true\n  });\n  var observerWrapper = {\n    observe: function observe() {\n      observer.observe(root, {\n        childList: true,\n        subtree: true\n      });\n    },\n    disconnect: function disconnect() {\n      observer.disconnect();\n    }\n  };\n  observerStack.push(observerWrapper);\n  return function () {\n    observer.disconnect();\n    var _iterator6 = _createForOfIteratorHelper(hiddenNodes),\n      _step6;\n    try {\n      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n        var node = _step6.value;\n        var count = refCountMap.get(node);\n        if (count == null) {\n          continue;\n        }\n        if (count === 1) {\n          node.removeAttribute(\"aria-hidden\");\n          refCountMap.delete(node);\n        } else {\n          refCountMap.set(node, count - 1);\n        }\n      }\n    } catch (err) {\n      _iterator6.e(err);\n    } finally {\n      _iterator6.f();\n    }\n    if (observerWrapper === observerStack[observerStack.length - 1]) {\n      observerStack.pop();\n      if (observerStack.length) {\n        observerStack[observerStack.length - 1].observe();\n      }\n    } else {\n      observerStack.splice(observerStack.indexOf(observerWrapper), 1);\n    }\n  };\n}\nexport { ariaHideOutside };","map":null,"metadata":{},"sourceType":"module"}