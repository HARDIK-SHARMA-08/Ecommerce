{"ast":null,"code":"\"use client\";\n\n// src/use-tooltip.ts\nimport _toConsumableArray from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useId, useImperativeHandle } from \"react\";\nimport { useTooltipTriggerState } from \"@react-stately/tooltip\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { useTooltip as useReactAriaTooltip, useTooltipTrigger } from \"@react-aria/tooltip\";\nimport { useOverlayPosition, useOverlay } from \"@react-aria/overlays\";\nimport { mapPropsVariants } from \"@nextui-org/system\";\nimport { popover } from \"@nextui-org/theme\";\nimport { clsx, dataAttr } from \"@nextui-org/shared-utils\";\nimport { mergeRefs } from \"@nextui-org/react-utils\";\nimport { createDOMRef } from \"@nextui-org/react-utils\";\nimport { useMemo, useRef, useCallback } from \"react\";\nimport { toReactAriaPlacement, getArrowPlacement } from \"@nextui-org/aria-utils\";\nfunction useTooltip(originalProps) {\n  var _mapPropsVariants = mapPropsVariants(originalProps, popover.variantKeys),\n    _mapPropsVariants2 = _slicedToArray(_mapPropsVariants, 2),\n    props = _mapPropsVariants2[0],\n    variantProps = _mapPropsVariants2[1];\n  var ref = props.ref,\n    as = props.as,\n    isOpenProp = props.isOpen,\n    content = props.content,\n    children = props.children,\n    defaultOpen = props.defaultOpen,\n    _onOpenChange = props.onOpenChange,\n    isDisabled = props.isDisabled,\n    triggerAction = props.trigger,\n    _props$shouldFlip = props.shouldFlip,\n    shouldFlip = _props$shouldFlip === void 0 ? true : _props$shouldFlip,\n    _props$containerPaddi = props.containerPadding,\n    containerPadding = _props$containerPaddi === void 0 ? 12 : _props$containerPaddi,\n    _props$placement = props.placement,\n    placementProp = _props$placement === void 0 ? \"top\" : _props$placement,\n    _props$delay = props.delay,\n    delay = _props$delay === void 0 ? 0 : _props$delay,\n    _props$closeDelay = props.closeDelay,\n    closeDelay = _props$closeDelay === void 0 ? 500 : _props$closeDelay,\n    _props$showArrow = props.showArrow,\n    showArrow = _props$showArrow === void 0 ? false : _props$showArrow,\n    _props$offset = props.offset,\n    offset = _props$offset === void 0 ? 7 : _props$offset,\n    _props$crossOffset = props.crossOffset,\n    crossOffset = _props$crossOffset === void 0 ? 0 : _props$crossOffset,\n    isDismissable = props.isDismissable,\n    _props$shouldCloseOnB = props.shouldCloseOnBlur,\n    shouldCloseOnBlur = _props$shouldCloseOnB === void 0 ? true : _props$shouldCloseOnB,\n    portalContainer = props.portalContainer,\n    _props$isKeyboardDism = props.isKeyboardDismissDisabled,\n    isKeyboardDismissDisabled = _props$isKeyboardDism === void 0 ? false : _props$isKeyboardDism,\n    shouldCloseOnInteractOutside = props.shouldCloseOnInteractOutside,\n    className = props.className,\n    onClose = props.onClose,\n    motionProps = props.motionProps,\n    classNames = props.classNames,\n    otherProps = _objectWithoutProperties(props, [\"ref\", \"as\", \"isOpen\", \"content\", \"children\", \"defaultOpen\", \"onOpenChange\", \"isDisabled\", \"trigger\", \"shouldFlip\", \"containerPadding\", \"placement\", \"delay\", \"closeDelay\", \"showArrow\", \"offset\", \"crossOffset\", \"isDismissable\", \"shouldCloseOnBlur\", \"portalContainer\", \"isKeyboardDismissDisabled\", \"shouldCloseOnInteractOutside\", \"className\", \"onClose\", \"motionProps\", \"classNames\"]);\n  var Component = as || \"div\";\n  var state = useTooltipTriggerState({\n    delay: delay,\n    closeDelay: closeDelay,\n    isDisabled: isDisabled,\n    defaultOpen: defaultOpen,\n    isOpen: isOpenProp,\n    onOpenChange: function onOpenChange(isOpen2) {\n      _onOpenChange == null ? void 0 : _onOpenChange(isOpen2);\n      if (!isOpen2) {\n        onClose == null ? void 0 : onClose();\n      }\n    }\n  });\n  var triggerRef = useRef(null);\n  var overlayRef = useRef(null);\n  var tooltipId = useId();\n  var isOpen = state.isOpen && !isDisabled;\n  useImperativeHandle(ref, function () {\n    return createDOMRef(overlayRef);\n  });\n  var _useTooltipTrigger = useTooltipTrigger({\n      isDisabled: isDisabled,\n      trigger: triggerAction\n    }, state, triggerRef),\n    triggerProps = _useTooltipTrigger.triggerProps,\n    triggerTooltipProps = _useTooltipTrigger.tooltipProps;\n  var _useReactAriaTooltip = useReactAriaTooltip(_objectSpread({\n      isOpen: isOpen\n    }, mergeProps(props, triggerTooltipProps)), state),\n    tooltipProps = _useReactAriaTooltip.tooltipProps;\n  var _useOverlayPosition = useOverlayPosition({\n      isOpen: isOpen,\n      targetRef: triggerRef,\n      placement: toReactAriaPlacement(placementProp),\n      overlayRef: overlayRef,\n      offset: showArrow ? offset + 3 : offset,\n      crossOffset: crossOffset,\n      shouldFlip: shouldFlip,\n      containerPadding: containerPadding\n    }),\n    positionProps = _useOverlayPosition.overlayProps,\n    arrowProps = _useOverlayPosition.arrowProps,\n    placement = _useOverlayPosition.placement;\n  var _useOverlay = useOverlay({\n      isOpen: isOpen,\n      onClose: state.close,\n      isDismissable: isDismissable,\n      shouldCloseOnBlur: shouldCloseOnBlur,\n      isKeyboardDismissDisabled: isKeyboardDismissDisabled,\n      shouldCloseOnInteractOutside: shouldCloseOnInteractOutside\n    }, overlayRef),\n    overlayProps = _useOverlay.overlayProps;\n  var slots = useMemo(function () {\n    var _a, _b, _c;\n    return popover(_objectSpread({}, variantProps, {\n      radius: (_a = originalProps == null ? void 0 : originalProps.radius) != null ? _a : \"md\",\n      size: (_b = originalProps == null ? void 0 : originalProps.size) != null ? _b : \"md\",\n      shadow: (_c = originalProps == null ? void 0 : originalProps.shadow) != null ? _c : \"sm\"\n    }));\n  }, [].concat(_toConsumableArray(Object.values(variantProps)), [originalProps == null ? void 0 : originalProps.radius, originalProps == null ? void 0 : originalProps.size, originalProps == null ? void 0 : originalProps.shadow]));\n  var baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  var getTriggerProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread({}, mergeProps(triggerProps, props2), {\n      ref: mergeRefs(_ref, triggerRef),\n      \"aria-describedby\": isOpen ? tooltipId : void 0\n    });\n  }, [triggerProps, isOpen, tooltipId, state]);\n  var getTooltipProps = useCallback(function () {\n    return _objectSpread({\n      ref: overlayRef,\n      \"data-open\": dataAttr(isOpen),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-placement\": getArrowPlacement(placement, placementProp),\n      className: slots.base({\n        class: baseStyles\n      })\n    }, mergeProps(tooltipProps, overlayProps, otherProps), {\n      style: mergeProps(positionProps.style, otherProps.style, props.style),\n      id: tooltipId\n    });\n  }, [baseStyles, overlayProps, otherProps, overlayRef, positionProps, slots, tooltipId, tooltipProps]);\n  var getArrowProps = useCallback(function () {\n    return _objectSpread({\n      className: slots.arrow({\n        class: classNames == null ? void 0 : classNames.arrow\n      }),\n      \"data-placement\": getArrowPlacement(placement, placementProp)\n    }, arrowProps);\n  }, [arrowProps, placement, placementProp, slots, classNames]);\n  return {\n    Component: Component,\n    content: content,\n    children: children,\n    isOpen: isOpen,\n    triggerRef: triggerRef,\n    showArrow: showArrow,\n    portalContainer: portalContainer,\n    placement: placementProp,\n    disableAnimation: originalProps == null ? void 0 : originalProps.disableAnimation,\n    isDisabled: isDisabled,\n    motionProps: motionProps,\n    getTriggerProps: getTriggerProps,\n    getTooltipProps: getTooltipProps,\n    getArrowProps: getArrowProps\n  };\n}\nexport { useTooltip };","map":null,"metadata":{},"sourceType":"module"}