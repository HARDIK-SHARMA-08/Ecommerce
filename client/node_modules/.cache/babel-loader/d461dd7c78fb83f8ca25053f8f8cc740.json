{"ast":null,"code":"import _objectSpread from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n// src/index.ts\nimport { chain } from \"@react-aria/utils\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport { useCallbackRef } from \"@nextui-org/use-callback-ref\";\nimport { useCallback, useId } from \"react\";\nfunction useDisclosure() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var idProp = props.id,\n    defaultOpen = props.defaultOpen,\n    isOpenProp = props.isOpen,\n    onCloseProp = props.onClose,\n    onOpenProp = props.onOpen,\n    _props$onChange = props.onChange,\n    onChange = _props$onChange === void 0 ? function () {} : _props$onChange;\n  var onOpenPropCallbackRef = useCallbackRef(onOpenProp);\n  var onClosePropCallbackRef = useCallbackRef(onCloseProp);\n  var _useControlledState = useControlledState(isOpenProp, defaultOpen || false, onChange),\n    _useControlledState2 = _slicedToArray(_useControlledState, 2),\n    isOpen = _useControlledState2[0],\n    setIsOpen = _useControlledState2[1];\n  var reactId = useId();\n  var id = idProp || reactId;\n  var isControlled = isOpenProp !== void 0;\n  var onClose = useCallback(function () {\n    if (!isControlled) {\n      setIsOpen(false);\n    }\n    onClosePropCallbackRef == null ? void 0 : onClosePropCallbackRef();\n  }, [isControlled, onClosePropCallbackRef]);\n  var onOpen = useCallback(function () {\n    if (!isControlled) {\n      setIsOpen(true);\n    }\n    onOpenPropCallbackRef == null ? void 0 : onOpenPropCallbackRef();\n  }, [isControlled, onOpenPropCallbackRef]);\n  var onOpenChange = useCallback(function () {\n    var action = isOpen ? onClose : onOpen;\n    action();\n  }, [isOpen, onOpen, onClose]);\n  return {\n    isOpen: !!isOpen,\n    onOpen: onOpen,\n    onClose: onClose,\n    onOpenChange: onOpenChange,\n    isControlled: isControlled,\n    getButtonProps: function getButtonProps() {\n      var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return _objectSpread({}, props2, {\n        \"aria-expanded\": isOpen,\n        \"aria-controls\": id,\n        onClick: chain(props2.onClick, onOpenChange)\n      });\n    },\n    getDisclosureProps: function getDisclosureProps() {\n      var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return _objectSpread({}, props2, {\n        hidden: !isOpen,\n        id: id\n      });\n    }\n  };\n}\nexport { useDisclosure };","map":null,"metadata":{},"sourceType":"module"}