{"ast":null,"code":"\"use client\";\n\n// src/use-checkbox-group.ts\nimport _objectSpread from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport { useCallback, useMemo } from \"react\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { checkboxGroup } from \"@nextui-org/theme\";\nimport { useCheckboxGroup as useReactAriaCheckboxGroup } from \"@react-aria/checkbox\";\nimport { useCheckboxGroupState } from \"@react-stately/checkbox\";\nimport { useDOMRef } from \"@nextui-org/react-utils\";\nimport { clsx, safeAriaLabel } from \"@nextui-org/shared-utils\";\nfunction useCheckboxGroup(props) {\n  var as = props.as,\n    ref = props.ref,\n    classNames = props.classNames,\n    children = props.children,\n    label = props.label,\n    radius = props.radius,\n    value = props.value,\n    name = props.name,\n    defaultValue = props.defaultValue,\n    _props$size = props.size,\n    size = _props$size === void 0 ? \"md\" : _props$size,\n    _props$color = props.color,\n    color = _props$color === void 0 ? \"primary\" : _props$color,\n    _props$orientation = props.orientation,\n    orientation = _props$orientation === void 0 ? \"vertical\" : _props$orientation,\n    _props$lineThrough = props.lineThrough,\n    lineThrough = _props$lineThrough === void 0 ? false : _props$lineThrough,\n    _props$isDisabled = props.isDisabled,\n    isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,\n    _props$disableAnimati = props.disableAnimation,\n    disableAnimation = _props$disableAnimati === void 0 ? false : _props$disableAnimati,\n    validationState = props.validationState,\n    _props$isInvalid = props.isInvalid,\n    isInvalid = _props$isInvalid === void 0 ? validationState === \"invalid\" : _props$isInvalid,\n    isReadOnly = props.isReadOnly,\n    isRequired = props.isRequired,\n    onValueChange = props.onValueChange,\n    description = props.description,\n    errorMessage = props.errorMessage,\n    className = props.className,\n    otherProps = _objectWithoutProperties(props, [\"as\", \"ref\", \"classNames\", \"children\", \"label\", \"radius\", \"value\", \"name\", \"defaultValue\", \"size\", \"color\", \"orientation\", \"lineThrough\", \"isDisabled\", \"disableAnimation\", \"validationState\", \"isInvalid\", \"isReadOnly\", \"isRequired\", \"onValueChange\", \"description\", \"errorMessage\", \"className\"]);\n  var Component = as || \"div\";\n  var domRef = useDOMRef(ref);\n  var checkboxGroupProps = useMemo(function () {\n    return _objectSpread({\n      value: value,\n      name: name,\n      \"aria-label\": safeAriaLabel(otherProps[\"aria-label\"], label),\n      defaultValue: defaultValue,\n      isRequired: isRequired,\n      isInvalid: isInvalid,\n      isReadOnly: isReadOnly,\n      orientation: orientation,\n      onChange: onValueChange\n    }, otherProps);\n  }, [value, name, label, defaultValue, isRequired, isReadOnly, isInvalid, orientation, onValueChange, otherProps[\"aria-label\"], otherProps]);\n  var groupState = useCheckboxGroupState(checkboxGroupProps);\n  var _useReactAriaCheckbox = useReactAriaCheckboxGroup(checkboxGroupProps, groupState),\n    labelProps = _useReactAriaCheckbox.labelProps,\n    groupProps = _useReactAriaCheckbox.groupProps,\n    descriptionProps = _useReactAriaCheckbox.descriptionProps,\n    errorMessageProps = _useReactAriaCheckbox.errorMessageProps;\n  var context = useMemo(function () {\n    return {\n      size: size,\n      color: color,\n      radius: radius,\n      lineThrough: lineThrough,\n      isInvalid: isInvalid,\n      isDisabled: isDisabled,\n      disableAnimation: disableAnimation,\n      groupState: groupState\n    };\n  }, [size, color, radius, lineThrough, isDisabled, disableAnimation, isInvalid, groupState == null ? void 0 : groupState.value, groupState == null ? void 0 : groupState.isDisabled, groupState == null ? void 0 : groupState.isReadOnly, groupState == null ? void 0 : groupState.isInvalid, groupState == null ? void 0 : groupState.isSelected]);\n  var slots = useMemo(function () {\n    return checkboxGroup({\n      isRequired: isRequired,\n      isInvalid: isInvalid,\n      disableAnimation: disableAnimation\n    });\n  }, [isRequired, isInvalid, disableAnimation]);\n  var baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  var getGroupProps = useCallback(function () {\n    return _objectSpread({\n      ref: domRef,\n      className: slots.base({\n        class: baseStyles\n      })\n    }, mergeProps(groupProps, otherProps));\n  }, [slots, domRef, baseStyles, groupProps, otherProps]);\n  var getLabelProps = useCallback(function () {\n    return _objectSpread({\n      className: slots.label({\n        class: classNames == null ? void 0 : classNames.label\n      })\n    }, labelProps);\n  }, [slots, labelProps, classNames == null ? void 0 : classNames.label]);\n  var getWrapperProps = useCallback(function () {\n    return {\n      className: slots.wrapper({\n        class: classNames == null ? void 0 : classNames.wrapper\n      }),\n      role: \"presentation\",\n      \"data-orientation\": orientation\n    };\n  }, [slots, orientation, classNames == null ? void 0 : classNames.wrapper]);\n  var getDescriptionProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _objectSpread({}, props2, descriptionProps, {\n      className: slots.description({\n        class: clsx(classNames == null ? void 0 : classNames.description, props2 == null ? void 0 : props2.className)\n      })\n    });\n  }, [slots, descriptionProps, classNames == null ? void 0 : classNames.description]);\n  var getErrorMessageProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _objectSpread({}, props2, errorMessageProps, {\n      className: slots.errorMessage({\n        class: clsx(classNames == null ? void 0 : classNames.errorMessage, props2 == null ? void 0 : props2.className)\n      })\n    });\n  }, [slots, errorMessageProps, classNames == null ? void 0 : classNames.errorMessage]);\n  return {\n    Component: Component,\n    children: children,\n    label: label,\n    context: context,\n    description: description,\n    errorMessage: errorMessage,\n    getGroupProps: getGroupProps,\n    getLabelProps: getLabelProps,\n    getWrapperProps: getWrapperProps,\n    getDescriptionProps: getDescriptionProps,\n    getErrorMessageProps: getErrorMessageProps\n  };\n}\nexport { useCheckboxGroup };","map":null,"metadata":{},"sourceType":"module"}