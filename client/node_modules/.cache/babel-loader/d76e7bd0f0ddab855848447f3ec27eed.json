{"ast":null,"code":"import _objectSpread from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { mergeProps as $4vDl6$mergeProps, filterDOMProps as $4vDl6$filterDOMProps, useFormReset as $4vDl6$useFormReset, useId as $4vDl6$useId } from \"@react-aria/utils\";\nimport { useFocusable as $4vDl6$useFocusable, getFocusableTreeWalker as $4vDl6$getFocusableTreeWalker } from \"@react-aria/focus\";\nimport { usePress as $4vDl6$usePress, useFocusWithin as $4vDl6$useFocusWithin } from \"@react-aria/interactions\";\nimport { useField as $4vDl6$useField } from \"@react-aria/label\";\nimport { useLocale as $4vDl6$useLocale } from \"@react-aria/i18n\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nvar $884aeceb3d67f00f$export$3b7b268d09480394 = new WeakMap();\nvar $884aeceb3d67f00f$export$8e8b214e06dd397d = new WeakMap();\nvar $884aeceb3d67f00f$export$61c8d3f0151e21b2 = new WeakMap();\nfunction $0d5c49892c1215da$export$37b0961d2f4751e2(props, state, ref) {\n  var value = props.value,\n    children = props.children,\n    ariaLabel = props[\"aria-label\"],\n    ariaLabelledby = props[\"aria-labelledby\"];\n  var isDisabled = props.isDisabled || state.isDisabled;\n  var hasChildren = children != null;\n  var hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel) console.warn(\"If you do not provide children, you must specify an aria-label for accessibility\");\n  var checked = state.selectedValue === value;\n  var onChange = function onChange(e) {\n    e.stopPropagation();\n    state.setSelectedValue(value);\n  };\n  var _ref = (0, $4vDl6$usePress)({\n      isDisabled: isDisabled\n    }),\n    pressProps = _ref.pressProps,\n    isPressed = _ref.isPressed;\n  var _ref2 = (0, $4vDl6$useFocusable)((0, $4vDl6$mergeProps)(props, {\n      onFocus: function onFocus() {\n        return state.setLastFocusedValue(value);\n      }\n    }), ref),\n    focusableProps = _ref2.focusableProps;\n  var interactions = (0, $4vDl6$mergeProps)(pressProps, focusableProps);\n  var domProps = (0, $4vDl6$filterDOMProps)(props, {\n    labelable: true\n  });\n  var tabIndex = -1;\n  if (state.selectedValue != null) {\n    if (state.selectedValue === value) tabIndex = 0;\n  } else if (state.lastFocusedValue === value || state.lastFocusedValue == null) tabIndex = 0;\n  if (isDisabled) tabIndex = undefined;\n  (0, $4vDl6$useFormReset)(ref, state.selectedValue, state.setSelectedValue);\n  return {\n    inputProps: (0, $4vDl6$mergeProps)(domProps, _objectSpread({}, interactions, {\n      type: \"radio\",\n      name: (0, $884aeceb3d67f00f$export$3b7b268d09480394).get(state),\n      tabIndex: tabIndex,\n      disabled: isDisabled,\n      checked: checked,\n      value: value,\n      onChange: onChange,\n      \"aria-describedby\": [props[\"aria-describedby\"], state.isInvalid ? (0, $884aeceb3d67f00f$export$61c8d3f0151e21b2).get(state) : null, (0, $884aeceb3d67f00f$export$8e8b214e06dd397d).get(state)].filter(Boolean).join(\" \") || undefined\n    })),\n    isDisabled: isDisabled,\n    isSelected: checked,\n    isPressed: isPressed\n  };\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $430f30ed08ec25fa$export$62b9571f283ff5c2(props, state) {\n  var name = props.name,\n    isReadOnly = props.isReadOnly,\n    isRequired = props.isRequired,\n    isDisabled = props.isDisabled,\n    _props$orientation = props.orientation,\n    orientation = _props$orientation === void 0 ? \"vertical\" : _props$orientation;\n  var _ref3 = (0, $4vDl6$useLocale)(),\n    direction = _ref3.direction;\n  var _ref4 = (0, $4vDl6$useField)(_objectSpread({}, props, {\n      // Radio group is not an HTML input element so it\n      // shouldn't be labeled by a <label> element.\n      labelElementType: \"span\"\n    })),\n    labelProps = _ref4.labelProps,\n    fieldProps = _ref4.fieldProps,\n    descriptionProps = _ref4.descriptionProps,\n    errorMessageProps = _ref4.errorMessageProps;\n  (0, $884aeceb3d67f00f$export$8e8b214e06dd397d).set(state, descriptionProps.id);\n  (0, $884aeceb3d67f00f$export$61c8d3f0151e21b2).set(state, errorMessageProps.id);\n  var domProps = (0, $4vDl6$filterDOMProps)(props, {\n    labelable: true\n  });\n  // When the radio group loses focus, reset the focusable radio to null if\n  // there is no selection. This allows tabbing into the group from either\n  // direction to go to the first or last radio.\n  var _ref5 = (0, $4vDl6$useFocusWithin)({\n      onBlurWithin: function onBlurWithin() {\n        if (!state.selectedValue) state.setLastFocusedValue(null);\n      }\n    }),\n    focusWithinProps = _ref5.focusWithinProps;\n  var onKeyDown = function onKeyDown(e) {\n    var nextDir;\n    switch (e.key) {\n      case \"ArrowRight\":\n        if (direction === \"rtl\" && orientation !== \"vertical\") nextDir = \"prev\";else nextDir = \"next\";\n        break;\n      case \"ArrowLeft\":\n        if (direction === \"rtl\" && orientation !== \"vertical\") nextDir = \"next\";else nextDir = \"prev\";\n        break;\n      case \"ArrowDown\":\n        nextDir = \"next\";\n        break;\n      case \"ArrowUp\":\n        nextDir = \"prev\";\n        break;\n      default:\n        return;\n    }\n    e.preventDefault();\n    var walker = (0, $4vDl6$getFocusableTreeWalker)(e.currentTarget, {\n      from: e.target\n    });\n    var nextElem;\n    if (nextDir === \"next\") {\n      nextElem = walker.nextNode();\n      if (!nextElem) {\n        walker.currentNode = e.currentTarget;\n        nextElem = walker.firstChild();\n      }\n    } else {\n      nextElem = walker.previousNode();\n      if (!nextElem) {\n        walker.currentNode = e.currentTarget;\n        nextElem = walker.lastChild();\n      }\n    }\n    if (nextElem) {\n      // Call focus on nextElem so that keyboard navigation scrolls the radio into view\n      nextElem.focus();\n      state.setSelectedValue(nextElem.value);\n    }\n  };\n  var groupName = (0, $4vDl6$useId)(name);\n  (0, $884aeceb3d67f00f$export$3b7b268d09480394).set(state, groupName);\n  return {\n    radioGroupProps: (0, $4vDl6$mergeProps)(domProps, _objectSpread({\n      // https://www.w3.org/TR/wai-aria-1.2/#radiogroup\n      role: \"radiogroup\",\n      onKeyDown: onKeyDown,\n      \"aria-invalid\": state.isInvalid || undefined,\n      \"aria-errormessage\": props[\"aria-errormessage\"],\n      \"aria-readonly\": isReadOnly || undefined,\n      \"aria-required\": isRequired || undefined,\n      \"aria-disabled\": isDisabled || undefined,\n      \"aria-orientation\": orientation\n    }, fieldProps, focusWithinProps)),\n    labelProps: labelProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps\n  };\n}\nexport { $0d5c49892c1215da$export$37b0961d2f4751e2 as useRadio, $430f30ed08ec25fa$export$62b9571f283ff5c2 as useRadioGroup };","map":null,"metadata":{},"sourceType":"module"}