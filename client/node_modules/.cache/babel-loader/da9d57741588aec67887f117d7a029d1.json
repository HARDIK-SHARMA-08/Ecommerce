{"ast":null,"code":"\"use client\";\n\n// src/dom.ts\nimport _objectSpread from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { useImperativeHandle, useLayoutEffect, useRef } from \"react\";\nfunction canUseDOM() {\n  return !!(typeof window !== \"undefined\" && window.document && window.document.createElement);\n}\nvar isBrowser = canUseDOM();\nfunction getUserAgentBrowser(navigator) {\n  var ua = navigator.userAgent,\n    vendor = navigator.vendor;\n  var android = /(android)/i.test(ua);\n  switch (true) {\n    case /CriOS/.test(ua):\n      return \"Chrome for iOS\";\n    case /Edg\\//.test(ua):\n      return \"Edge\";\n    case android && /Silk\\//.test(ua):\n      return \"Silk\";\n    case /Chrome/.test(ua) && /Google Inc/.test(vendor):\n      return \"Chrome\";\n    case /Firefox\\/\\d+\\.\\d+$/.test(ua):\n      return \"Firefox\";\n    case android:\n      return \"AOSP\";\n    case /MSIE|Trident/.test(ua):\n      return \"IE\";\n    case /Safari/.test(navigator.userAgent) && /Apple Computer/.test(ua):\n      return \"Safari\";\n    case /AppleWebKit/.test(ua):\n      return \"WebKit\";\n    default:\n      return null;\n  }\n}\nfunction getUserAgentOS(navigator) {\n  var ua = navigator.userAgent,\n    platform = navigator.platform;\n  switch (true) {\n    case /Android/.test(ua):\n      return \"Android\";\n    case /iPhone|iPad|iPod/.test(platform):\n      return \"iOS\";\n    case /Win/.test(platform):\n      return \"Windows\";\n    case /Mac/.test(platform):\n      return \"Mac\";\n    case /CrOS/.test(ua):\n      return \"Chrome OS\";\n    case /Firefox/.test(ua):\n      return \"Firefox OS\";\n    default:\n      return null;\n  }\n}\nfunction detectDeviceType(navigator) {\n  var ua = navigator.userAgent;\n  if (/(tablet)|(iPad)|(Nexus 9)/i.test(ua)) return \"tablet\";\n  if (/(mobi)/i.test(ua)) return \"phone\";\n  return \"desktop\";\n}\nfunction detectOS(os) {\n  if (!isBrowser) return false;\n  return getUserAgentOS(window.navigator) === os;\n}\nfunction detectBrowser(browser) {\n  if (!isBrowser) return false;\n  return getUserAgentBrowser(window.navigator) === browser;\n}\nfunction detectTouch() {\n  if (!isBrowser) return false;\n  return window.ontouchstart === null && window.ontouchmove === null && window.ontouchend === null;\n}\nfunction createDOMRef(ref) {\n  return {\n    UNSAFE_getDOMNode: function UNSAFE_getDOMNode() {\n      return ref.current;\n    }\n  };\n}\nfunction createFocusableRef(domRef) {\n  var focusableRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : domRef;\n  return _objectSpread({}, createDOMRef(domRef), {\n    focus: function focus() {\n      if (focusableRef.current) {\n        focusableRef.current.focus();\n      }\n    }\n  });\n}\nfunction useDOMRef(ref) {\n  var domRef = useRef(null);\n  useImperativeHandle(ref, function () {\n    return domRef.current;\n  });\n  return domRef;\n}\nfunction useFocusableRef(ref, focusableRef) {\n  var domRef = useRef(null);\n  useImperativeHandle(ref, function () {\n    return createFocusableRef(domRef, focusableRef);\n  });\n  return domRef;\n}\nfunction useSyncRef(context, ref) {\n  useLayoutEffect(function () {\n    if (context && context.ref && ref && ref.current) {\n      context.ref.current = ref.current;\n      return function () {\n        var _a;\n        if ((_a = context.ref) == null ? void 0 : _a.current) {\n          context.ref.current = null;\n        }\n      };\n    }\n  }, [context, ref]);\n}\nexport { canUseDOM, isBrowser, getUserAgentBrowser, getUserAgentOS, detectDeviceType, detectOS, detectBrowser, detectTouch, createDOMRef, createFocusableRef, useDOMRef, useFocusableRef, useSyncRef };","map":null,"metadata":{},"sourceType":"module"}