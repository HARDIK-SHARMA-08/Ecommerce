{"ast":null,"code":"\"use client\";\n\n// src/use-button-group.ts\nimport _toConsumableArray from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { buttonGroup } from \"@nextui-org/theme\";\nimport { mapPropsVariants } from \"@nextui-org/system\";\nimport { useDOMRef } from \"@nextui-org/react-utils\";\nimport { useMemo, useCallback } from \"react\";\nfunction useButtonGroup(originalProps) {\n  var _mapPropsVariants = mapPropsVariants(originalProps, buttonGroup.variantKeys),\n    _mapPropsVariants2 = _slicedToArray(_mapPropsVariants, 2),\n    props = _mapPropsVariants2[0],\n    variantProps = _mapPropsVariants2[1];\n  var ref = props.ref,\n    as = props.as,\n    children = props.children,\n    _props$color = props.color,\n    color = _props$color === void 0 ? \"default\" : _props$color,\n    _props$size = props.size,\n    size = _props$size === void 0 ? \"md\" : _props$size,\n    _props$variant = props.variant,\n    variant = _props$variant === void 0 ? \"solid\" : _props$variant,\n    radius = props.radius,\n    _props$isDisabled = props.isDisabled,\n    isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,\n    _props$disableAnimati = props.disableAnimation,\n    disableAnimation = _props$disableAnimati === void 0 ? false : _props$disableAnimati,\n    _props$disableRipple = props.disableRipple,\n    disableRipple = _props$disableRipple === void 0 ? false : _props$disableRipple,\n    _props$isIconOnly = props.isIconOnly,\n    isIconOnly = _props$isIconOnly === void 0 ? false : _props$isIconOnly,\n    className = props.className,\n    otherProps = _objectWithoutProperties(props, [\"ref\", \"as\", \"children\", \"color\", \"size\", \"variant\", \"radius\", \"isDisabled\", \"disableAnimation\", \"disableRipple\", \"isIconOnly\", \"className\"]);\n  var Component = as || \"div\";\n  var domRef = useDOMRef(ref);\n  var classNames = useMemo(function () {\n    return buttonGroup(_objectSpread({}, variantProps, {\n      className: className\n    }));\n  }, [].concat(_toConsumableArray(Object.values(variantProps)), [className]));\n  var context = useMemo(function () {\n    return {\n      size: size,\n      color: color,\n      variant: variant,\n      radius: radius,\n      isIconOnly: isIconOnly,\n      isDisabled: isDisabled,\n      disableAnimation: disableAnimation,\n      disableRipple: disableRipple,\n      fullWidth: !!(originalProps == null ? void 0 : originalProps.fullWidth)\n    };\n  }, [size, color, variant, radius, isDisabled, isIconOnly, disableAnimation, disableRipple, originalProps == null ? void 0 : originalProps.fullWidth]);\n  var getButtonGroupProps = useCallback(function () {\n    return _objectSpread({\n      role: \"group\"\n    }, otherProps);\n  }, [otherProps]);\n  return {\n    Component: Component,\n    children: children,\n    domRef: domRef,\n    context: context,\n    classNames: classNames,\n    getButtonGroupProps: getButtonGroupProps\n  };\n}\nexport { useButtonGroup };","map":null,"metadata":{},"sourceType":"module"}