{"ast":null,"code":"import _objectSpread from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Children, cloneElement, useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { HiOutlineChevronLeft, HiOutlineChevronRight } from 'react-icons/hi';\nimport ScrollContainer from 'react-indiana-drag-scroll';\nimport { twMerge } from 'tailwind-merge';\nimport { useTheme } from '../../';\nimport { isClient } from '../../helpers/is-client';\nimport { mergeDeep } from '../../helpers/merge-deep';\nexport var Carousel = function Carousel(_ref) {\n  var children = _ref.children,\n    _ref$indicators = _ref.indicators,\n    indicators = _ref$indicators === void 0 ? true : _ref$indicators,\n    leftControl = _ref.leftControl,\n    rightControl = _ref.rightControl,\n    _ref$slide = _ref.slide,\n    slide = _ref$slide === void 0 ? true : _ref$slide,\n    slideInterval = _ref.slideInterval,\n    className = _ref.className,\n    _ref$theme = _ref.theme,\n    customTheme = _ref$theme === void 0 ? {} : _ref$theme,\n    _ref$onSlideChange = _ref.onSlideChange,\n    onSlideChange = _ref$onSlideChange === void 0 ? null : _ref$onSlideChange,\n    _ref$pauseOnHover = _ref.pauseOnHover,\n    pauseOnHover = _ref$pauseOnHover === void 0 ? false : _ref$pauseOnHover,\n    props = _objectWithoutProperties(_ref, [\"children\", \"indicators\", \"leftControl\", \"rightControl\", \"slide\", \"slideInterval\", \"className\", \"theme\", \"onSlideChange\", \"pauseOnHover\"]);\n  var theme = mergeDeep(useTheme().theme.carousel, customTheme);\n  var isDeviceMobile = isClient() && navigator.userAgent.indexOf('IEMobile') !== -1;\n  var carouselContainer = useRef(null);\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    activeItem = _useState2[0],\n    setActiveItem = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isDragging = _useState4[0],\n    setIsDragging = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isHovering = _useState6[0],\n    setIsHovering = _useState6[1];\n  var didMountRef = useRef(false);\n  var items = useMemo(function () {\n    return Children.map(children, function (child) {\n      return cloneElement(child, {\n        className: twMerge(theme.item.base, child.props.className)\n      });\n    });\n  }, [children, theme.item.base]);\n  var navigateTo = useCallback(function (item) {\n    return function () {\n      if (!items) return;\n      item = (item + items.length) % items.length;\n      if (carouselContainer.current) {\n        carouselContainer.current.scrollLeft = carouselContainer.current.clientWidth * item;\n      }\n      setActiveItem(item);\n    };\n  }, [items]);\n  useEffect(function () {\n    if (carouselContainer.current && !isDragging && carouselContainer.current.scrollLeft !== 0) {\n      setActiveItem(Math.round(carouselContainer.current.scrollLeft / carouselContainer.current.clientWidth));\n    }\n  }, [isDragging]);\n  useEffect(function () {\n    if (slide && !(pauseOnHover && isHovering)) {\n      var intervalId = setInterval(function () {\n        return !isDragging && navigateTo(activeItem + 1)();\n      }, slideInterval ?? 3000);\n      return function () {\n        return clearInterval(intervalId);\n      };\n    }\n  }, [activeItem, isDragging, navigateTo, slide, slideInterval, pauseOnHover, isHovering]);\n  useEffect(function () {\n    if (didMountRef.current) {\n      onSlideChange && onSlideChange(activeItem);\n    } else {\n      didMountRef.current = true;\n    }\n  }, [onSlideChange, activeItem]);\n  var handleDragging = function handleDragging(dragging) {\n    return function () {\n      return setIsDragging(dragging);\n    };\n  };\n  var setHoveringTrue = useCallback(function () {\n    return setIsHovering(true);\n  }, [setIsHovering]);\n  var setHoveringFalse = useCallback(function () {\n    return setIsHovering(false);\n  }, [setIsHovering]);\n  return _jsxs(\"div\", _objectSpread({\n    className: twMerge(theme.root.base, className),\n    \"data-testid\": \"carousel\",\n    onMouseEnter: setHoveringTrue,\n    onMouseLeave: setHoveringFalse,\n    onTouchStart: setHoveringTrue,\n    onTouchEnd: setHoveringFalse\n  }, props, {\n    children: [_jsx(ScrollContainer, {\n      className: twMerge(theme.scrollContainer.base, (isDeviceMobile || !isDragging) && theme.scrollContainer.snap),\n      draggingClassName: \"cursor-grab\",\n      innerRef: carouselContainer,\n      onEndScroll: handleDragging(false),\n      onStartScroll: handleDragging(true),\n      vertical: false,\n      children: items?.map(function (item, index) {\n        return _jsx(\"div\", {\n          className: theme.item.wrapper,\n          \"data-active\": activeItem === index,\n          \"data-testid\": \"carousel-item\",\n          children: item\n        }, index);\n      })\n    }), indicators && _jsx(\"div\", {\n      className: theme.indicators.wrapper,\n      children: items?.map(function (_, index) {\n        return _jsx(\"button\", {\n          className: twMerge(theme.indicators.base, theme.indicators.active[index === activeItem ? 'on' : 'off']),\n          onClick: navigateTo(index),\n          \"data-testid\": \"carousel-indicator\",\n          \"aria-label\": \"Slide \".concat(index + 1)\n        }, index);\n      })\n    }), items && _jsxs(_Fragment, {\n      children: [_jsx(\"div\", {\n        className: theme.root.leftControl,\n        children: _jsx(\"button\", {\n          className: \"group\",\n          \"data-testid\": \"carousel-left-control\",\n          onClick: navigateTo(activeItem - 1),\n          type: \"button\",\n          \"aria-label\": \"Previous slide\",\n          children: leftControl ? leftControl : _jsx(DefaultLeftControl, {\n            theme: customTheme\n          })\n        })\n      }), _jsx(\"div\", {\n        className: theme.root.rightControl,\n        children: _jsx(\"button\", {\n          className: \"group\",\n          \"data-testid\": \"carousel-right-control\",\n          onClick: navigateTo(activeItem + 1),\n          type: \"button\",\n          \"aria-label\": \"Next slide\",\n          children: rightControl ? rightControl : _jsx(DefaultRightControl, {\n            theme: customTheme\n          })\n        })\n      })]\n    })]\n  }));\n};\nvar DefaultLeftControl = function DefaultLeftControl(_ref2) {\n  var _ref2$theme = _ref2.theme,\n    customTheme = _ref2$theme === void 0 ? {} : _ref2$theme;\n  var theme = mergeDeep(useTheme().theme.carousel, customTheme);\n  return _jsx(\"span\", {\n    className: theme.control.base,\n    children: _jsx(HiOutlineChevronLeft, {\n      className: theme.control.icon\n    })\n  });\n};\nvar DefaultRightControl = function DefaultRightControl(_ref3) {\n  var _ref3$theme = _ref3.theme,\n    customTheme = _ref3$theme === void 0 ? {} : _ref3$theme;\n  var theme = mergeDeep(useTheme().theme.carousel, customTheme);\n  return _jsx(\"span\", {\n    className: theme.control.base,\n    children: _jsx(HiOutlineChevronRight, {\n      className: theme.control.icon\n    })\n  });\n};\nCarousel.displayName = 'Carousel';","map":null,"metadata":{},"sourceType":"module"}