{"ast":null,"code":"export var Views;\n(function (Views) {\n  Views[Views[\"Days\"] = 0] = \"Days\";\n  Views[Views[\"Months\"] = 1] = \"Months\";\n  Views[Views[\"Years\"] = 2] = \"Years\";\n  Views[Views[\"Decades\"] = 3] = \"Decades\";\n})(Views || (Views = {}));\nexport var WeekStart;\n(function (WeekStart) {\n  WeekStart[WeekStart[\"Saturday\"] = 0] = \"Saturday\";\n  WeekStart[WeekStart[\"Sunday\"] = 1] = \"Sunday\";\n  WeekStart[WeekStart[\"Monday\"] = 2] = \"Monday\";\n})(WeekStart || (WeekStart = {}));\nexport var isDateInRange = function isDateInRange(date, minDate, maxDate) {\n  var dateTime = new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime();\n  if (minDate && maxDate) {\n    var minDateTime = new Date(minDate.getFullYear(), minDate.getMonth(), minDate.getDate()).getTime();\n    var maxDateTime = new Date(maxDate.getFullYear(), maxDate.getMonth(), maxDate.getDate()).getTime();\n    return dateTime >= minDateTime && dateTime <= maxDateTime;\n  }\n  if (minDate) {\n    var _minDateTime = new Date(minDate.getFullYear(), minDate.getMonth(), minDate.getDate()).getTime();\n    return dateTime >= _minDateTime;\n  }\n  if (maxDate) {\n    var _maxDateTime = new Date(maxDate.getFullYear(), maxDate.getMonth(), maxDate.getDate()).getTime();\n    return dateTime <= _maxDateTime;\n  }\n  return true;\n};\nexport var isDateEqual = function isDateEqual(date, selectedDate) {\n  date = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n  selectedDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  return date.getTime() === selectedDate.getTime();\n};\nexport var getFirstDateInRange = function getFirstDateInRange(date, minDate, maxDate) {\n  if (!isDateInRange(date, minDate, maxDate)) {\n    if (minDate && date < minDate) {\n      date = minDate;\n    } else if (maxDate && date > maxDate) {\n      date = maxDate;\n    }\n  }\n  return date;\n};\nexport var getFirstDayOfTheMonth = function getFirstDayOfTheMonth(date, weekStart) {\n  var firstDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1);\n  var dayOfWeek = firstDayOfMonth.getDay();\n  var diff = (dayOfWeek - weekStart + 7) % 7;\n  return addDays(firstDayOfMonth, -diff);\n};\nexport var getWeekDays = function getWeekDays(lang, weekStart) {\n  var weekdays = [];\n  var date = new Date();\n  var formatter = new Intl.DateTimeFormat(lang, {\n    weekday: 'short'\n  });\n  for (var i = 0; i < 7; i++) {\n    var dayIndex = (i + weekStart + 1) % 7; // Calculate the correct day index based on weekStart\n    date.setDate(dayIndex + 1);\n    var formattedWeekday = formatter.format(date);\n    weekdays.push(formattedWeekday.slice(0, 2).charAt(0).toUpperCase() + formattedWeekday.slice(1, 3));\n  }\n  return weekdays;\n};\nexport var addDays = function addDays(date, amount) {\n  var newDate = new Date(date);\n  newDate.setDate(newDate.getDate() + amount);\n  return newDate;\n};\nexport var addMonths = function addMonths(date, amount) {\n  var newDate = new Date(date);\n  newDate.setMonth(newDate.getMonth() + amount);\n  return newDate;\n};\nexport var addYears = function addYears(date, amount) {\n  var newDate = new Date(date);\n  newDate.setFullYear(newDate.getFullYear() + amount);\n  return newDate;\n};\nexport var getFormattedDate = function getFormattedDate(language, date, options) {\n  var defaultOptions = {\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric'\n  };\n  if (options) {\n    defaultOptions = options;\n  }\n  return new Intl.DateTimeFormat(language, defaultOptions).format(date);\n};\nexport var startOfYearPeriod = function startOfYearPeriod(date, years) {\n  var year = date.getFullYear();\n  return Math.floor(year / years) * years;\n};\nexport var isDateInDecade = function isDateInDecade(date, startYear) {\n  var year = date.getFullYear();\n  var endYear = startYear + 9;\n  return year >= startYear && year <= endYear;\n};\nexport var isDateRangeInDecade = function isDateRangeInDecade(startDate, endDate, decadeStart, decadeEnd) {\n  var startYear = startDate.getFullYear();\n  var endYear = endDate.getFullYear();\n  if (decadeStart && decadeEnd) {\n    // Check if the start and end years of the date range are within the decade\n    var isStartYearInRange = isDateInRange(new Date(startYear, 0, 1), new Date(decadeStart, 0, 1), new Date(decadeEnd, 11, 31));\n    var isEndYearInRange = isDateInRange(new Date(endYear, 11, 31), new Date(decadeStart, 0, 1), new Date(decadeEnd, 11, 31));\n    return isStartYearInRange && isEndYearInRange;\n  }\n  // If decadeStart or decadeEnd is not provided, treat it as an open-ended range\n  return true;\n};","map":null,"metadata":{},"sourceType":"module"}