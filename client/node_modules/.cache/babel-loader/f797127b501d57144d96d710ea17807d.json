{"ast":null,"code":"\"use client\";\n\n// src/use-aria-popover.ts\nimport _objectSpread from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport { useEffect } from \"react\";\nimport { useOverlay, useOverlayPosition } from \"@react-aria/overlays\";\nimport { ariaHideOutside, toReactAriaPlacement } from \"@nextui-org/aria-utils\";\nimport { mergeProps } from \"@react-aria/utils\";\nfunction useReactAriaPopover(props, state) {\n  var triggerRef = props.triggerRef,\n    popoverRef = props.popoverRef,\n    showArrow = props.showArrow,\n    _props$offset = props.offset,\n    offset = _props$offset === void 0 ? 7 : _props$offset,\n    _props$crossOffset = props.crossOffset,\n    crossOffset = _props$crossOffset === void 0 ? 0 : _props$crossOffset,\n    scrollRef = props.scrollRef,\n    shouldFlip = props.shouldFlip,\n    boundaryElement = props.boundaryElement,\n    _props$shouldCloseOnB = props.shouldCloseOnBlur,\n    shouldCloseOnBlur = _props$shouldCloseOnB === void 0 ? true : _props$shouldCloseOnB,\n    _props$placement = props.placement,\n    placementProp = _props$placement === void 0 ? \"top\" : _props$placement,\n    containerPadding = props.containerPadding,\n    shouldCloseOnInteractOutside = props.shouldCloseOnInteractOutside,\n    isNonModalProp = props.isNonModal,\n    isKeyboardDismissDisabled = props.isKeyboardDismissDisabled,\n    otherProps = _objectWithoutProperties(props, [\"triggerRef\", \"popoverRef\", \"showArrow\", \"offset\", \"crossOffset\", \"scrollRef\", \"shouldFlip\", \"boundaryElement\", \"shouldCloseOnBlur\", \"placement\", \"containerPadding\", \"shouldCloseOnInteractOutside\", \"isNonModal\", \"isKeyboardDismissDisabled\"]);\n  var isNonModal = isNonModalProp || true;\n  var _useOverlay = useOverlay({\n      isOpen: state.isOpen,\n      onClose: state.close,\n      shouldCloseOnBlur: shouldCloseOnBlur,\n      isDismissable: true,\n      isKeyboardDismissDisabled: isKeyboardDismissDisabled,\n      shouldCloseOnInteractOutside: shouldCloseOnInteractOutside ? shouldCloseOnInteractOutside : function (element) {\n        var trigger = triggerRef == null ? void 0 : triggerRef.current;\n        return !trigger || !trigger.contains(element);\n      }\n    }, popoverRef),\n    overlayProps = _useOverlay.overlayProps,\n    underlayProps = _useOverlay.underlayProps;\n  var _useOverlayPosition = useOverlayPosition(_objectSpread({}, otherProps, {\n      shouldFlip: shouldFlip,\n      crossOffset: crossOffset,\n      targetRef: triggerRef,\n      overlayRef: popoverRef,\n      isOpen: state.isOpen,\n      scrollRef: scrollRef,\n      boundaryElement: boundaryElement,\n      containerPadding: containerPadding,\n      placement: toReactAriaPlacement(placementProp),\n      offset: showArrow ? offset + 3 : offset,\n      onClose: function onClose() {}\n    })),\n    positionProps = _useOverlayPosition.overlayProps,\n    arrowProps = _useOverlayPosition.arrowProps,\n    placement = _useOverlayPosition.placement;\n  useEffect(function () {\n    if (state.isOpen && !isNonModal && popoverRef.current) {\n      return ariaHideOutside([popoverRef.current]);\n    }\n  }, [isNonModal, state.isOpen, popoverRef]);\n  return {\n    popoverProps: mergeProps(overlayProps, positionProps),\n    arrowProps: arrowProps,\n    underlayProps: underlayProps,\n    placement: placement\n  };\n}\nexport { useReactAriaPopover };","map":null,"metadata":{},"sourceType":"module"}