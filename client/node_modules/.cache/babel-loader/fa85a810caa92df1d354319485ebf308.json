{"ast":null,"code":"import _objectSpread from \"E:\\\\Web Development\\\\Ecommerce\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\n// src/use-accordion-item.ts\nimport { useId, useCallback, useEffect } from \"react\";\nimport { focusSafely } from \"@react-aria/focus\";\nimport { useButton } from \"@react-aria/button\";\nfunction useReactAriaAccordionItem(props, state, ref) {\n  var item = props.item,\n    isDisabledProp = props.isDisabled;\n  var key = item.key;\n  var manager = state.selectionManager;\n  var buttonId = useId();\n  var regionId = useId();\n  var isDisabled = state.disabledKeys.has(item.key) || isDisabledProp;\n  useEffect(function () {\n    var isFocused = key === state.focusedKey;\n    if (isFocused && document.activeElement !== ref.current) {\n      ref.current && focusSafely(ref.current);\n    }\n  }, [ref, key, state.focusedKey]);\n  var onSelect = useCallback(function (e) {\n    if (!manager.canSelectItem(key)) {\n      return;\n    }\n    manager.select(key, e);\n    state.toggleKey(key);\n  }, [key, manager]);\n  var extendFocusSelection = useCallback(function (toKey) {\n    if (manager.selectionBehavior === \"replace\") {\n      manager.extendSelection(toKey);\n    }\n    manager.setFocusedKey(toKey);\n  }, [manager]);\n  var onKeyDown = useCallback(function (event) {\n    var keyMap = {\n      ArrowDown: function ArrowDown() {\n        var nextKey = state.collection.getKeyAfter(key);\n        if (nextKey && state.disabledKeys.has(nextKey)) {\n          var nextEnabledKey = state.collection.getKeyAfter(nextKey);\n          nextEnabledKey && extendFocusSelection(nextEnabledKey);\n        } else {\n          nextKey && extendFocusSelection(nextKey);\n        }\n      },\n      ArrowUp: function ArrowUp() {\n        var prevKey = state.collection.getKeyBefore(key);\n        if (prevKey && state.disabledKeys.has(prevKey)) {\n          var prevEnabledKey = state.collection.getKeyBefore(prevKey);\n          prevEnabledKey && extendFocusSelection(prevEnabledKey);\n        } else {\n          prevKey && extendFocusSelection(prevKey);\n        }\n      },\n      Home: function Home() {\n        var firstKey = state.collection.getFirstKey();\n        firstKey && extendFocusSelection(firstKey);\n      },\n      End: function End() {\n        var lastKey = state.collection.getLastKey();\n        lastKey && extendFocusSelection(lastKey);\n      }\n    };\n    var action = keyMap[event.key];\n    if (action) {\n      event.preventDefault();\n      if (manager.canSelectItem(key)) {\n        action(event);\n      }\n    }\n  }, [key, manager]);\n  var _useButton = useButton({\n      id: buttonId,\n      elementType: \"button\",\n      isDisabled: isDisabled,\n      onKeyDown: onKeyDown,\n      onPress: onSelect\n    }, ref),\n    buttonProps = _useButton.buttonProps;\n  var isExpanded = state.selectionManager.isSelected(item.key);\n  return {\n    buttonProps: _objectSpread({}, buttonProps, {\n      \"aria-expanded\": isExpanded,\n      \"aria-controls\": isExpanded ? regionId : void 0\n    }),\n    regionProps: {\n      id: regionId,\n      role: \"region\",\n      \"aria-labelledby\": buttonId\n    }\n  };\n}\nexport { useReactAriaAccordionItem };","map":null,"metadata":{},"sourceType":"module"}